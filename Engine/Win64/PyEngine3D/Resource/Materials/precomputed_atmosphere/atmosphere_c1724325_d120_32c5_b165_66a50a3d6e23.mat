{'binary_data': b'\x80\x04\x95\x85\x00\x00\x00\x00\x00\x00\x00\x8c\x16numpy._core.multiarray\x94\x8c\x0c_reconstruct\x94\x93'
                b'\x94\x8c\x05numpy\x94\x8c\x07ndarray\x94\x93\x94K\x00\x85\x94C\x01b\x94\x87\x94R\x94(K\x01J\x1an\x01'
                b'\x00\x85\x94h\x03\x8c\x05dtype\x94\x93\x94\x8c\x02u1\x94\x89\x88\x87\x94R\x94(K\x03\x8c\x01|\x94NNN'
                b'J\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89B\x1an\x01\x00\x0b\x00\x00\x00\x0b\xf6\xa13\r\xe2\x07'
                b'.\xa1\xbc\xe3M\xa0\xab\x0e+\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00\x80\x18\x00\x00\x1an\x01'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x86\x00\x00\x00\x86\x00\x00\x00\x86\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\n\x00\x00 \x00\x00'
                b'\x00&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t\x00\x00\x00\x15\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00'
                b'\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x07\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x0b\x00\x00'
                b'\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\x1an\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\xbfu\x85'
                b'\x9369\xb6\x8d\xbfu\x85\x9369\xb6\x8d\xac\x93\xd9<&\x84\x19zp\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x07\x00\x00\x00\x06\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x07\x00\x00\x00\x02\x00\x00'
                b'\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00'
                b'\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00'
                b'\x00\x02\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x18\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00'
                b'\x00\x00\x01\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00+\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00@\x01\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x08\x00\x00\x00:\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00'
                b'\x00\x05\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00C\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00'
                b'\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00'
                b'\x00\x10\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x0c\x00\x00\x00S\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00'
                b'\x00\x00\x01\x00\x00\x98\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00`\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\r\x00\x00\x00m\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00'
                b'\x00\x00\x01\x00\x00\xa0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00{\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x87\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00P\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x0e\x00\x00\x00\x97\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\xa6\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00'
                b'\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\xb0\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x90\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x13\x00\x00\x00\xb9\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x04\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00'
                b'\x00\xcd\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00\x01\x00\x00'
                b'\x00\x00\x01\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\xe1\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00S\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00'
                b'\x00\x02\x00\x00\x00\x04\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x0e\x00\x00\x00\xf5\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x04\x01\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x1c\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x1c\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00'
                b'\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00+\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xdc\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x1c\x00\x00\x00<\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\x02\x00\x00\x00\x00\x01\x00'
                b'\x00\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00Y\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00j\x01\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00l\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x19\x00\x00\x00|\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00'
                b'\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd4\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x96\x01\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00'
                b'\x00\xd8\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xae\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xc8\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x12\x00\x00\x00\xc5\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00'
                b'\x00\x00\x01\x00\x00H\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\xd8\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xbc\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x10\x00\x00\x00\xeb\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00'
                b'\x00\x02\x00\x00\x00\x00\x01\x00\x00|\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xfc\x01\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x13\x00\x00\x00\x13\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xcc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b"\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00'\x02\x00"
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00'
                b'\x00\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00<\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00'
                b'\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00p\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00W\x02\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x80\x01\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x1a\x00\x00\x00t\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00'
                b'\x00\x02\x00\x00\x00\x00\x01\x00\x00|\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x8f\x02\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00'
                b'\x00\xaf\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00P\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x1c\x00\x00\x00\xcf\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00'
                b'\x00\x02\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\xec\x02\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00p\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00'
                b'\x00\t\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x000\x01\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x1c\x00\x00\x00*\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00'
                b'\x00\x02\x00\x00\x00\x00\x01\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00G\x03\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x9c\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x1f\x00\x00\x00f\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00'
                b'\x00\x02\x00\x00\x00\x00\x01\x00\x00\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x86\x03\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00'
                b'\x00\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\xa5\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00'
                b'\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xc0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00'
                b'\x00\xbd\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00'
                b'\x00\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\xdc\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00'
                b'\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00'
                b'\x00\xfb\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00'
                b'\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x1a\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00'
                b'\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x009\x04\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xe0\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x1b\x00\x00\x00U\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00'
                b'\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00q\x04\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xdc\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x16\x00\x00\x00\x8b\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00'
                b'\x00\xa2\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\xb8\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00'
                b'\x00\xcc\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00'
                b'\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xe3\x04\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x1c\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x15\x00\x00\x00\xfa\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00'
                b'\x00\x03\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x10\x05\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00$\x05\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00,\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x16\x00\x00\x00;\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00'
                b'\x00\x03\x00\x00\x00\x00\x01\x00\x00<\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00R\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00h\x05\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00|\x05\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00L\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x16\x00\x00\x00\x93\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00'
                b'\x00\xaa\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00`\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x13\x00\x00\x00\xc0\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00'
                b'\x00\x03\x00\x00\x00\x00\x01\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xd4\x05\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00l\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x16\x00\x00\x00\xeb\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00'
                b'\x00\x03\x00\x00\x00\x00\x01\x00\x00|\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x02\x06\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x13\x00\x00\x00\x18\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00'
                b'\x00\x00\x01\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00,\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x8c\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x16\x00\x00\x00C\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00'
                b'\x00\x00\x01\x00\x00\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00Z\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00p\x06\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xb0\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x16\x00\x00\x00\x84\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00'
                b'\x00\x9b\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00'
                b'\x00\x00\x01\x00\x00\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xb2\x06\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x13\x00\x00\x00\xc8\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00'
                b'\x00\x00\x01\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xdc\x06\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xcc\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x16\x00\x00\x00\xf3\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00'
                b'\x00\n\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00'
                b'\x00\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00 \x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x004\x07\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00'
                b'\x00\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00K\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00b\x07\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x13\x00\x00\x00x\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00'
                b'\x00\x03\x00\x00\x00\x00\x01\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x8c\x07\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00'
                b'\x00\x0c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xa3\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x1c\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x15\x00\x00\x00\xba\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00'
                b'\x00\x00\x01\x00\x00 \x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\xd0\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x000\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xe4\x07\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00,\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x16\x00\x00\x00\xfb\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00<\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x12\x08\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x06\x00\x00\x00\x00\x01\x00\x00@\x00\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b"\x00\x00\x00\x00\x00\n\x00\x00\x00'\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00"
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00'
                b'\x00\x05\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x002\x08\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00V\x8b\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00>\x08\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x08\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\r\x00\x00\x00I\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00\x04\x00\x00'
                b'\x00\x00\x01\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00W\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00'
                b'\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00c\x08\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00o\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00L\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00z\x08\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x88\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00\x97\x08\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\x07\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x0f\xbc\x12\x1a\x02\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x19\x00\x00\x00\xb1\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\x08\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x80"\xbc'
                b'\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\xcb\x08\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x04\x00\x00\x00\xd0\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00'
                b'\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00'
                b'\x00\xd5\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00'
                b'\x00\xa8\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\xea\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x8c\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x0b\x00\x00\x00\xf7\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00'
                b'\x00\x05\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x03\t\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x06\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x13\t\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x06\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\x02\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x02\x00\x00\x00\x00\x00\x00\x000\x1e\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00'
                b"\x00'\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\x11\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xe0\x19\xbc\x12\x1a\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x008\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\x0e\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00'
                b'\x00\x00\x00\x00\x00p\x18\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00G\t\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\x13\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x17\xbc\x12\x1a\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00V\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\x14\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00'
                b'\x00\x00\x00\x00\x00x\x1d\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00e\t\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\r\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x90\x15\xbc\x12\x1a\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00t\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x0c\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\x0f\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00'
                b'\x00\x00\x00\x00\x00(\x19\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x81\t\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\x10\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\xd8\x14\xbc\x12\x1a\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x8d\t\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x0e\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\x12\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\n\x00\x00\x00\x00\x00\x00\x00H\x16\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00'
                b'\x00\x9a\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\xa0\x1f\xbc\x12\x1a\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\xa7\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00'
                b'\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x12\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\x05\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00'
                b'\x00\x00\x00\x00\x00\xe8\x1e\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00'
                b'\x00\xba\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\x16\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\xc0\x1c\xbc'
                b'\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\xc9\t\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\x17\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x0c\x00\x00\x00\xd8\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x16\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\x15\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00'
                b'\x00\x00\x00\x00\x00\x08\x1c\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00'
                b'\x00\xe5\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\x03\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x008#\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x12\x00\x00\x00\xfd\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00_\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\x06\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x02'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00`\x0e\xbc\x12\x1a\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x10\n\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00'
                b'\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x1a\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\x01\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00'
                b'\x00\x00\x00\x00\x00 \x14\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x19\n\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00_\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00'
                b'\x00\xff\x00\x00\x00\xff\xff\xff\xff\x0b\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\xc8!\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b"\x00\x14\x00\x00\x00'\n\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00"
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\n\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x04'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00X \xbc\x12\x1a\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00<\n\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00_\x8b\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00'
                b'\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff \x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\x0c\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00'
                b'\x00\xb8\x17\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00J\n\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff"\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff'
                b'\xff\t\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00'
                b'\x00\x00\x00\x00\x00\x10!\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00Y\n\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff$\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00'
                b'\x00\xff\xff\xff\xff\x04\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x17\x00\x00\x00\x00\x00\x00\x00P\x1b\xbc\x12\x1a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00'
                b'\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00'
                b'\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00'
                b'\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00h\x00\x00\x00i\x00\x00\x00p\x00\x00'
                b'\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00'
                b'\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00'
                b'\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00BACKBUFFER_SIZE\x00CAMERA_POSITION\x00DELTA_TIME\x00INV_PROJECTION\x00I'
                b'NV_VIEW\x00INV_VIEW_ORIGIN\x00JITTER_DELTA\x00JITTER_FRAME\x00JITTER_OFFSET\x00LIGHT_COLOR\x00LIGHT_DIRECT'
                b'ION\x00LIGHT_POSITION\x00MOUSE_POS\x00NEAR_FAR\x00PARTICLE_ALIGN_MODE\x00PARTICLE_BLEND_MODE\x00PARTICLE_C'
                b'ELL_COUNT\x00PARTICLE_COLOR\x00PARTICLE_COMMON_DUMMY_0\x00PARTICLE_DELAY\x00PARTICLE_DUMMY_0\x00PARTICLE_EN'
                b'ABLE_VECTOR_FIELD\x00PARTICLE_FADE_IN\x00PARTICLE_FADE_OUT\x00PARTICLE_FORCE_ELASTICITY\x00PARTICLE_FORCE_FR'
                b'ICTION\x00PARTICLE_FORCE_GRAVITY\x00PARTICLE_LIFE_TIME\x00PARTICLE_MAX_COUNT\x00PARTICLE_OPACITY\x00PARTICL'
                b'E_PARENT_MATRIX\x00PARTICLE_PLAY_SPEED\x00PARTICLE_SPAWN_COUNT\x00PARTICLE_SPAWN_VOLUME_INFO\x00PARTICLE_SPA'
                b'WN_VOLUME_MATRIX\x00PARTICLE_SPAWN_VOLUME_TYPE\x00PARTICLE_TRANSFORM_ROTATION_MAX\x00PARTICLE_TRANSFORM_ROTAT'
                b'ION_MIN\x00PARTICLE_TRANSFORM_SCALE_MAX\x00PARTICLE_TRANSFORM_SCALE_MIN\x00PARTICLE_VECTOR_FIELD_INV_MATR'
                b'IX\x00PARTICLE_VECTOR_FIELD_MATRIX\x00PARTICLE_VECTOR_FIELD_STRENGTH\x00PARTICLE_VECTOR_FIELD_TIGHTNESS\x00P'
                b'ARTICLE_VELOCITY_ACCELERATION\x00PARTICLE_VELOCITY_LIMIT\x00PARTICLE_VELOCITY_POSITION_MAX\x00PARTICLE_VELOCI'
                b'TY_POSITION_MIN\x00PARTICLE_VELOCITY_ROTATION_MAX\x00PARTICLE_VELOCITY_ROTATION_MIN\x00PARTICLE_VELOCITY_SCAL'
                b'E_MAX\x00PARTICLE_VELOCITY_SCALE_MIN\x00PARTICLE_VELOCITY_STRETCH\x00PARTICLE_VELOCITY_TYPE\x00POINT_LIGHTS['
                b'0].color\x00POINT_LIGHTS[0].pos\x00POINT_LIGHTS[0].radius\x00POINT_LIGHTS[0].render\x00POINT_LIGHTS[1].color'
                b'\x00POINT_LIGHTS[1].pos\x00POINT_LIGHTS[1].radius\x00POINT_LIGHTS[1].render\x00POINT_LIGHTS[2].color\x00POI'
                b'NT_LIGHTS[2].pos\x00POINT_LIGHTS[2].radius\x00POINT_LIGHTS[2].render\x00POINT_LIGHTS[3].color\x00POINT_LIGHT'
                b'S[3].pos\x00POINT_LIGHTS[3].radius\x00POINT_LIGHTS[3].render\x00POINT_LIGHTS[4].color\x00POINT_LIGHTS[4].pos'
                b'\x00POINT_LIGHTS[4].radius\x00POINT_LIGHTS[4].render\x00POINT_LIGHTS[5].color\x00POINT_LIGHTS[5].pos\x00POI'
                b'NT_LIGHTS[5].radius\x00POINT_LIGHTS[5].render\x00POINT_LIGHTS[6].color\x00POINT_LIGHTS[6].pos\x00POINT_LIGHT'
                b'S[6].radius\x00POINT_LIGHTS[6].render\x00POINT_LIGHTS[7].color\x00POINT_LIGHTS[7].pos\x00POINT_LIGHTS[7].rad'
                b'ius\x00POINT_LIGHTS[7].render\x00POINT_LIGHTS[8].color\x00POINT_LIGHTS[8].pos\x00POINT_LIGHTS[8].radius\x00'
                b'POINT_LIGHTS[8].render\x00POINT_LIGHTS[9].color\x00POINT_LIGHTS[9].pos\x00POINT_LIGHTS[9].radius\x00POINT_LI'
                b'GHTS[9].render\x00PREV_VIEW_PROJECTION\x00PROJECTION\x00RENDER_SSAO\x00RENDER_SSR\x00SCENE_DUMMY_0\x00SCRE'
                b'EN_SIZE\x00SHADOW_BIAS\x00SHADOW_EXP\x00SHADOW_MATRIX\x00SHADOW_SAMPLES\x00SKY_RADIANCE_TO_LUMINANCE\x00SU'
                b'N_RADIANCE_TO_LUMINANCE\x00TIME\x00VIEW\x00VIEWCONSTANTS_DUMMY0\x00VIEW_DUMMY_0\x00VIEW_ORIGIN\x00VIEW_PRO'
                b'JECTION\x00atmosphere_exposure\x00cloud_absorption\x00cloud_altitude\x00cloud_contrast\x00cloud_coverag'
                b'e\x00cloud_exposure\x00cloud_height\x00cloud_speed\x00cloud_tiling\x00earth_center\x00irradiance_texture\x00n'
                b'oise_contrast\x00noise_coverage\x00noise_tiling\x00render_light_probe_mode\x00scattering_texture\x00sun_siz'
                b'e\x00texture_cloud\x00texture_linear_depth\x00texture_noise\x00texture_shadow\x00transmittance_texture\x00'
                b'\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00vertex\x00\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q'
                b'\x8b\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00 '
                b'\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P'
                b'\x8b\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00!'
                b'\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0b\x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R'
                b'\x8b\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xffeye_ray\x00uv\x00gl_Position\x00\t\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\n\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00out_color\x00out_inscatte'
                b'r\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x03\x03\xff\xff\xff\xff\xff\xff\x00'
                b'\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x05\x05\xff\xff\xff'
                b'\xff\xff\xff\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x06\x06\xff\xff\xff'
                b'\xff\xff\xff\x00\x00\x00\xe0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00/\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x04'
                b'\x04\xff\xff\xff\xff\xff\xff\x00\x00\x00@\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00E\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00U\x00\x00\x00\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01'
                b'\x01\xff\xff\xff\xff\xff\xff\x00\x00\x00\xb0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00d\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x02\x02\xff\xff\xff\xff\xff\xff\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00light_constants\x00particle_commo'
                b'n\x00particle_infos\x00point_light_constants\x00scene_constants\x00view_constants\x00view_projectio'
                b'n\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffR\x8b'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00vertex'
                b'\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffQ\x8b\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00'
                b'\x00\x08\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffP\x8b\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00eye_ray\x00uv\x00\t\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\n\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00out_color\x00out_inscatter\x00Fragment info\n-------------\n0(1988) : warnin'
                b'g C7050: "out_inscatter.xyz" might be used before being initialized\n\x00N\x04\x00\x00!!NVvp5.0\nOPTION NV'
                b'_internal;\nOPTION NV_bindless_texture;\nCBUFFER buf0[] = { program.buffer[0] };\nCBUFFER buf1[] = { progra'
                b'm.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2] };\nCBUFFER buf3[] = { program.buffer[3] };\nCBUFFER b'
                b'uf4[] = { program.buffer[4] };\nCBUFFER buf5[] = { program.buffer[5] };\nCBUFFER buf6[] = { program.buffer'
                b'[6] };\nATTRIB vertex_attrib[] = { vertex.attrib[0..0] };\nOUTPUT result_attrib[] = { result.attrib[0..1] '
                b'};\nTEMP R0, R1, R2;\nTEMP T;\nLDC.F32X4 R0.xyz, buf1[336];\nMUL.F32 R1.xyz, vertex.attrib[0].y, R0;\nLDC.F32'
                b'X4 R0.xyz, buf1[320];\nMAD.F32 R1.xyz, vertex.attrib[0].x, R0, R1;\nLDC.F32X4 R0.xyz, buf1[352];\nMAD.F32 R'
                b'2.xyz, vertex.attrib[0].z, R0, R1;\nLDC.F32X4 R0.xyz, buf1[368];\nMAD.F32 R0.xyz, vertex.attrib[0].w, R0, '
                b'R2;\nLDC.F32X4 R1.xyz, buf1[208];\nMUL.F32 R2.xyz, R0.y, R1;\nLDC.F32X4 R1.xyz, buf1[192];\nMAD.F32 R2.xyz, '
                b'R0.x, R1, R2;\nLDC.F32X4 R1.xyz, buf1[224];\nMAD.F32 R0.xyz, R0.z, R1, R2;\nADD.F32 result.attrib[0].xyz, R'
                b'0, {0, 0, 0, 0}.x;\nMOV.F result.position, vertex.attrib[0];\nMAD.F32 result.attrib[1].xy, vertex.attrib[0'
                b'], {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nEND\n\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00'
                b'\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xb0\xdc\x00\x00!!NVfp5.0\nOPTION NV_internal;\nOPTION NV_gpu_p'
                b'rogram_fp64;\nOPTION NV_bindless_texture;\nOPTION ARB_draw_buffers;\nPARAM c[24] = { program.local[0..23] }'
                b';\nCBUFFER buf0[] = { program.buffer[0] };\nCBUFFER buf1[] = { program.buffer[1] };\nCBUFFER buf2[] = { pro'
                b'gram.buffer[2] };\nCBUFFER buf3[] = { program.buffer[3] };\nCBUFFER buf4[] = { program.buffer[4] };\nCBUFFE'
                b'R buf5[] = { program.buffer[5] };\nCBUFFER buf6[] = { program.buffer[6] };\nATTRIB fragment_attrib[] = { f'
                b'ragment.attrib[0..1] };\nSHORT TEMP H0;\nTEMP R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, '
                b'R14, R15, R16, R17, R18;\nLONG TEMP D0;\nTEMP T;\nTEMP RC;\nSHORT TEMP HC;\nOUTPUT result_color0 = result.col'
                b'or;\nOUTPUT result_color1 = result.color[1];\nLDC.F32X4 R0.z, buf1[128];\nMOV.F R1.x, R0.z;\nLDC.F32X4 R0.z,'
                b' buf1[144];\nMOV.F R1.y, R0.z;\nDP3.F32 R0.x, fragment.attrib[0], fragment.attrib[0];\nRSQ.F32 R0.x, R0.x;\n'
                b'MUL.F32 R5.xyz, R0.x, fragment.attrib[0];\nLDC.F32X4 R1.z, buf1[160];\nDP3.F32 R0.w, R5, -R1;\nLDC.F32X4 R1'
                b'.xyz, buf3[80];\nDP3.F32 R11.w, R5, R1;\nLDC.F32X2 R1.y, buf1[384];\nMOV.F R0.xy, fragment.attrib[1];\nMOV.F'
                b' R0.z, {0, 0, 0, 0}.x;\nPK64.U D0.x, c[10];\nTXL.F R0.x, R0.xyzz, handle(D0.x), 2D;\nLDC.F32X2 R0.y, buf1[4'
                b'00];\nDIV.F32 R0.x, R0, R0.w;\nMIN.F R0.x, R0.y, R0;\nMAX.F R2.w, R0.x, {0, 0, 0, 0}.x;\nMUL.F32 R0.x, R0.y,'
                b' {0.00999999978, 0, 0, 0};\nMIN.F R0.x, R2.w, R0;\nMOV.F R4.xz, {0, 0, 0, 0}.x;\nMAX.F R4.y, R1, {10, 0, 0,'
                b' 0}.x;\nMUL.F32 R14.w, R0.x, {0.015625, 0, 0, 0}.x;\nMOV.F result_color0, {0, 1, 0, 0}.xxxy;\nMOV.F R10.xyz'
                b', {0, 0, 0, 0}.x;\nMUL.F32 R4.xyz, R4, {0.100000001, 0, 0, 0}.x;\nMUL.F32 R7.w, R0.y, {4, 0, 0, 0}.x;\nMAX.'
                b'F R12.w, R1.y, {0, 0, 0, 0}.x;\nMOV.F R15.w, |c[0].y|;\nMOV.U R16.w, {0, 0, 0, 0}.x;\nMOV.U R17.x, {0, 0, 0'
                b', 0};\nMOV.F R6.w, {0, 0, 0, 0}.x;\nMOV.S R17.y, {0, 0, 0, 0}.x;\nREP.S {64, 0, 0, 0};\nI2F.S R1.w, R17.y;\nM'
                b'UL.F32 R17.z, R1.w, R14.w;\nLDC.F32X4 R1.xyz, buf1[384];\nMAD.F32 R16.xyz, R5, R17.z, R1;\nLDC.F32X4 R0, bu'
                b'f3[16];\nMUL.F32 R1, R16.y, R0;\nLDC.F32X4 R0, buf3[0];\nMAD.F32 R9, R16.x, R0, R1;\nLDC.F32X4 R0, buf3[32];'
                b'\nLDC.F32X4 R1, buf3[48];\nMAD.F32 R0, R16.z, R0, R9;\nADD.F32 R0, R0, R1;\nDIV.F32 R0.xyz, R0, R0.w;\nMUL.F3'
                b'2 R1.xyz, R0, {0.5, 0, 0, 0}.x;\nADD.F32 R0.xyz, R1, {0.5, 0, 0, 0}.x;\nSLT.F32 R0.w, R1.x, {-0.5, 0, 0, 0'
                b'}.x;\nSLT.F32 R1.z, {1, 0, 0, 0}.x, R0.x;\nTRUNC.U R1.x, R1.z;\nTRUNC.U R0.w, R0;\nOR.U R0.w, R0, R1.x;\nSLT.'
                b'F32 R1.x, R1.y, {-0.5, 0, 0, 0};\nSLT.F32 R1.y, {1, 0, 0, 0}.x, R0;\nTRUNC.U R1.x, R1;\nOR.U R0.w, R0, R1.x'
                b';\nTRUNC.U R1.y, R1;\nOR.U R0.w, R0, R1.y;\nMOV.F R1.xy, R0;\nSLE.F32 R0.y, R2.w, R17.z;\nTRUNC.U R0.y, R'
                b'0;\nOR.U.CC HC.x, R0.w, R0.y;\nMOV.F R1.z, {0, 0, 0, 0}.x;\nPK64.U D0.x, c[9];\nTXB.F R0.x, R1.xyzz, handle('
                b'D0.x), 2D;\nMOV.F H0.x, {0, 0, 0, 0};\nIF NE.x;\nMOV.U R17.x, {1, 0, 0, 0};\nELSE;\nADD.F32 R1.xyz, R16, -c[0'
                b'];\nDP3.F32 R0.y, R1, R1;\nRSQ.F32 R0.y, R0.y;\nRCP.F32 R0.y, R0.y;\nSLT.F32 R0.y, R0, R15.w;\nTRUNC.U.CC HC.'
                b'x, R0.y;\nMOV.F H0.x, {0, 0, 0, 0};\nIF NE.x;\nMOV.U R17.x, {1, 0, 0, 0};\nELSE;\nSLE.F32 R0.y, R0.x, R0.'
                b'z;\nTRUNC.U R0.w, R0.y;\nSEQ.U R0.y, {0, 0, 0, 0}.x, R16.w;\nAND.U.CC HC.x, -R0.y, R0.w;\nMOV.F H0.x, {0, 0,'
                b' 0, 0};\nIF NE.x;\nMOV.U R16.w, {1, 0, 0, 0}.x;\nELSE;\nSLT.F32 R0.x, R0.z, R0;\nTRUNC.U R0.x, R0;\nAND.U.'
                b'CC HC.x, R16.w, R0;\nMOV.F H0.x, {0, 0, 0, 0};\nIF NE.x;\nMOV.F H0.x, {1, 0, 0, 0};\nMOV.U R16.w, {0, 0, 0, '
                b'0}.x;\nENDIF;\nENDIF;\nENDIF;\nENDIF;\nMOV.F H0.y, {0, 0, 0, 0}.x;\nSEQ.F H0.x, H0, H0.y;\nTRUNC.U.CC HC.x,'
                b' H0;\nIF NE.x;\nMOV.U.CC RC.x, R16.w;\nIF NE.x;\nADD.F32 R6.w, R6, {1, 0, 0, 0}.x;\nENDIF;\nSEQ.S R0.x, R1'
                b'7.y, {63, 0, 0, 0};\nOR.U.CC HC.x, R17, -R0;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDIF;'
                b'\nENDIF;\nADD.S R17.y, R17, {1, 0, 0, 0}.x;\nENDREP;\nLDC.F32X4 R0.xyz, buf1[384];\nMAD.F32 R1.xyz, R0, {0.10'
                b'0000001, 0, 0, 0}.x, -c[0];\nDP3.F32 R0.x, R1, R1;\nRSQ.F32 R0.w, R0.x;\nLDC.F32X4 R0.xyz, buf3[80];\nMUL.F3'
                b'2 R1.xyz, R0.w, R1;\nDP3.F32 R0.x, R1, R0;\nADD.F32 R0.x, R0, {-0.0199999996, 0, 0, 0};\nMUL.F32.SAT R0.x, '
                b'R0, {50, 0, 0, 0};\nMUL.F32 R0.y, R0.x, R0.x;\nMAD.F32 R0.z, -R0.x, {2, 3, 0, 0}.x, {2, 3, 0, 0}.y;\nMUL.F3'
                b'2 R0.x, R6.w, {0.015625, 0, 0, 0};\nMUL.F32 R0.y, R0, R0.z;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nMUL.F32 R0.x, R'
                b'0, R0.y;\nMUL.F32 R6.w, R0.x, {2, 0, 0, 0}.x;\nADD.F32 R9.xyz, R4, -c[0];\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0,'
                b' 0}, {0, 0, 0, 0};\nBRK (NE.x);\nDP3.F32 R0.x, R9, R9;\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.z, R0.x;\nDP3.F32 R1.'
                b'x, R9, R5;\nDIV.F32 R0.x, R0.z, R0.x;\nMAD.F32 R0.x, R1, R1, -R0;\nADD.F32 R0.x, R0, {41216400, 0, 0, 0};\nR'
                b'SQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nSGT.F32 R0.w, -R1.x, R0.x;\nADD.F32 R0.y, -R1.x, -R0.x;\nTRUNC.U.CC'
                b' HC.x, R0.w;\nMOV.F R0.x, R0.z;\nMOV.F R14.w, R0.z;\nIF NE.x;\nMAD.F32 R9.xyz, R5, R0.y, R9;\nADD.F32 R1.x, R'
                b'0.y, R1;\nMOV.F R14.w, {6420, 0, 0, 0}.x;\nELSE;\nSGT.F32 R0.x, R0, {6420, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nI'
                b'F NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.F R11.xyz, {1, 0, 0, 0}.x;\nMOV.F R12.xyz, {0, 0, 0, 0}.x;\nBRK ('
                b'NE.x);\nENDIF;\nENDIF;\nLDC.F32X4 R0.xyz, buf3[80];\nDP3.F32 R0.w, R9, R0;\nDIV.F32 R0.w, R0, R14.w;\nDP3.'
                b'F32 R9.w, R0, R5;\nDIV.F32 R15.w, R1.x, R14.w;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE'
                b'.x);\nSLT.F32 R0.x, R15.w, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMUL.F32 R0.x, R14.w, R14.w;\nMUL.F3'
                b'2 R0.y, R15.w, R15.w;\nMAD.F32 R0.x, R0.y, R0, -R0;\nADD.F32 R0.x, R0, {40462320, 0, 0, 0};\nSLE.F32 R0.x, '
                b'{0, 0, 0, 0}, R0;\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.U R13.w, {1, 0, 0, 0}.x'
                b';\nBRK (NE.x);\nENDIF;\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.U R13.w, {0, 0, 0, 0}.x;\nBRK (NE.x);\nEN'
                b'DREP;\nMOV.U.CC RC.x, R13.w;\nIF NE.x;\nMOV.F R0.xyz, {0, 0, 0, 0}.x;\nELSE;\nMUL.F32 R0.y, R15.w, R15.w;'
                b'\nMUL.F32 R0.x, R14.w, R14.w;\nMAD.F32 R0.x, R0.y, R0, -R0;\nADD.F32 R0.x, R0, {41216400, 0, 0, 0};\nMAX.F R'
                b'0.y, R0.x, {0, 0, 0, 0}.x;\nMAD.F32 R0.x, R14.w, R14.w, {-40462320, 0, 0, 0};\nRSQ.F32 R0.y, R0.y;\nRCP.F32'
                b' R0.y, R0.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nMAD.F32 R0.z, -R14.w, R15.w, R0.y;\nRSQ.F32 R0.x, R0.x;\nRCP.F3'
                b'2 R0.y, R0.x;\nADD.F32 R1.x, -R14.w, {6420, 0, 0, 0};\nADD.F32 R1.y, -R1.x, R0;\nMAX.F R0.x, R0.z, {0, 0, 0'
                b', 0};\nADD.F32 R0.z, R1.y, {868.377747, 0, 0, 0}.x;\nADD.F32 R0.x, R0, -R1;\nDIV.F32 R0.x, R0, R0.z;\nMAD.F3'
                b'2 R0.x, R0, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nMAD.F32 R0.y, R0, {0.0011335'
                b'793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, c[4];\nTEX.F R0.xyz, R0, handle(D0'
                b'.x), 2D;\nENDIF;\nSEQ.F R1.x, R6.w, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R1;\nMOV.F R11.xyz, R0;\nIF NE.x;\nMAD'
                b'.F32 R0.x, R14.w, R14.w, {-40462320, 0, 0, 0};\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;\nRCP.F32'
                b' R0.x, R0.x;\nMOV.U.CC RC.x, R13.w;\nMUL.F32 R0.y, R14.w, R15.w;\nMUL.F32 R0.z, R14.w, R14.w;\nMAD.F32 R0.z,'
                b' R0.y, R0.y, -R0;\nADD.F32 R0.z, R0, {40462320, 0, 0, 0}.x;\nMAD.F32 R12.x, R0, {0.00111558591, 0.015625, '
                b'0, 0}, {0.00111558591, 0.015625, 0, 0}.y;\nIF NE.x;\nMAX.F R0.z, R0, {0, 0, 0, 0}.x;\nRSQ.F32 R1.x, R0.z;\nA'
                b'DD.F32 R0.z, R14.w, {-6361, 0, 0, 0}.x;\nRCP.F32 R1.x, R1.x;\nSEQ.F R1.y, R0.x, R0.z;\nTRUNC.U.CC HC.x, R1.'
                b'y;\nADD.F32 R0.y, -R0, -R1.x;\nIF NE.x;\nMOV.F R0.x, {0, 0, 0, 0};\nELSE;\nADD.F32 R0.x, -R0.z, R0;\nADD.F'
                b'32 R0.y, R0, -R0.z;\nDIV.F32 R0.x, R0.y, R0.x;\nENDIF;\nMAD.F32 R0.x, R0, {0.984375, 0.0078125, 0, 0}, {0.9'
                b'84375, 0.0078125, 0, 0}.y;\nMAD.F32 R12.y, -R0.x, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nELSE;\nADD.F32 R1.x,'
                b' -R14.w, {6420, 0, 0, 0};\nADD.F32 R0.z, R0, {754079.938, 0, 0, 0}.x;\nMAX.F R0.z, R0, {0, 0, 0, 0}.x;\nRSQ'
                b'.F32 R0.z, R0.z;\nADD.F32 R1.y, -R1.x, R0.x;\nRCP.F32 R0.z, R0.z;\nADD.F32 R0.x, -R0.y, R0.z;\nADD.F32 R0.y,'
                b' R1, {868.377747, 0, 0, 0}.x;\nADD.F32 R0.x, R0, -R1;\nDIV.F32 R0.x, R0, R0.y;\nMAD.F32 R0.x, R0, {0.984375'
                b', 0.0078125, 0, 0}, {0.984375, 0.0078125, 0, 0}.y;\nMAD.F32 R12.y, R0.x, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}'
                b'.x;\nENDIF;\nMUL.F32 R0.x, R0.w, R0.w;\nMAD.F32 R0.x, R0, {40462320, 754080, 0, 0}, {40462320, 754080, 0, 0'
                b'}.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMAD.F32 R0.x, R0.w, {-6361, 0'
                b', 0, 0}, R0;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nADD.F32 R0.x, R0, {-59, 0, 0, 0};\nMUL.F32 R0.x, R0, {0.001235'
                b'51709, 0, 0, 0};\nMAD.F32 R0.y, -R0.x, {0.127240658, 1, 0, 0}.x, {0.127240658, 1, 0, 0};\nADD.F32 R0.z, R0'
                b'.x, {1, 0, 0, 0}.x;\nMAD.F32 R0.x, R9.w, {0.5, 0, 0, 0}, {0.5, 0, 0, 0};\nMUL.F32 R1.x, R0, {7, 0, 0, 0};\n'
                b'FLR.F R1.y, R1.x;\nMAX.F R0.y, R0, {0, 0, 0, 0}.x;\nDIV.F32 R0.y, R0, R0.z;\nMAD.F32 R0.x, R0.y, {0.96875, '
                b'0.015625, 0, 0}, {0.96875, 0.015625, 0, 0}.y;\nADD.F32 R12.z, R1.y, R0.x;\nADD.F32 R14.w, -R1.y, R1.x;\nPK6'
                b'4.U D0.x, c[6];\nMUL.F32 R0.x, R12.z, {0.125, 0, 0, 0};\nMOV.F R0.z, R12.x;\nMOV.F R0.y, R12;\nTEX.F R0, R0,'
                b' handle(D0.x), 3D;\nMAD.F32 R1, -R14.w, R0, R0;\nMAD.F32 R0.x, R12.z, {0.125, 0, 0, 0}, {0.125, 0, 0, 0};\n'
                b'MOV.F R0.z, R12.x;\nMOV.F R0.y, R12;\nTEX.F R0, R0, handle(D0.x), 3D;\nMAD.F32 R0, R0, R14.w, R1;\nREP.S ;\nS'
                b'EQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nSEQ.F R1.x, R0, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R1;'
                b'\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.F R13.xyz, {0, 0, 0, 0}.x;\nBRK (NE.x);\nENDIF;\nMUL.F32 R1.'
                b'xyz, R0, R0.w;\nDIV.F32 R1.xyz, R1, R0.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMUL.F32 R13.xyz, R1, {0.99999994, '
                b'0.427939206, 0.175286993, 0};\nBRK (NE.x);\nENDREP;\nMOV.F R1.xyz, R0;\nMOV.F R0.xyz, R13;\nELSE;\nMUL.F32'
                b' R0.x, R14.w, R15.w;\nMUL.F32 R0.x, R6.w, R0;\nMUL.F32 R0.x, R0, {2, 0, 0, 0};\nMAD.F32 R0.x, R6.w, R6.w, R'
                b'0;\nMAD.F32 R0.x, R14.w, R14.w, R0;\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMIN.F R0.x, R0, {6420, 0, 0, '
                b'0};\nMAX.F R0.y, R0.x, {6361, 0, 0, 0}.x;\nMUL.F32 R0.z, R6.w, R9.w;\nMAD.F32 R0.x, R14.w, R0.w, R0.z;\nMAD.'
                b'F32 R0.z, R0.y, R0.y, {-40462320, 0, 0, 0}.x;\nMAX.F R0.z, R0, {0, 0, 0, 0}.x;\nRSQ.F32 R0.z, R0.z;\nRCP.F3'
                b'2 R0.z, R0.z;\nMOV.U.CC RC.x, R13.w;\nMAD.F32 R0.w, R14, R15, R6;\nMUL.F32 R1.x, R0.y, R0.y;\nMAD.F32 R1.x, '
                b'R0.w, R0.w, -R1;\nDIV.F32 R0.x, R0, R0.y;\nADD.F32 R1.x, R1, {40462320, 0, 0, 0};\nMAD.F32 R12.x, R0.z, {0.'
                b'00111558591, 0.015625, 0, 0}, {0.00111558591, 0.015625, 0, 0}.y;\nIF NE.x;\nMAX.F R1.x, R1, {0, 0, 0, 0};\n'
                b'RSQ.F32 R1.y, R1.x;\nADD.F32 R1.x, R0.y, {-6361, 0, 0, 0};\nRCP.F32 R0.y, R1.y;\nSEQ.F R1.y, R0.z, R1.x;\nTR'
                b'UNC.U.CC HC.x, R1.y;\nADD.F32 R0.y, -R0.w, -R0;\nIF NE.x;\nMOV.F R0.y, {0, 0, 0, 0}.x;\nELSE;\nADD.F32 R0.z, '
                b'-R1.x, R0;\nADD.F32 R0.y, R0, -R1.x;\nDIV.F32 R0.y, R0, R0.z;\nENDIF;\nMAD.F32 R0.y, R0, {0.984375, 0.007812'
                b'5, 0, 0}.x, {0.984375, 0.0078125, 0, 0};\nMAD.F32 R12.y, -R0, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nELSE;\nA'
                b'DD.F32 R1.y, -R0, {6420, 0, 0, 0}.x;\nADD.F32 R1.x, R1, {754079.938, 0, 0, 0};\nMAX.F R1.x, R1, {0, 0, 0, '
                b'0};\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R0.y, R1.x;\nADD.F32 R0.z, -R1.y, R0;\nADD.F32 R0.y, -R0.w, R0;\nADD.F32 R0'
                b'.z, R0, {868.377747, 0, 0, 0}.x;\nADD.F32 R0.y, R0, -R1;\nDIV.F32 R0.y, R0, R0.z;\nMAD.F32 R0.y, R0, {0.984'
                b'375, 0.0078125, 0, 0}.x, {0.984375, 0.0078125, 0, 0};\nMAD.F32 R12.y, R0, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;'
                b'\nENDIF;\nMUL.F32 R0.y, R0.x, R0.x;\nMAD.F32 R0.y, R0, {40462320, 754080, 0, 0}.x, {40462320, 754080, 0, 0}'
                b';\nMAX.F R0.y, R0, {0, 0, 0, 0}.x;\nRSQ.F32 R0.y, R0.y;\nRCP.F32 R0.y, R0.y;\nMAD.F32 R0.x, R0, {-6361, 0, 0'
                b', 0}, R0.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nADD.F32 R0.x, R0, {-59, 0, 0, 0};\nMUL.F32 R0.x, R0, {0.0012355'
                b'1709, 0, 0, 0};\nMAD.F32 R0.y, -R0.x, {0.127240658, 1, 0, 0}.x, {0.127240658, 1, 0, 0};\nADD.F32 R0.z, R0.'
                b'x, {1, 0, 0, 0}.x;\nMAD.F32 R0.x, R9.w, {0.5, 0, 0, 0}, {0.5, 0, 0, 0};\nMUL.F32 R1.x, R0, {7, 0, 0, 0};\nF'
                b'LR.F R1.y, R1.x;\nMAX.F R0.y, R0, {0, 0, 0, 0}.x;\nDIV.F32 R0.y, R0, R0.z;\nMAD.F32 R0.x, R0.y, {0.96875, 0'
                b'.015625, 0, 0}, {0.96875, 0.015625, 0, 0}.y;\nADD.F32 R12.z, R1.y, R0.x;\nADD.F32 R16.x, -R1.y, R1;\nPK64.U'
                b' D0.x, c[6];\nMUL.F32 R0.x, R12.z, {0.125, 0, 0, 0};\nMOV.F R0.z, R12.x;\nMOV.F R0.y, R12;\nTEX.F R0, R0, ha'
                b'ndle(D0.x), 3D;\nMAD.F32 R1, -R16.x, R0, R0;\nMAD.F32 R0.x, R12.z, {0.125, 0, 0, 0}, {0.125, 0, 0, 0};\nMOV'
                b'.F R0.z, R12.x;\nMOV.F R0.y, R12;\nTEX.F R0, R0, handle(D0.x), 3D;\nMAD.F32 R0, R0, R16.x, R1;\nREP.S ;\nSEQ.'
                b'U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nSEQ.F R1.x, R0, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R1;\nIF'
                b' NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.F R14.xyz, {0, 0, 0, 0}.x;\nBRK (NE.x);\nENDIF;\nMUL.F32 R1.xyz, R0'
                b', R0.w;\nDIV.F32 R1.xyz, R1, R0.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMUL.F32 R14.xyz, R1, {0.99999994, 0.42793'
                b'9206, 0.175286993, 0};\nBRK (NE.x);\nENDREP;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x)'
                b';\nMUL.F32 R0.w, R14, R15;\nMUL.F32 R0.w, R6, R0;\nMUL.F32 R0.w, R0, {2, 0, 0, 0}.x;\nMAD.F32 R0.w, R6, R6, '
                b'R0;\nMAD.F32 R0.w, R14, R14, R0;\nRSQ.F32 R0.w, R0.w;\nRCP.F32 R0.w, R0.w;\nMIN.F R0.w, R0, {6420, 0, 0, 0}.'
                b'x;\nMOV.U.CC RC.x, R13.w;\nMAX.F R0.w, R0, {6361, 0, 0, 0}.x;\nMAD.F32 R1.x, R14.w, R15.w, R6.w;\nDIV.F32 R1'
                b'.x, R1, R0.w;\nMIN.F R1.x, R1, {1, 0, 0, 0};\nMAX.F R1.z, R1.x, {-1, 0, 0, 0}.x;\nIF NE.x;\nADD.F32 R1.w, -R'
                b'14, {6420, 0, 0, 0}.x;\nMUL.F32 R1.y, -R15.w, -R15.w;\nMUL.F32 R1.x, R14.w, R14.w;\nMAD.F32 R1.x, R1.y, R1,'
                b' -R1;\nADD.F32 R1.x, R1, {41216400, 0, 0, 0};\nMAX.F R1.y, R1.x, {0, 0, 0, 0}.x;\nMAD.F32 R1.x, R14.w, R14.'
                b'w, {-40462320, 0, 0, 0};\nRSQ.F32 R1.y, R1.y;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R'
                b'12.x, R1.x;\nRCP.F32 R1.y, R1.y;\nMAD.F32 R1.y, -R14.w, -R15.w, R1;\nMAX.F R1.x, R1.y, {0, 0, 0, 0};\nADD.F3'
                b'2 R12.y, -R1.w, R12.x;\nADD.F32 R1.x, R1, -R1.w;\nADD.F32 R1.y, R12, {868.377747, 0, 0, 0}.x;\nDIV.F32 R1.w'
                b', R1.x, R1.y;\nMUL.F32 R1.x, R0.w, R0.w;\nMUL.F32 R1.y, -R1.z, -R1.z;\nMAD.F32 R1.y, R1, R1.x, -R1.x;\nMAD.F'
                b'32 R1.x, R1.w, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nADD.F32 R1.w, R1.y, {4121'
                b'6400, 0, 0, 0}.x;\nMAD.F32 R1.y, R12.x, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0'
                b'};\nPK64.U D0.x, c[4];\nTEX.F R12.xyz, R1, handle(D0.x), 2D;\nMAX.F R1.y, R1.w, {0, 0, 0, 0}.x;\nMAD.F32 R1.'
                b'x, R0.w, R0.w, {-40462320, 0, 0, 0};\nRSQ.F32 R1.y, R1.y;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nRCP.F32 R1.y, R1.'
                b'y;\nMAD.F32 R1.y, -R0.w, -R1.z, R1;\nADD.F32 R1.z, -R0.w, {6420, 0, 0, 0}.x;\nMAX.F R0.w, R1.y, {0, 0, 0, 0'
                b'}.x;\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R1.x, R1.x;\nADD.F32 R1.w, -R1.z, R1.x;\nADD.F32 R0.w, R0, -R1.z;\nADD.F32'
                b' R1.y, R1.w, {868.377747, 0, 0, 0}.x;\nDIV.F32 R0.w, R0, R1.y;\nMAD.F32 R1.y, R1.x, {0.0011335793, 0.00781'
                b'25, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nMAD.F32 R1.x, R0.w, {0.99609375, 0.001953125, 0, 0}, {0.996093'
                b'75, 0.001953125, 0, 0}.y;\nTEX.F R1.xyz, R1, handle(D0.x), 2D;\nRCP.F32 R12.x, R12.x;\nRCP.F32 R12.z, R12.z'
                b';\nRCP.F32 R12.y, R12.y;\nMUL.F32 R1.xyz, R1, R12;\nMIN.F R15.xyz, R1, {1, 0, 0, 0}.x;\nELSE;\nMUL.F32 R1.y, '
                b'R1.z, R1.z;\nMUL.F32 R1.x, R0.w, R0.w;\nMAD.F32 R1.x, R1.y, R1, -R1;\nADD.F32 R1.x, R1, {41216400, 0, 0, 0}'
                b';\nMAX.F R1.y, R1.x, {0, 0, 0, 0}.x;\nMAD.F32 R1.x, R0.w, R0.w, {-40462320, 0, 0, 0};\nRSQ.F32 R1.y, R1.y;\n'
                b'RCP.F32 R1.y, R1.y;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nMAD.F32 R1.z, -R0.w, R1, R1.y;\nRSQ.F32 R1.x, R1.x;\nRCP'
                b'.F32 R1.y, R1.x;\nADD.F32 R1.x, -R0.w, {6420, 0, 0, 0};\nADD.F32 R1.w, -R1.x, R1.y;\nMAX.F R0.w, R1.z, {0, '
                b'0, 0, 0}.x;\nADD.F32 R0.w, R0, -R1.x;\nADD.F32 R1.z, R1.w, {868.377747, 0, 0, 0}.x;\nDIV.F32 R1.z, R0.w, R1'
                b'.z;\nMUL.F32 R1.x, R15.w, R15.w;\nMUL.F32 R0.w, R14, R14;\nMAD.F32 R0.w, R1.x, R0, -R0;\nMAD.F32 R1.x, R1.z,'
                b' {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nADD.F32 R0.w, R0, {41216400, 0, 0, 0}.x'
                b';\nMAD.F32 R1.y, R1, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, c[4'
                b'];\nTEX.F R12.xyz, R1, handle(D0.x), 2D;\nMAX.F R1.x, R0.w, {0, 0, 0, 0};\nMAD.F32 R0.w, R14, R14, {-404623'
                b'20, 0, 0, 0}.x;\nRSQ.F32 R1.x, R1.x;\nMAX.F R0.w, R0, {0, 0, 0, 0}.x;\nRCP.F32 R1.x, R1.x;\nRSQ.F32 R0.w, R0'
                b'.w;\nMAD.F32 R1.x, -R14.w, R15.w, R1;\nADD.F32 R1.y, -R14.w, {6420, 0, 0, 0}.x;\nRCP.F32 R0.w, R0.w;\nADD.F3'
                b'2 R1.z, -R1.y, R0.w;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nADD.F32 R1.x, R1, -R1.y;\nADD.F32 R1.z, R1, {868.37774'
                b'7, 0, 0, 0}.x;\nDIV.F32 R1.x, R1, R1.z;\nMAD.F32 R1.y, R0.w, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335'
                b'793, 0.0078125, 0, 0};\nMAD.F32 R1.x, R1, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;'
                b'\nTEX.F R1.xyz, R1, handle(D0.x), 2D;\nRCP.F32 R12.x, R12.x;\nRCP.F32 R12.z, R12.z;\nRCP.F32 R12.y, R12.y;\nM'
                b'UL.F32 R1.xyz, R1, R12;\nMIN.F R15.xyz, R1, {1, 0, 0, 0}.x;\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x'
                b');\nENDREP;\nMUL.F32 R1.xyz, R0, R15;\nMUL.F32 R0.xyz, R15, R14;\nENDIF;\nMAD.F32 R0.w, -R9, {1.60000002, 1.6'
                b'400001, 0, 0}.x, {1.60000002, 1.6400001, 0, 0}.y;\nMUL.F32 R1.w, R9, R9;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nPOW'
                b'.F32 R0.w, R0.w, {1.5, 0, 0, 0}.x;\nMAD.F32 R9.w, R1, {0.0162772071, 0, 0, 0}.x, {0.0162772071, 0, 0, 0}.'
                b'x;\nDIV.F32 R0.w, R9, R0.w;\nMUL.F32 R0.xyz, R0, R0.w;\nMAD.F32 R0.w, R1, {0.0596831031, 0, 0, 0}.x, {0.059'
                b'6831031, 0, 0, 0}.x;\nMAD.F32 R12.xyz, R1, R0.w, R0;\nBRK (NE.x);\nENDREP;\nMUL.F32 R1.xyz, R12, c[7];\nSLT.F'
                b'32 R0.w, c[1].y, R11;\nSNE.U R1.w, c[3].x, {0, 0, 0, 0}.x;\nMOV.F R0.xyz, R1;\nMOV.F R12.xyz, R1;\nMUL.F32 R'
                b'1.xyz, c[8], c[2].x;\nTRUNC.U R0.w, R0;\nSEQ.U R1.w, -R1, {0, 0, 0, 0}.x;\nAND.U.CC HC.x, -R1.w, R0.w;\nMOV.'
                b'F R13.xyz, {0, 0, 0, 0}.x;\nMUL.F32 R1.xyz, R1, {3398.37939, 4266.18799, 4408.16406, 0};\nIF NE.x;\nMUL.F32'
                b' R9.xyz, R11, R1;\nADD.F32 R0.w, -c[1].y, {1, 0, 0, 0}.x;\nADD.F32 R1.w, R11, -c[1].y;\nDIV.F32.SAT R0.w, R'
                b'1, R0.w;\nMUL.F32 R0.w, R0, R0;\nLDC.F32X4 R1.xyz, buf3[96];\nMUL.F32 R9.xyz, R9, R0.w;\nMUL.F32 R13.xyz, R9'
                b', R1;\nMAD.F32 R12.xyz, R13, {0.899999976, 0, 0, 0}.x, R0;\nENDIF;\nMUL.F32 R11.xyz, c[0], {10, 0, 0, 0}.x;'
                b'\nADD.F32 R0.w, -R11.y, c[14].x;\nADD.F32 R0.x, -R12.w, c[14];\nSLT.F32 R0.y, -R12.w, -c[14].x;\nSLT.F32 R0.'
                b'x, -c[15], R0;\nTRUNC.U R0.y, R0;\nTRUNC.U R0.x, R0;\nAND.U.CC HC.x, R0, R0.y;\nMOV.F R9, {0, 0, 0, 0}.x;\nAD'
                b'D.F32 R1.x, R0.w, c[15];\nMOV.U R13.w, {0, 0, 0, 0}.x;\nMOV.U R1.w, {1, 0, 0, 0}.x;\nIF NE.x;\nMOV.F R14.xyz'
                b', {0, 0, 0, 0}.x;\nMOV.F R11.w, {0, 0, 0, 0}.x;\nELSE;\nSLT.F32 R11.w, c[14].x, R12;\nTRUNC.U.CC HC.x, R11.w'
                b';\nMOV.F R0.xz, {0, 0, 0, 0}.x;\nMOV.F R0.y, R12.w;\nADD.F32 R0.xyz, R0, -R11;\nDP3.F32 R1.y, R0, R5;\nDP3.F3'
                b'2 R1.z, R0, R0;\nMAD.F32 R1.y, R1, R1, -R1.z;\nIF NE.x;\nSLT.F32 R1.z, R5.y, {0, 0, 0, 0}.x;\nTRUNC.U.CC HC.'
                b'x, R1.z;\nIF NE.x;\nMAD.F32 R1.x, R1, R1, R1.y;\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R1.x, R1.x;\nMOV.F R1.y, -R1.x;'
                b'\nMOV.U R13.w, {1, 0, 0, 0}.x;\nELSE;\nMOV.U R1.w, {0, 0, 0, 0}.x;\nENDIF;\nELSE;\nMAD.F32 R1.x, R0.w, R0.'
                b'w, R1.y;\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R1.y, R1.x;\nENDIF;\nDP3.F32 R0.x, R5, R0;\nADD.F32 R11.w, -R0.x, R1.y'
                b';\nMUL.F32 R14.xyz, R11.w, R5;\nENDIF;\nADD.F32 R14.y, R14, R12.w;\nDP3.F32 R0.x, R14, R14;\nRSQ.F32 R0.x, R0'
                b'.x;\nMOV.U.CC RC.x, R1.w;\nMUL.F32 R0.xyz, R0.x, R14;\nLDC.F32X4 R1.xyz, buf3[80];\nDP3.F32 R0.x, R0, R1;\nMU'
                b'L.F32 R0.x, R0, {0.5, 0, 0, 0};\nADD.F32.SAT R0.x, R0, {0.5, 0, 0, 0};\nMAX.F R0.z, R0.x, {0.200000003, 0,'
                b' 0, 0}.x;\nIF NE.x;\nMOV.U.CC RC.x, R13.w;\nIF NE.x;\nMOV.F R0.x, {1, 0, 0, 0};\nELSE;\nMOV.F R0.x, {0.009'
                b'99999978, 0, 0, 0};\nENDIF;\nMUL.F32 R10.x, R11.w, R0;\nLDC.F32 R0.x, buf1[400];\nMAX.F R0.x, R0, R10;\nLDC.F'
                b'32X4 R1.xyz, buf1[384];\nMUL.F32 R10.xyz, R1, {0.100000001, 0, 0, 0}.x;\nMUL.F32 R1.xyz, R5, R0.x;\nMAD.F32'
                b' R1.xyz, R1, {0.100000001, 0, 0, 0}.x, R10;\nADD.F32 R16.xyz, R1, -c[0];\nADD.F32 R17.xyz, R10, -c[0];\nLDC'
                b'.F32X4 R1.xyz, buf3[80];\nDP3.F32 R12.w, R16, R16;\nRSQ.F32 R12.w, R12.w;\nMUL.F32 R15.x, R12.w, {6361, 0, '
                b'0, 0};\nDP3.F32 R0.x, R1, R16;\nMUL.F32 R13.w, R12, R0.x;\nRCP.F32 R14.w, R12.w;\nMAD.F32 R15.y, -R15.x, R15'
                b'.x, {1, 0, 0, 0}.x;\nMAX.F R15.y, R15, {0, 0, 0, 0}.x;\nDP3.F32 R10.x, R17, R17;\nDIV.F32 R12.w, R14, R12.w'
                b';\nMUL.F32 R0.x, R13.w, R13.w;\nMAD.F32 R0.x, R0, R12.w, -R12.w;\nADD.F32 R12.w, R0.x, {41216400, 0, 0, 0}.'
                b'x;\nRSQ.F32 R15.y, R15.y;\nRCP.F32 R0.x, R15.y;\nMUL.F32 R15.y, -R15.x, {0.0117499996, 0, 0, 0}.x;\nADD.F32 '
                b'R0.x, R13.w, R0;\nMAX.F R12.w, R12, {0, 0, 0, 0}.x;\nRSQ.F32 R12.w, R12.w;\nRCP.F32 R12.w, R12.w;\nMAD.F32 R'
                b'12.w, R13, -R14, R12;\nMAD.F32 R15.y, R15.x, {0.0117499996, 0, 0, 0}.x, -R15;\nMAD.F32 R0.x, R15, {0.01174'
                b'99996, 0, 0, 0}, R0;\nMAD.F32 R15.x, R14.w, R14.w, {-40462320, 0, 0, 0};\nMAX.F R15.x, R15, {0, 0, 0, 0};\n'
                b'DIV.F32.SAT R0.x, R0, R15.y;\nRSQ.F32 R15.x, R15.x;\nRCP.F32 R15.y, R15.x;\nADD.F32 R15.x, -R14.w, {6420, 0'
                b', 0, 0};\nADD.F32 R15.z, -R15.x, R15.y;\nMAX.F R12.w, R12, {0, 0, 0, 0}.x;\nADD.F32 R12.w, R12, -R15.x;\nMAD'
                b'.F32 R15.x, -R0, {2, 3, 0, 0}, {2, 3, 0, 0}.y;\nADD.F32 R15.z, R15, {868.377747, 0, 0, 0}.x;\nMUL.F32 R0.x'
                b', R0, R0;\nDIV.F32 R12.w, R12, R15.z;\nMUL.F32 R0.x, R0, R15;\nMAD.F32 R15.x, R12.w, {0.99609375, 0.0019531'
                b'25, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nDP3.F32 R12.w, R1, R1;\nRSQ.F32 R10.x, R10.x;\nMAD.F32 R15.y'
                b', R15, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, c[4];\nTEX.F R1.x'
                b'yz, R15, handle(D0.x), 2D;\nMUL.F32 R1.xyz, R1, R0.x;\nMAX.F R12.w, R12, {0, 0, 0, 0}.x;\nMUL.F32 R1.xyz, R'
                b'1, R12.w;\nMUL.F32 R1.xyz, R1, c[8];\nMUL.F32 R15.xyz, R1, {1.47399998, 1.85039997, 1.91198003, 0};\nADD.F3'
                b'2 R1.xyz, R16, -R17;\nDP3.F32 R0.x, R1, R1;\nRSQ.F32 R0.x, R0.x;\nMUL.F32 R18.xyz, R0.x, R1;\nRCP.F32 R12.w,'
                b' R10.x;\nADD.F32 R1.y, R14.w, {-6361, 0, 0, 0}.x;\nDIV.F32 R1.x, R12.w, R10.x;\nDP3.F32 R0.x, R17, R18;\nMAD'
                b'.F32 R10.x, R0, R0, -R1;\nMAD.F32 R1.x, R13.w, {0.5, 0, 0, 0}, {0.5, 0, 0, 0};\nADD.F32 R10.x, R10, {41216'
                b'400, 0, 0, 0};\nRSQ.F32 R10.x, R10.x;\nRCP.F32 R14.w, R10.x;\nMAD.F32 R1.x, R1, {0.984375, 0.0078125, 0, 0}'
                b', {0.984375, 0.0078125, 0, 0}.y;\nMAD.F32 R1.y, R1, {0.0158898309, 0.03125, 0, 0}.x, {0.0158898309, 0.03125, '
                b'0, 0};\nPK64.U D0.x, c[5];\nTEX.F R1.xyz, R1, handle(D0.x), 2D;\nMAD.F32 R1.xyz, R1, R13.w, R1;\nMUL.F32 R1.'
                b'xyz, R1, c[7];\nMUL.F32 R10.xyz, R1, {0.5, 0, 0, 0}.x;\nADD.F32 R13.w, -R0.x, -R14;\nSGT.F32 R14.w, -R0.x, '
                b'R14;\nTRUNC.U.CC HC.x, R14.w;\nMOV.F R1.xyz, R17;\nIF NE.x;\nMAD.F32 R17.xyz, R18, R13.w, R1;\nADD.F32 R0.x, '
                b'R13.w, R0;\nMOV.F R12.w, {6420, 0, 0, 0}.x;\nENDIF;\nLDC.F32X4 R1.xyz, buf3[80];\nADD.F32 R16.xyz, -R17, R16'
                b';\nDP3.F32 R13.w, R17, R1;\nDP3.F32 R15.w, R16, R16;\nDIV.F32 R14.w, R13, R12.w;\nRSQ.F32 R13.w, R15.w;\nRCP.'
                b'F32 R16.x, R13.w;\nDP3.F32 R15.w, R1, R18;\nDIV.F32 R13.w, R0.x, R12.w;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0'
                b'}, {0, 0, 0, 0};\nBRK (NE.x);\nSLT.F32 R0.x, R13.w, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMUL.F32 R0'
                b'.x, R12.w, R12.w;\nMUL.F32 R1.x, R13.w, R13.w;\nMAD.F32 R0.x, R1, R0, -R0;\nADD.F32 R0.x, R0, {40462320, 0,'
                b' 0, 0};\nSLE.F32 R0.x, {0, 0, 0, 0}, R0;\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.U'
                b' R8.w, {1, 0, 0, 0}.x;\nBRK (NE.x);\nENDIF;\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.U R8.w, {0, 0, 0, 0}.x'
                b';\nBRK (NE.x);\nENDREP;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nMUL.F32 R0.x, R'
                b'12.w, R13.w;\nMUL.F32 R0.x, R16, R0;\nMUL.F32 R0.x, R0, {2, 0, 0, 0};\nMAD.F32 R0.x, R16, R16, R0;\nMAD.F32 '
                b'R0.x, R12.w, R12.w, R0;\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMIN.F R0.x, R0, {6420, 0, 0, 0};\nMOV.U.C'
                b'C RC.x, R8.w;\nMAX.F R0.x, R0, {6361, 0, 0, 0};\nMAD.F32 R1.x, R12.w, R13.w, R16;\nDIV.F32 R1.x, R1, R0.x;\n'
                b'MIN.F R1.x, R1, {1, 0, 0, 0};\nMAX.F R1.z, R1.x, {-1, 0, 0, 0}.x;\nIF NE.x;\nADD.F32 R8.y, -R12.w, {6420, 0'
                b', 0, 0}.x;\nMUL.F32 R1.y, -R13.w, -R13.w;\nMUL.F32 R1.x, R12.w, R12.w;\nMAD.F32 R1.x, R1.y, R1, -R1;\nADD.F3'
                b'2 R1.x, R1, {41216400, 0, 0, 0};\nMAX.F R1.y, R1.x, {0, 0, 0, 0}.x;\nMAD.F32 R1.x, R12.w, R12.w, {-4046232'
                b'0, 0, 0, 0};\nRSQ.F32 R1.y, R1.y;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R8.x, R1.x;\nR'
                b'CP.F32 R1.y, R1.y;\nMAD.F32 R1.y, -R12.w, -R13.w, R1;\nMAX.F R1.x, R1.y, {0, 0, 0, 0};\nADD.F32 R8.z, -R8.y'
                b', R8.x;\nADD.F32 R1.x, R1, -R8.y;\nADD.F32 R1.y, R8.z, {868.377747, 0, 0, 0}.x;\nDIV.F32 R8.y, R1.x, R1.y;\n'
                b'MUL.F32 R1.x, R0, R0;\nMUL.F32 R1.y, -R1.z, -R1.z;\nMAD.F32 R1.y, R1, R1.x, -R1.x;\nADD.F32 R16.y, R1, {412'
                b'16400, 0, 0, 0}.x;\nMAD.F32 R1.x, R8.y, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.'
                b'y;\nMAD.F32 R1.y, R8.x, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, '
                b'c[4];\nTEX.F R8.xyz, R1, handle(D0.x), 2D;\nMAX.F R1.y, R16, {0, 0, 0, 0}.x;\nMAD.F32 R1.x, R0, R0, {-40462'
                b'320, 0, 0, 0};\nRSQ.F32 R1.y, R1.y;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nRCP.F32 R1.y, R1.y;\nMAD.F32 R1.y, -R0.x'
                b', -R1.z, R1;\nADD.F32 R1.z, -R0.x, {6420, 0, 0, 0}.x;\nMAX.F R0.x, R1.y, {0, 0, 0, 0};\nRSQ.F32 R1.x, R1.x;'
                b'\nRCP.F32 R1.x, R1.x;\nADD.F32 R16.y, -R1.z, R1.x;\nADD.F32 R0.x, R0, -R1.z;\nADD.F32 R1.y, R16, {868.377747'
                b', 0, 0, 0}.x;\nDIV.F32 R0.x, R0, R1.y;\nMAD.F32 R1.y, R1.x, {0.0011335793, 0.0078125, 0, 0}.x, {0.00113357'
                b'93, 0.0078125, 0, 0};\nMAD.F32 R1.x, R0, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}'
                b'.y;\nRCP.F32 R8.x, R8.x;\nRCP.F32 R8.z, R8.z;\nRCP.F32 R8.y, R8.y;\nTEX.F R1.xyz, R1, handle(D0.x), 2D;\nMUL.'
                b'F32 R1.xyz, R1, R8;\nMIN.F R8.xyz, R1, {1, 0, 0, 0}.x;\nELSE;\nMUL.F32 R1.y, R1.z, R1.z;\nMUL.F32 R1.x, R0, '
                b'R0;\nMAD.F32 R1.x, R1.y, R1, -R1;\nADD.F32 R1.x, R1, {41216400, 0, 0, 0};\nMAX.F R1.y, R1.x, {0, 0, 0, 0}.x'
                b';\nMAD.F32 R1.x, R0, R0, {-40462320, 0, 0, 0};\nRSQ.F32 R1.y, R1.y;\nRCP.F32 R1.y, R1.y;\nMAX.F R1.x, R1, {0'
                b', 0, 0, 0};\nMAD.F32 R1.z, -R0.x, R1, R1.y;\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R1.y, R1.x;\nADD.F32 R1.x, -R0, {6'
                b'420, 0, 0, 0};\nADD.F32 R8.x, -R1, R1.y;\nMAX.F R0.x, R1.z, {0, 0, 0, 0};\nADD.F32 R0.x, R0, -R1;\nADD.F32 R'
                b'1.z, R8.x, {868.377747, 0, 0, 0}.x;\nDIV.F32 R1.z, R0.x, R1.z;\nMUL.F32 R1.x, R13.w, R13.w;\nMUL.F32 R0.x, '
                b'R12.w, R12.w;\nMAD.F32 R0.x, R1, R0, -R0;\nMAD.F32 R1.x, R1.z, {0.99609375, 0.001953125, 0, 0}, {0.9960937'
                b'5, 0.001953125, 0, 0}.y;\nADD.F32 R0.x, R0, {41216400, 0, 0, 0};\nMAD.F32 R1.y, R1, {0.0011335793, 0.00781'
                b'25, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, c[4];\nTEX.F R8.xyz, R1, handle(D0.x), 2D;\nMAX'
                b'.F R1.x, R0, {0, 0, 0, 0};\nMAD.F32 R0.x, R12.w, R12.w, {-40462320, 0, 0, 0};\nRSQ.F32 R1.x, R1.x;\nMAX.F R'
                b'0.x, R0, {0, 0, 0, 0};\nRCP.F32 R1.x, R1.x;\nRSQ.F32 R0.x, R0.x;\nMAD.F32 R1.x, -R12.w, R13.w, R1;\nADD.F32 '
                b'R1.y, -R12.w, {6420, 0, 0, 0}.x;\nRCP.F32 R0.x, R0.x;\nADD.F32 R1.z, -R1.y, R0.x;\nMAX.F R1.x, R1, {0, 0, 0'
                b', 0};\nADD.F32 R1.x, R1, -R1.y;\nADD.F32 R1.z, R1, {868.377747, 0, 0, 0}.x;\nDIV.F32 R1.x, R1, R1.z;\nRCP.F3'
                b'2 R8.x, R8.x;\nRCP.F32 R8.z, R8.z;\nRCP.F32 R8.y, R8.y;\nMAD.F32 R1.y, R0.x, {0.0011335793, 0.0078125, 0, 0'
                b'}.x, {0.0011335793, 0.0078125, 0, 0};\nMAD.F32 R1.x, R1, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.0019'
                b'53125, 0, 0}.y;\nTEX.F R1.xyz, R1, handle(D0.x), 2D;\nMUL.F32 R1.xyz, R1, R8;\nMIN.F R8.xyz, R1, {1, 0, 0, '
                b'0}.x;\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDREP;\nMAD.F32 R1.x, R12.w, R12.w, {-40462320, 0,'
                b' 0, 0};\nMAX.F R1.x, R1, {0, 0, 0, 0};\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R1.x, R1.x;\nMOV.U.CC RC.x, R8.w;\nMUL.F'
                b'32 R0.x, R12.w, R13.w;\nMUL.F32 R1.y, R12.w, R12.w;\nMAD.F32 R1.y, R0.x, R0.x, -R1;\nADD.F32 R1.y, R1, {404'
                b'62320, 0, 0, 0}.x;\nMAD.F32 R16.y, R1.x, {0.00111558591, 0.015625, 0, 0}.x, {0.00111558591, 0.015625, 0, '
                b'0};\nIF NE.x;\nMAX.F R1.y, R1, {0, 0, 0, 0}.x;\nRSQ.F32 R1.z, R1.y;\nADD.F32 R1.y, R12.w, {-6361, 0, 0, 0}.x'
                b';\nRCP.F32 R1.z, R1.z;\nSEQ.F R16.z, R1.x, R1.y;\nTRUNC.U.CC HC.x, R16.z;\nADD.F32 R0.x, -R0, -R1.z;\nIF NE.x'
                b';\nMOV.F R0.x, {0, 0, 0, 0};\nELSE;\nADD.F32 R1.x, -R1.y, R1;\nADD.F32 R0.x, R0, -R1.y;\nDIV.F32 R0.x, R0, R1'
                b'.x;\nENDIF;\nMAD.F32 R0.x, R0, {0.984375, 0.0078125, 0, 0}, {0.984375, 0.0078125, 0, 0}.y;\nMAD.F32 R16.z, '
                b'-R0.x, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nELSE;\nADD.F32 R1.z, -R12.w, {6420, 0, 0, 0}.x;\nADD.F32 R1.y, '
                b'R1, {754079.938, 0, 0, 0}.x;\nMAX.F R1.y, R1, {0, 0, 0, 0}.x;\nRSQ.F32 R1.y, R1.y;\nRCP.F32 R1.y, R1.y;\nADD'
                b'.F32 R1.x, -R1.z, R1;\nADD.F32 R0.x, -R0, R1.y;\nADD.F32 R1.x, R1, {868.377747, 0, 0, 0};\nADD.F32 R0.x, R0'
                b', -R1.z;\nDIV.F32 R0.x, R0, R1.x;\nMAD.F32 R0.x, R0, {0.984375, 0.0078125, 0, 0}, {0.984375, 0.0078125, 0,'
                b' 0}.y;\nMAD.F32 R16.z, R0.x, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nENDIF;\nMUL.F32 R0.x, R14.w, R14.w;\nMAD.F'
                b'32 R0.x, R0, {40462320, 754080, 0, 0}, {40462320, 754080, 0, 0}.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32'
                b' R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMAD.F32 R0.x, R14.w, {-6361, 0, 0, 0}, R0;\nMAX.F R0.x, R0, {0, 0, 0, 0}'
                b';\nADD.F32 R0.x, R0, {-59, 0, 0, 0};\nMUL.F32 R0.x, R0, {0.00123551709, 0, 0, 0};\nMAD.F32 R1.x, -R0, {0.12'
                b'7240658, 1, 0, 0}, {0.127240658, 1, 0, 0}.y;\nADD.F32 R1.y, R0.x, {1, 0, 0, 0}.x;\nMAD.F32 R0.x, R15.w, {0'
                b'.5, 0, 0, 0}, {0.5, 0, 0, 0};\nMUL.F32 R16.w, R0.x, {7, 0, 0, 0}.x;\nFLR.F R17.x, R16.w;\nMAX.F R1.x, R1, {'
                b'0, 0, 0, 0};\nDIV.F32 R1.x, R1, R1.y;\nMAD.F32 R0.x, R1, {0.96875, 0.015625, 0, 0}, {0.96875, 0.015625, 0,'
                b' 0}.y;\nADD.F32 R17.y, R17.x, R0.x;\nMOV.F R1.z, R16.y;\nADD.F32 R16.w, -R17.x, R16;\nMUL.F32 R1.x, R17.y, {'
                b'0.125, 0, 0, 0};\nPK64.U D0.x, c[6];\nMOV.F R1.y, R16.z;\nTEX.F R0.x, R1, handle(D0.x), 3D;\nMAD.F32 R17.x, '
                b'-R16.w, R0, R0;\nMOV.F R1.z, R16.y;\nMAD.F32 R1.x, R17.y, {0.125, 0, 0, 0}, {0.125, 0, 0, 0};\nMOV.F R1.y, '
                b'R16.z;\nTEX.F R0.x, R1, handle(D0.x), 3D;\nMAD.F32 R16.y, R0.x, R16.w, R17.x;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0'
                b', 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nSEQ.F R0.x, R16.y, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMOV.U.'
                b'CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDREP;\nADD.F32 R'
                b'0.x, R16, -R6.w;\nMOV.U.CC RC.x, R8.w;\nMAX.F R16.x, R0, {0, 0, 0, 0};\nMUL.F32 R1.x, R12.w, R13.w;\nMUL.F32'
                b' R0.x, R16, R1;\nMUL.F32 R0.x, R0, {2, 0, 0, 0};\nMAD.F32 R0.x, R16, R16, R0;\nMAD.F32 R0.x, R12.w, R12.w, '
                b'R0;\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMIN.F R0.x, R0, {6420, 0, 0, 0};\nMAX.F R1.x, R0, {6361, 0, 0'
                b', 0};\nMUL.F32 R0.x, R16, R15.w;\nMAD.F32 R0.x, R12.w, R14.w, R0;\nMAD.F32 R1.y, R1.x, R1.x, {-40462320, 0,'
                b' 0, 0}.x;\nMAX.F R1.y, R1, {0, 0, 0, 0}.x;\nRSQ.F32 R1.z, R1.y;\nMUL.F32 R14.w, R1.x, R1.x;\nMAD.F32 R1.y, R'
                b'12.w, R13.w, R16.x;\nMAD.F32 R14.w, R1.y, R1.y, -R14;\nRCP.F32 R1.z, R1.z;\nADD.F32 R16.z, R14.w, {40462320'
                b', 0, 0, 0}.x;\nDIV.F32 R0.x, R0, R1.x;\nMAD.F32 R14.w, R1.z, {0.00111558591, 0.015625, 0, 0}.x, {0.0011155'
                b'8591, 0.015625, 0, 0}.y;\nIF NE.x;\nMAX.F R16.z, R16, {0, 0, 0, 0}.x;\nRSQ.F32 R16.w, R16.z;\nADD.F32 R16.z,'
                b' R1.x, {-6361, 0, 0, 0}.x;\nRCP.F32 R1.x, R16.w;\nSEQ.F R16.w, R1.z, R16.z;\nTRUNC.U.CC HC.x, R16.w;\nADD.F3'
                b'2 R1.x, -R1.y, -R1;\nIF NE.x;\nMOV.F R1.x, {0, 0, 0, 0};\nELSE;\nADD.F32 R1.y, -R16.z, R1.z;\nADD.F32 R1.x, R'
                b'1, -R16.z;\nDIV.F32 R1.x, R1, R1.y;\nENDIF;\nMAD.F32 R1.x, R1, {0.984375, 0.0078125, 0, 0}, {0.984375, 0.00'
                b'78125, 0, 0}.y;\nMAD.F32 R16.z, -R1.x, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nELSE;\nADD.F32 R16.w, -R1.x, {6'
                b'420, 0, 0, 0}.x;\nADD.F32 R16.z, R16, {754079.938, 0, 0, 0}.x;\nMAX.F R16.z, R16, {0, 0, 0, 0}.x;\nRSQ.F32 '
                b'R16.z, R16.z;\nRCP.F32 R1.x, R16.z;\nADD.F32 R1.x, -R1.y, R1;\nADD.F32 R1.z, -R16.w, R1;\nADD.F32 R1.y, R1.z'
                b', {868.377747, 0, 0, 0}.x;\nADD.F32 R1.x, R1, -R16.w;\nDIV.F32 R1.x, R1, R1.y;\nMAD.F32 R1.x, R1, {0.984375'
                b', 0.0078125, 0, 0}, {0.984375, 0.0078125, 0, 0}.y;\nMAD.F32 R16.z, R1.x, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}'
                b'.x;\nENDIF;\nMUL.F32 R1.x, R0, R0;\nMAD.F32 R1.x, R1, {40462320, 754080, 0, 0}, {40462320, 754080, 0, 0}.y;'
                b'\nMAX.F R1.x, R1, {0, 0, 0, 0};\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R1.x, R1.x;\nMAD.F32 R0.x, R0, {-6361, 0, 0, 0'
                b'}, R1;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nADD.F32 R0.x, R0, {-59, 0, 0, 0};\nMUL.F32 R0.x, R0, {0.00123551709,'
                b' 0, 0, 0};\nMAD.F32 R1.x, -R0, {0.127240658, 1, 0, 0}, {0.127240658, 1, 0, 0}.y;\nADD.F32 R1.y, R0.x, {1, '
                b'0, 0, 0}.x;\nMAD.F32 R0.x, R15.w, {0.5, 0, 0, 0}, {0.5, 0, 0, 0};\nMUL.F32 R15.w, R0.x, {7, 0, 0, 0}.x;\nFL'
                b'R.F R16.w, R15;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nDIV.F32 R1.x, R1, R1.y;\nMAD.F32 R0.x, R1, {0.96875, 0.0156'
                b'25, 0, 0}, {0.96875, 0.015625, 0, 0}.y;\nADD.F32 R17.x, R16.w, R0;\nADD.F32 R15.w, -R16, R15;\nMUL.F32 R1.x'
                b', R17, {0.125, 0, 0, 0};\nPK64.U D0.x, c[6];\nMOV.F R1.z, R14.w;\nMOV.F R1.y, R16.z;\nTEX.F R0.x, R1, handle'
                b'(D0.x), 3D;\nMAD.F32 R16.w, -R15, R0.x, R0.x;\nMOV.F R1.z, R14.w;\nMAD.F32 R1.x, R17, {0.125, 0, 0, 0}, {0.'
                b'125, 0, 0, 0};\nMOV.F R1.y, R16.z;\nTEX.F R0.x, R1, handle(D0.x), 3D;\nMAD.F32 R1.z, R0.x, R15.w, R16.w;\nRE'
                b'P.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nSEQ.F R0.x, R1.z, {0, 0, 0, 0};\nTRUNC.U.CC '
                b'HC.x, R0;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK '
                b'(NE.x);\nENDREP;\nSGT.F32 R1.x, R6.w, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R1;\nMOV.F R0.x, R8;\nIF NE.x;\nREP.'
                b'S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nMUL.F32 R0.x, R12.w, R13.w;\nMUL.F32 R0.x, R16'
                b', R0;\nMUL.F32 R0.x, R0, {2, 0, 0, 0};\nMAD.F32 R0.x, R16, R16, R0;\nMAD.F32 R0.x, R12.w, R12.w, R0;\nRSQ.F3'
                b'2 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMIN.F R0.x, R0, {6420, 0, 0, 0};\nMAX.F R10.w, R0.x, {6361, 0, 0, 0}.x;'
                b'\nMAD.F32 R0.x, R12.w, R13.w, R16;\nDIV.F32 R0.x, R0, R10.w;\nMIN.F R0.x, R0, {1, 0, 0, 0};\nMOV.U.CC RC.x, '
                b'R8.w;\nMAX.F R14.w, R0.x, {-1, 0, 0, 0}.x;\nIF NE.x;\nADD.F32 R15.w, -R12, {6420, 0, 0, 0}.x;\nMUL.F32 R1.x,'
                b' -R13.w, -R13.w;\nMUL.F32 R0.x, R12.w, R12.w;\nMAD.F32 R0.x, R1, R0, -R0;\nADD.F32 R0.x, R0, {41216400, 0, '
                b'0, 0};\nMAX.F R1.x, R0, {0, 0, 0, 0};\nMAD.F32 R0.x, R12.w, R12.w, {-40462320, 0, 0, 0};\nRSQ.F32 R1.x, R1.'
                b'x;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R1.y, R0.x;\nADD.F32 R16.z, -R15.w, R1.y;\nRC'
                b'P.F32 R1.x, R1.x;\nMAD.F32 R1.x, -R12.w, -R13.w, R1;\nMAX.F R0.x, R1, {0, 0, 0, 0};\nADD.F32 R0.x, R0, -R15'
                b'.w;\nADD.F32 R1.x, R16.z, {868.377747, 0, 0, 0};\nDIV.F32 R15.w, R0.x, R1.x;\nMUL.F32 R1.x, -R14.w, -R14.w;'
                b'\nMUL.F32 R0.x, R10.w, R10.w;\nMAD.F32 R0.x, R1, R0, -R0;\nMAD.F32 R1.x, R15.w, {0.99609375, 0.001953125, 0'
                b', 0}, {0.99609375, 0.001953125, 0, 0}.y;\nADD.F32 R15.w, R0.x, {41216400, 0, 0, 0}.x;\nMAD.F32 R1.y, R1, {'
                b'0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, c[4];\nTEX.F R0.x, R1, ha'
                b'ndle(D0.x), 2D;\nMAD.F32 R1.x, R10.w, R10.w, {-40462320, 0, 0, 0};\nMAX.F R1.y, R15.w, {0, 0, 0, 0}.x;\nRSQ'
                b'.F32 R1.y, R1.y;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nRCP.F32 R1.y, R1.y;\nMAD.F32 R1.y, -R10.w, -R14.w, R1;\nRSQ'
                b'.F32 R1.x, R1.x;\nRCP.F32 R1.x, R1.x;\nADD.F32 R10.w, -R10, {6420, 0, 0, 0}.x;\nADD.F32 R14.w, -R10, R1.x;\n'
                b'MAX.F R1.y, R1, {0, 0, 0, 0}.x;\nADD.F32 R1.y, R1, -R10.w;\nADD.F32 R14.w, R14, {868.377747, 0, 0, 0}.x;\nD'
                b'IV.F32 R10.w, R1.y, R14.w;\nMAD.F32 R1.y, R1.x, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, '
                b'0, 0};\nMAD.F32 R1.x, R10.w, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nTEX.F R1'
                b'.x, R1, handle(D0.x), 2D;\nDIV.F32 R0.x, R1, R0.x;\nMIN.F R10.w, R0.x, {1, 0, 0, 0}.x;\nELSE;\nMUL.F32 R1.x,'
                b' R14.w, R14.w;\nMUL.F32 R0.x, R10.w, R10.w;\nMAD.F32 R0.x, R1, R0, -R0;\nADD.F32 R0.x, R0, {41216400, 0, 0,'
                b' 0};\nMAX.F R1.x, R0, {0, 0, 0, 0};\nMAD.F32 R0.x, R10.w, R10.w, {-40462320, 0, 0, 0};\nRSQ.F32 R1.x, R1.x;'
                b'\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R1.x, R1.x;\nMAD.F32 R1.x, -R10.w, R14.w, R1;\n'
                b'RCP.F32 R1.y, R0.x;\nADD.F32 R10.w, -R10, {6420, 0, 0, 0}.x;\nADD.F32 R14.w, -R10, R1.y;\nMAX.F R0.x, R1, {'
                b'0, 0, 0, 0};\nADD.F32 R0.x, R0, -R10.w;\nADD.F32 R1.x, R14.w, {868.377747, 0, 0, 0};\nDIV.F32 R10.w, R0.x, '
                b'R1.x;\nMUL.F32 R1.x, R13.w, R13.w;\nMUL.F32 R0.x, R12.w, R12.w;\nMAD.F32 R0.x, R1, R0, -R0;\nMAD.F32 R1.x, R'
                b'10.w, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nADD.F32 R10.w, R0.x, {41216400, 0,'
                b' 0, 0}.x;\nMAD.F32 R1.y, R1, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D'
                b'0.x, c[4];\nTEX.F R0.x, R1, handle(D0.x), 2D;\nMAX.F R1.y, R10.w, {0, 0, 0, 0}.x;\nMAD.F32 R1.x, R12.w, R12'
                b'.w, {-40462320, 0, 0, 0};\nRSQ.F32 R1.y, R1.y;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nRCP.F32 R1.y, R1.y;\nRSQ.F32 '
                b'R1.x, R1.x;\nMAD.F32 R1.y, -R12.w, R13.w, R1;\nRCP.F32 R1.x, R1.x;\nADD.F32 R10.w, -R12, {6420, 0, 0, 0}.x;'
                b'\nADD.F32 R14.w, -R10, R1.x;\nMAX.F R1.y, R1, {0, 0, 0, 0}.x;\nADD.F32 R1.y, R1, -R10.w;\nADD.F32 R14.w, R14'
                b', {868.377747, 0, 0, 0}.x;\nDIV.F32 R10.w, R1.y, R14.w;\nMAD.F32 R1.y, R1.x, {0.0011335793, 0.0078125, 0, '
                b'0}.x, {0.0011335793, 0.0078125, 0, 0};\nMAD.F32 R1.x, R10.w, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.'
                b'001953125, 0, 0}.y;\nTEX.F R1.x, R1, handle(D0.x), 2D;\nDIV.F32 R0.x, R1, R0.x;\nMIN.F R10.w, R0.x, {1, 0, '
                b'0, 0}.x;\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDREP;\nMOV.F R0.x, R10.w;\nENDIF;\nMAD.F32 R'
                b'0.x, -R0, R1.z, R16.y;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nSEQ.F R1.x, R0, {0'
                b', 0, 0, 0};\nTRUNC.U.CC HC.x, R1;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDIF;\nMOV.U.CC R'
                b'C.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDREP;\nLDC.F32X4 R1.xyz, buf3[96];\nMUL.F32 R1.xyz, R1, c[13].x;\nMUL.F32 '
                b'R1.xyz, R1, R0.z;\nSLT.F32 R0.z, R11.w, R7.w;\nSLE.F32 R0.x, {0, 0, 0, 0}, R11.w;\nMAX.F R8.xyz, R8, {0, 0,'
                b' 0, 0}.x;\nMAX.F R10.xyz, R10, {0, 0, 0, 0}.x;\nMUL.F32 R10.xyz, R8, R10;\nMAX.F R15.xyz, R15, {0, 0, 0, 0}'
                b'.x;\nMAD.F32 R8.xyz, R8, R15, R10;\nMUL.F32 R1.xyz, R8, R1;\nTRUNC.U R0.z, R0;\nTRUNC.U R0.x, R0;\nAND.U.CC H'
                b'C.x, R0, R0.z;\nMUL.F32 R8.xyz, R1, {0.318309873, 0, 0, 0}.x;\nIF NE.x;\nPK64.U D0.x, c[11];\nTXQ R1.xyz, {0'
                b', 0, 0, 0}, handle(D0.x), 3D;\nI2F.S R10.xyz, R1;\nMAX.F R0.x, R10.y, R10.z;\nMAX.F R0.x, R10, R0;\nPK64.U D'
                b'0.x, c[12];\nTXQ R1.xyz, {0, 0, 0, 0}, handle(D0.x), 3D;\nI2F.S R1.xyz, R1;\nMAX.F R0.z, R1.y, R1;\nRCP.F32 '
                b'R10.x, R10.x;\nRCP.F32 R10.z, R10.z;\nRCP.F32 R10.y, R10.y;\nMUL.F32 R10.xyz, R0.x, R10;\nMAX.F R0.x, R1, R0'
                b'.z;\nMUL.F32 R0.z, c[15].x, {0.0078125, 0, 0, 0}.x;\nRCP.F32 R1.x, R1.x;\nRCP.F32 R1.z, R1.z;\nRCP.F32 R1.y,'
                b' R1.y;\nMUL.F32 R1.xyz, R0.x, R1;\nMUL.F32 R15.xyz, R1, c[21].x;\nMOV.F R1.xy, c[16].x;\nLDC.F32 R0.x, buf0['
                b'0];\nMOV.F R1.z, {0, 0, 0, 0}.x;\nMUL.F32 R10.xyz, R10, c[18].x;\nMUL.F32 R16.xyz, R1, R0.x;\nMOV.F R7.w, R0'
                b'.z;\nMOV.F R8.w, R0.z;\nMUL.F32 R10.w, R0.z, {0.0299999993, 0, 0, 0}.x;\nMOV.S R11.w, {0, 0, 0, 0}.x;\nREP.S'
                b' {128, 0, 0, 0};\nI2F.S R0.x, R11.w;\nMUL.F32 R1.xyz, R5, R0.x;\nMAD.F32 R17.xyz, R1, R8.w, R14;\nADD.F32 R1'
                b'.xyz, R17, -R11;\nDP3.F32 R0.x, R1, R1;\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nADD.F32 R15.w, R0.x, -R0;'
                b'\nSLT.F32 R0.z, c[15].x, R15.w;\nSLT.F32 R0.x, R0, R0.w;\nTRUNC.U R0.z, R0;\nTRUNC.U R0.x, R0;\nOR.U.CC HC.x,'
                b' R0.z, R0;\nMOV.F H0.x, {0, 0, 0, 0};\nIF NE.x;\nMOV.F H0.x, {1, 0, 0, 0};\nENDIF;\nMOV.F H0.y, {0, 0, 0, 0}.'
                b'x;\nSEQ.F H0.y, H0.x, H0;\nTRUNC.U.CC HC.x, H0.y;\nIF NE.x;\nLDC.F32X4 R0.xz, buf1[384];\nADD.F32 R1.xy, R17.'
                b'xzzw, R0.xzzw;\nMUL.F32 R18.xyz, R16, c[18].x;\nDIV.F32.SAT R0.z, R15.w, c[15].x;\nMAD.F32 R0.z, R0, {2, -1'
                b', 0, 0}.x, {2, -1, 0, 0}.y;\nMOV.F R1.z, R17.y;\nDIV.F32 R18.xyz, R18, c[21].x;\nMAD.F32 R18.xyz, R1, R10, '
                b'R18;\nPK64.U D0.x, c[11];\nTEX.F R0.x, R18, handle(D0.x), 3D;\nMUL.F32 R18.xyz, R16, {0.300000012, 0, 0, 0}'
                b'.x;\nADD.F32 R0.x, R0, c[20];\nADD.F32 R0.x, R0, {-1.5, 0, 0, 0};\nMAD.F32 R1.xyz, R1, R15, R18;\nPK64.U D0.'
                b'x, c[12];\nTEX.F R1.x, R1, handle(D0.x), 3D;\nMUL.F32 R12.w, |R0.z|, |R0.z|;\nMAD.F32 R1.y, -R12.w, |R0.z|,'
                b' {1, 0, 0, 0}.x;\nADD.F32 R0.z, R1.x, c[23].x;\nMAD.F32.SAT R0.x, R0, c[19], {0.5, 0, 0, 0};\nMAD.F32 R0.z,'
                b' R0, R1.y, -R1.y;\nADD.F32 R0.z, R0, {-0.5, 0, 0, 0}.x;\nMUL.F32 R0.z, R0, c[22].x;\nRCP.F32 R1.x, R0.x;\nAD'
                b'D.F32.SAT R0.z, R0, {0.5, 0, 0, 0}.x;\nADD.F32 R0.x, R0, R0.z;\nMAD.F32.SAT R13.w, R0.x, R1.x, -R1.x;\nSLE.'
                b'F32 R0.x, R13.w, {0.00999999978, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMOV.F H0.x, {1, 0, 0, 0};\nADD.F'
                b'32 R8.w, R8, R10;\nENDIF;\nMOV.F H0.y, {0, 0, 0, 0}.x;\nSEQ.F H0.x, H0, H0.y;\nTRUNC.U.CC HC.x, H0;\nIF NE.x;'
                b'\nMOV.F R12.w, {1, 0, 0, 0}.x;\nMOV.S R14.w, {0, 0, 0, 0}.x;\nREP.S ;\nI2F.S R0.x, R14.w;\nSGE.F32.CC HC.x, R'
                b'0, {32, 0, 0, 0};\nBRK (NE.x);\nI2F.S R0.x, R14.w;\nADD.F32 R0.x, -R0, {32, 0, 0, 0};\nLDC.F32X4 R1.xyz, buf'
                b'3[80];\nMUL.F32 R1.xyz, R1, R0.x;\nMAD.F32 R1.xyz, R1, R7.w, R17;\nADD.F32 R18.xyz, R1, -R11;\nDP3.F32 R0.x,'
                b' R18, R18;\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nADD.F32 R15.w, R0.x, -R0;\nSLT.F32 R0.z, c[15].x, R15.'
                b'w;\nSLT.F32 R0.x, R0, R0.w;\nTRUNC.U R0.z, R0;\nTRUNC.U R0.x, R0;\nOR.U.CC HC.x, R0.z, R0;\nMOV.F H0.x, {0, 0'
                b', 0, 0};\nIF NE.x;\nMOV.F H0.x, {1, 0, 0, 0};\nENDIF;\nMOV.F H0.y, {0, 0, 0, 0}.x;\nSEQ.F H0.y, H0.x, H0;'
                b'\nTRUNC.U.CC HC.x, H0.y;\nIF NE.x;\nLDC.F32X4 R0.xz, buf1[384];\nADD.F32 R1.xz, R1, R0;\nDIV.F32.SAT R0.z, R1'
                b'5.w, c[15].x;\nMAD.F32 R0.z, R0, {2, -1, 0, 0}.x, {2, -1, 0, 0}.y;\nMUL.F32 R18.xyz, R16, c[18].x;\nDIV.F32'
                b' R18.xyz, R18, c[21].x;\nMAD.F32 R18.xyz, R1.xzyw, R10, R18;\nPK64.U D0.x, c[11];\nTEX.F R0.x, R18, handle('
                b'D0.x), 3D;\nMUL.F32 R18.xyz, R16, {0.300000012, 0, 0, 0}.x;\nADD.F32 R0.x, R0, c[20];\nADD.F32 R0.x, R0, {-'
                b'1.5, 0, 0, 0};\nMAD.F32 R1.xyz, R1.xzyw, R15, R18;\nPK64.U D0.x, c[12];\nTEX.F R1.x, R1, handle(D0.x), 3D;\n'
                b'MUL.F32 R15.w, |R0.z|, |R0.z|;\nMAD.F32 R1.y, -R15.w, |R0.z|, {1, 0, 0, 0}.x;\nADD.F32 R0.z, R1.x, c[23].x'
                b';\nMAD.F32.SAT R0.x, R0, c[19], {0.5, 0, 0, 0};\nMAD.F32 R0.z, R0, R1.y, -R1.y;\nADD.F32 R0.z, R0, {-0.5, 0'
                b', 0, 0}.x;\nMUL.F32 R0.z, R0, c[22].x;\nADD.F32.SAT R0.z, R0, {0.5, 0, 0, 0}.x;\nRCP.F32 R1.x, R0.x;\nADD.F3'
                b'2 R0.x, R0, R0.z;\nMAD.F32.SAT R0.x, R0, R1, -R1;\nSLE.F32 R0.z, R0.x, {0.00999999978, 0, 0, 0}.x;\nTRUNC.U'
                b'.CC HC.x, R0.z;\nIF NE.x;\nMOV.F H0.x, {1, 0, 0, 0};\nENDIF;\nMOV.F H0.y, {0, 0, 0, 0}.x;\nSEQ.F H0.x, H0, H0'
                b'.y;\nTRUNC.U.CC HC.x, H0;\nIF NE.x;\nMUL.F32 R0.x, R0, c[17];\nMAD.F32 R12.w, -R0.x, R12, R12;\nSLE.F32 R0.x,'
                b' R12.w, {0.00999999978, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.F R12.w'
                b', {0, 0, 0, 0}.x;\nBRK (NE.x);\nENDIF;\nENDIF;\nENDIF;\nADD.S R14.w, R14, {1, 0, 0, 0}.x;\nENDREP;\nMAD.F32'
                b' R0.x, R13.w, c[17], R9.w;\nMUL.F32 R1.xyz, R13.w, R8;\nMOV.F.SAT R0.z, R0.x;\nSLE.F32 R0.z, {1, 0, 0, 0}.x'
                b', R0;\nTRUNC.U.CC HC.x, R0.z;\nMAD.F32 R9.xyz, R1, R12.w, R9;\nMOV.F.SAT R9.w, R0.x;\nIF NE.x;\nMOV.U.CC RC.x'
                b', {1, 0, 0, 0};\nBRK (NE.x);\nENDIF;\nENDIF;\nENDIF;\nADD.S R11.w, R11, {1, 0, 0, 0}.x;\nENDREP;\nMAD.F32 R'
                b'0.x, R0.y, {0.5, 0.00999999046, 0, 0}, {0.5, 0.00999999046, 0, 0}.y;\nMUL.F32.SAT R0.x, R0, {30, 0, 0, 0}'
                b';\nPOW.F32 R0.x, R0.x, {0.100000001, 0, 0, 0}.x;\nMUL.F32 R9.w, R9, R0.x;\nENDIF;\nADD.F32 R0.xyz, R9, -R12;'
                b'\nMAD.F32 R0.xyz, R9.w, R0, R12;\nMAX.F R0.xyz, R0, {0, 0, 0, 0}.x;\nADD.F32.SAT R0.w, -R9, {1, 0, 0, 0}.x;'
                b'\nMAD.F32 R10.xyz, R13, R0.w, R0;\nMOV.F result_color0.xyz, R10;\nMOV.F.SAT result_color0.w, R9;\nENDIF;\nLDC'
                b'.F32 R0.x, buf1[400];\nMAX.F R0.x, R0, R2.w;\nMUL.F32 R0.xyz, R5, R0.x;\nMAD.F32 R0.xyz, R0, {0.100000001, '
                b'0, 0, 0}.x, R4;\nADD.F32 R4.xyz, R4, -c[0];\nDP3.F32 R2.w, R4, R4;\nRSQ.F32 R7.w, R2.w;\nADD.F32 R0.xyz, R0,'
                b' -c[0];\nADD.F32 R1.xyz, -R4, R0;\nDP3.F32 R0.w, R1, R1;\nRSQ.F32 R0.w, R0.w;\nMUL.F32 R5.xyz, R0.w, R1;\nRCP'
                b'.F32 R2.w, R7.w;\nDP3.F32 R0.w, R4, R5;\nDIV.F32 R1.x, R2.w, R7.w;\nMAD.F32 R1.x, R0.w, R0.w, -R1;\nADD.F32 '
                b'R1.x, R1, {41216400, 0, 0, 0};\nRSQ.F32 R1.x, R1.x;\nRCP.F32 R1.x, R1.x;\nSGT.F32 R8.x, -R0.w, R1;\nADD.F32 '
                b'R7.w, -R0, -R1.x;\nTRUNC.U.CC HC.x, R8;\nMOV.F R1.xyz, R4;\nIF NE.x;\nMAD.F32 R4.xyz, R5, R7.w, R1;\nADD.F32 '
                b'R0.w, R7, R0;\nMOV.F R2.w, {6420, 0, 0, 0}.x;\nENDIF;\nADD.F32 R0.xyz, -R4, R0;\nLDC.F32X4 R1.xyz, buf3[80];'
                b'\nDP3.F32 R4.x, R4, R1;\nDP3.F32 R0.x, R0, R0;\nRSQ.F32 R0.x, R0.x;\nDP3.F32 R4.z, R1, R5;\nDIV.F32 R4.x, R4,'
                b' R2.w;\nRCP.F32 R5.x, R0.x;\nDIV.F32 R4.y, R0.w, R2.w;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\n'
                b'BRK (NE.x);\nSLT.F32 R0.x, R4.y, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMUL.F32 R0.x, R2.w, R2.w;\nMU'
                b'L.F32 R0.y, R4, R4;\nMAD.F32 R0.x, R0.y, R0, -R0;\nADD.F32 R0.x, R0, {40462320, 0, 0, 0};\nSLE.F32 R0.x, {0'
                b', 0, 0, 0}, R0;\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.U R3.w, {1, 0, 0, 0}.x;\nB'
                b'RK (NE.x);\nENDIF;\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.U R3.w, {0, 0, 0, 0}.x;\nBRK (NE.x);\nENDREP'
                b';\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nMUL.F32 R0.x, R2.w, R4.y;\nMUL.F32 R0.x,'
                b' R5, R0;\nMUL.F32 R0.x, R0, {2, 0, 0, 0};\nMAD.F32 R0.x, R5, R5, R0;\nMAD.F32 R0.x, R2.w, R2.w, R0;\nRSQ.F32'
                b' R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMIN.F R0.x, R0, {6420, 0, 0, 0};\nMOV.U.CC RC.x, R3.w;\nMAX.F R0.x, R0, {'
                b'6361, 0, 0, 0};\nMAD.F32 R0.y, R2.w, R4, R5.x;\nDIV.F32 R0.y, R0, R0.x;\nMIN.F R0.y, R0, {1, 0, 0, 0}.x;\nMA'
                b'X.F R0.y, R0, {-1, 0, 0, 0}.x;\nIF NE.x;\nADD.F32 R1.y, -R2.w, {6420, 0, 0, 0}.x;\nMUL.F32 R0.w, -R4.y, -R4'
                b'.y;\nMUL.F32 R0.z, R2.w, R2.w;\nMAD.F32 R0.z, R0.w, R0, -R0;\nADD.F32 R0.z, R0, {41216400, 0, 0, 0}.x;\nMAX.'
                b'F R0.w, R0.z, {0, 0, 0, 0}.x;\nMAD.F32 R0.z, R2.w, R2.w, {-40462320, 0, 0, 0}.x;\nRSQ.F32 R0.w, R0.w;\nMAX.'
                b'F R0.z, R0, {0, 0, 0, 0}.x;\nRSQ.F32 R0.z, R0.z;\nRCP.F32 R1.x, R0.z;\nRCP.F32 R0.w, R0.w;\nMAD.F32 R0.w, -R'
                b'2, -R4.y, R0;\nMAX.F R0.z, R0.w, {0, 0, 0, 0}.x;\nADD.F32 R1.z, -R1.y, R1.x;\nADD.F32 R0.z, R0, -R1.y;\nADD.'
                b'F32 R0.w, R1.z, {868.377747, 0, 0, 0}.x;\nDIV.F32 R1.y, R0.z, R0.w;\nMUL.F32 R0.z, R0.x, R0.x;\nMUL.F32 R0.'
                b'w, -R0.y, -R0.y;\nMAD.F32 R0.w, R0, R0.z, -R0.z;\nADD.F32 R3.x, R0.w, {41216400, 0, 0, 0};\nMAD.F32 R0.z, R'
                b'1.y, {0.99609375, 0.001953125, 0, 0}.x, {0.99609375, 0.001953125, 0, 0}.y;\nMAD.F32 R0.w, R1.x, {0.0011335793'
                b', 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0}.y;\nPK64.U D0.x, c[4];\nTEX.F R1.xyz, R0.zwzw, handl'
                b'e(D0.x), 2D;\nMAX.F R0.w, R3.x, {0, 0, 0, 0}.x;\nMAD.F32 R0.z, R0.x, R0.x, {-40462320, 0, 0, 0}.x;\nRSQ.F32'
                b' R0.w, R0.w;\nMAX.F R0.z, R0, {0, 0, 0, 0}.x;\nRCP.F32 R0.w, R0.w;\nMAD.F32 R0.w, -R0.x, -R0.y, R0;\nRSQ.F32'
                b' R0.z, R0.z;\nRCP.F32 R0.y, R0.z;\nADD.F32 R0.z, -R0.x, {6420, 0, 0, 0}.x;\nADD.F32 R3.x, -R0.z, R0.y;\nMAX.'
                b'F R0.x, R0.w, {0, 0, 0, 0};\nADD.F32 R0.x, R0, -R0.z;\nADD.F32 R0.w, R3.x, {868.377747, 0, 0, 0}.x;\nDIV.F3'
                b'2 R0.x, R0, R0.w;\nMAD.F32 R0.y, R0, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\n'
                b'MAD.F32 R0.x, R0, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nTEX.F R0.xyz, R0, hand'
                b'le(D0.x), 2D;\nRCP.F32 R1.x, R1.x;\nRCP.F32 R1.z, R1.z;\nRCP.F32 R1.y, R1.y;\nMUL.F32 R0.xyz, R0, R1;\nMIN.F '
                b'R3.xyz, R0, {1, 0, 0, 0}.x;\nELSE;\nMUL.F32 R0.w, R0.y, R0.y;\nMUL.F32 R0.z, R0.x, R0.x;\nMAD.F32 R0.z, R0.w'
                b', R0, -R0;\nADD.F32 R0.z, R0, {41216400, 0, 0, 0}.x;\nMAX.F R0.w, R0.z, {0, 0, 0, 0}.x;\nMAD.F32 R0.z, R0.x'
                b', R0.x, {-40462320, 0, 0, 0}.x;\nRSQ.F32 R0.w, R0.w;\nRCP.F32 R0.w, R0.w;\nMAX.F R0.z, R0, {0, 0, 0, 0}.x;\n'
                b'MAD.F32 R0.y, -R0.x, R0, R0.w;\nRSQ.F32 R0.z, R0.z;\nRCP.F32 R0.w, R0.z;\nADD.F32 R0.z, -R0.x, {6420, 0, 0,'
                b' 0}.x;\nMAX.F R0.x, R0.y, {0, 0, 0, 0};\nADD.F32 R1.x, -R0.z, R0.w;\nADD.F32 R0.x, R0, -R0.z;\nADD.F32 R0.y,'
                b' R1.x, {868.377747, 0, 0, 0}.x;\nDIV.F32 R0.z, R0.x, R0.y;\nMUL.F32 R0.x, R2.w, R2.w;\nMUL.F32 R0.y, R4, R4'
                b';\nMAD.F32 R0.y, R0, R0.x, -R0.x;\nMAD.F32 R0.x, R0.z, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001'
                b'953125, 0, 0}.y;\nADD.F32 R0.z, R0.y, {41216400, 0, 0, 0}.x;\nMAD.F32 R0.y, R0.w, {0.0011335793, 0.0078125'
                b', 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, c[4];\nTEX.F R1.xyz, R0, handle(D0.x), 2D;\nMAX.F'
                b' R0.y, R0.z, {0, 0, 0, 0}.x;\nMAD.F32 R0.x, R2.w, R2.w, {-40462320, 0, 0, 0};\nRSQ.F32 R0.y, R0.y;\nMAX.F R'
                b'0.x, R0, {0, 0, 0, 0};\nRCP.F32 R0.y, R0.y;\nRSQ.F32 R0.x, R0.x;\nMAD.F32 R0.y, -R2.w, R4, R0;\nRCP.F32 R0.x'
                b', R0.x;\nADD.F32 R0.z, -R2.w, {6420, 0, 0, 0}.x;\nADD.F32 R0.w, -R0.z, R0.x;\nMAX.F R0.y, R0, {0, 0, 0, 0}.'
                b'x;\nADD.F32 R0.y, R0, -R0.z;\nADD.F32 R0.w, R0, {868.377747, 0, 0, 0}.x;\nDIV.F32 R0.z, R0.y, R0.w;\nMAD.F32'
                b' R0.y, R0.x, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nMAD.F32 R0.x, R0.z, {0.9960'
                b'9375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nTEX.F R0.xyz, R0, handle(D0.x), 2D;\nRCP.F32'
                b' R1.x, R1.x;\nRCP.F32 R1.z, R1.z;\nRCP.F32 R1.y, R1.y;\nMUL.F32 R0.xyz, R0, R1;\nMIN.F R3.xyz, R0, {1, 0, 0,'
                b' 0}.x;\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDREP;\nMAD.F32 R0.x, R2.w, R2.w, {-40462320, 0, '
                b'0, 0};\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMOV.U.CC RC.x, R3.w;\nMUL.F3'
                b'2 R0.y, R2.w, R4;\nMUL.F32 R0.z, R2.w, R2.w;\nMAD.F32 R0.z, R0.y, R0.y, -R0;\nADD.F32 R0.z, R0, {40462320, '
                b'0, 0, 0}.x;\nMAD.F32 R1.x, R0, {0.00111558591, 0.015625, 0, 0}, {0.00111558591, 0.015625, 0, 0}.y;\nIF NE.'
                b'x;\nMAX.F R0.z, R0, {0, 0, 0, 0}.x;\nRSQ.F32 R0.w, R0.z;\nADD.F32 R0.z, R2.w, {-6361, 0, 0, 0}.x;\nRCP.F32 R'
                b'0.w, R0.w;\nSEQ.F R1.y, R0.x, R0.z;\nTRUNC.U.CC HC.x, R1.y;\nADD.F32 R0.y, -R0, -R0.w;\nIF NE.x;\nMOV.F R0.x,'
                b' {0, 0, 0, 0};\nELSE;\nADD.F32 R0.x, -R0.z, R0;\nADD.F32 R0.y, R0, -R0.z;\nDIV.F32 R0.x, R0.y, R0.x;\nEND'
                b'IF;\nMAD.F32 R0.x, R0, {0.984375, 0.0078125, 0, 0}, {0.984375, 0.0078125, 0, 0}.y;\nMAD.F32 R1.y, -R0.x, {'
                b'0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nELSE;\nADD.F32 R0.w, -R2, {6420, 0, 0, 0}.x;\nADD.F32 R0.z, R0, {754079'
                b'.938, 0, 0, 0}.x;\nMAX.F R0.z, R0, {0, 0, 0, 0}.x;\nRSQ.F32 R0.z, R0.z;\nADD.F32 R1.y, -R0.w, R0.x;\nRCP.F32'
                b' R0.z, R0.z;\nADD.F32 R0.x, -R0.y, R0.z;\nADD.F32 R0.y, R1, {868.377747, 0, 0, 0}.x;\nADD.F32 R0.x, R0, -R0'
                b'.w;\nDIV.F32 R0.x, R0, R0.y;\nMAD.F32 R0.x, R0, {0.984375, 0.0078125, 0, 0}, {0.984375, 0.0078125, 0, 0}.y'
                b';\nMAD.F32 R1.y, R0.x, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nENDIF;\nMUL.F32 R0.x, R4, R4;\nMAD.F32 R0.x, R0,'
                b' {40462320, 754080, 0, 0}, {40462320, 754080, 0, 0}.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;'
                b'\nRCP.F32 R0.x, R0.x;\nMAD.F32 R0.x, R4, {-6361, 0, 0, 0}, R0;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nADD.F32 R0.x,'
                b' R0, {-59, 0, 0, 0};\nMUL.F32 R0.x, R0, {0.00123551709, 0, 0, 0};\nMAD.F32 R0.y, -R0.x, {0.127240658, 1, 0'
                b', 0}.x, {0.127240658, 1, 0, 0};\nADD.F32 R0.z, R0.x, {1, 0, 0, 0}.x;\nMAD.F32 R0.x, R4.z, {0.5, 0, 0, 0}, '
                b'{0.5, 0, 0, 0};\nMUL.F32 R1.z, R0.x, {7, 0, 0, 0}.x;\nFLR.F R5.y, R1.z;\nMAX.F R0.y, R0, {0, 0, 0, 0}.x;\nDI'
                b'V.F32 R0.y, R0, R0.z;\nMAD.F32 R0.x, R0.y, {0.96875, 0.015625, 0, 0}, {0.96875, 0.015625, 0, 0}.y;\nADD.F3'
                b'2 R5.z, R5.y, R0.x;\nPK64.U D0.x, c[6];\nADD.F32 R1.z, -R5.y, R1;\nMUL.F32 R0.x, R5.z, {0.125, 0, 0, 0};\nMO'
                b'V.F R0.z, R1.x;\nMOV.F R0.y, R1;\nTEX.F R0, R0, handle(D0.x), 3D;\nMAD.F32 R8, -R1.z, R0, R0;\nMAD.F32 R0.x,'
                b' R5.z, {0.125, 0, 0, 0}, {0.125, 0, 0, 0};\nMOV.F R0.z, R1.x;\nMOV.F R0.y, R1;\nTEX.F R0, R0, handle(D0.x),'
                b' 3D;\nMAD.F32 R9, R0, R1.z, R8;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nSEQ.F R0.x'
                b', R9, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.F R4.w, {0, 0, 0, 0}.'
                b'x;\nBRK (NE.x);\nENDIF;\nMUL.F32 R0.x, R9, R9.w;\nDIV.F32 R0.x, R0, R9.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nM'
                b'UL.F32 R4.w, R0.x, {0.99999994, 0, 0, 0}.x;\nBRK (NE.x);\nENDREP;\nADD.F32 R0.x, R5, -R6.w;\nMAX.F R5.x, R0,'
                b' {0, 0, 0, 0};\nMUL.F32 R0.y, R2.w, R4;\nMUL.F32 R0.x, R5, R0.y;\nMUL.F32 R0.x, R0, {2, 0, 0, 0};\nMAD.F32 R'
                b'0.x, R5, R5, R0;\nMAD.F32 R0.x, R2.w, R2.w, R0;\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMIN.F R0.x, R0, {'
                b'6420, 0, 0, 0};\nMAX.F R0.x, R0, {6361, 0, 0, 0};\nMUL.F32 R0.y, R5.x, R4.z;\nMAD.F32 R0.z, R0.x, R0.x, {-4'
                b'0462320, 0, 0, 0}.x;\nMAD.F32 R0.y, R2.w, R4.x, R0;\nMAX.F R0.z, R0, {0, 0, 0, 0}.x;\nRSQ.F32 R0.z, R0.z;\nM'
                b'OV.U.CC RC.x, R3.w;\nMUL.F32 R1.x, R0, R0;\nMAD.F32 R0.w, R2, R4.y, R5.x;\nMAD.F32 R1.x, R0.w, R0.w, -R1;\nR'
                b'CP.F32 R0.z, R0.z;\nADD.F32 R1.y, R1.x, {40462320, 0, 0, 0}.x;\nDIV.F32 R0.y, R0, R0.x;\nMAD.F32 R1.x, R0.z'
                b', {0.00111558591, 0.015625, 0, 0}, {0.00111558591, 0.015625, 0, 0}.y;\nIF NE.x;\nMAX.F R1.y, R1, {0, 0, 0,'
                b' 0}.x;\nRSQ.F32 R1.z, R1.y;\nADD.F32 R1.y, R0.x, {-6361, 0, 0, 0}.x;\nRCP.F32 R0.x, R1.z;\nSEQ.F R1.z, R0, R'
                b'1.y;\nTRUNC.U.CC HC.x, R1.z;\nADD.F32 R0.x, -R0.w, -R0;\nIF NE.x;\nMOV.F R0.x, {0, 0, 0, 0};\nELSE;\nADD.F'
                b'32 R0.z, -R1.y, R0;\nADD.F32 R0.x, R0, -R1.y;\nDIV.F32 R0.x, R0, R0.z;\nENDIF;\nMAD.F32 R0.x, R0, {0.984375,'
                b' 0.0078125, 0, 0}, {0.984375, 0.0078125, 0, 0}.y;\nMAD.F32 R1.y, -R0.x, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.'
                b'x;\nELSE;\nADD.F32 R1.z, -R0.x, {6420, 0, 0, 0}.x;\nADD.F32 R1.y, R1, {754079.938, 0, 0, 0}.x;\nMAX.F R1.y, '
                b'R1, {0, 0, 0, 0}.x;\nRSQ.F32 R1.y, R1.y;\nRCP.F32 R0.x, R1.y;\nADD.F32 R0.z, -R1, R0;\nADD.F32 R0.x, -R0.w, '
                b'R0;\nADD.F32 R0.z, R0, {868.377747, 0, 0, 0}.x;\nADD.F32 R0.x, R0, -R1.z;\nDIV.F32 R0.x, R0, R0.z;\nMAD.F32 '
                b'R0.x, R0, {0.984375, 0.0078125, 0, 0}, {0.984375, 0.0078125, 0, 0}.y;\nMAD.F32 R1.y, R0.x, {0.5, 0, 0, 0}.x, '
                b'{0.5, 0, 0, 0}.x;\nENDIF;\nMUL.F32 R0.x, R0.y, R0.y;\nMAD.F32 R0.x, R0, {40462320, 754080, 0, 0}, {40462320'
                b', 754080, 0, 0}.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMAD.F32 R0.x, R'
                b'0.y, {-6361, 0, 0, 0}, R0;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nADD.F32 R0.x, R0, {-59, 0, 0, 0};\nMUL.F32 R0.x,'
                b' R0, {0.00123551709, 0, 0, 0};\nMAD.F32 R0.y, -R0.x, {0.127240658, 1, 0, 0}.x, {0.127240658, 1, 0, 0};\nAD'
                b'D.F32 R0.z, R0.x, {1, 0, 0, 0}.x;\nMAD.F32 R0.x, R4.z, {0.5, 0, 0, 0}, {0.5, 0, 0, 0};\nMUL.F32 R1.z, R0.x'
                b', {7, 0, 0, 0}.x;\nFLR.F R5.y, R1.z;\nMAX.F R0.y, R0, {0, 0, 0, 0}.x;\nDIV.F32 R0.y, R0, R0.z;\nMAD.F32 R0.x'
                b', R0.y, {0.96875, 0.015625, 0, 0}, {0.96875, 0.015625, 0, 0}.y;\nADD.F32 R5.z, R5.y, R0.x;\nPK64.U D0.x, c'
                b'[6];\nADD.F32 R1.z, -R5.y, R1;\nMUL.F32 R0.x, R5.z, {0.125, 0, 0, 0};\nMOV.F R0.z, R1.x;\nMOV.F R0.y, R1;\nTE'
                b'X.F R0, R0, handle(D0.x), 3D;\nMAD.F32 R8, -R1.z, R0, R0;\nMAD.F32 R0.x, R5.z, {0.125, 0, 0, 0}, {0.125, 0'
                b', 0, 0};\nMOV.F R0.z, R1.x;\nMOV.F R0.y, R1;\nTEX.F R0, R0, handle(D0.x), 3D;\nMAD.F32 R0, R0, R1.z, R8;\nREP'
                b'.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nSEQ.F R1.x, R0, {0, 0, 0, 0};\nTRUNC.U.CC HC.'
                b'x, R1;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.F R5.w, {0, 0, 0, 0}.x;\nBRK (NE.x);\nENDIF;\nMUL.F32 '
                b'R1.x, R0, R0.w;\nDIV.F32 R1.x, R1, R0.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMUL.F32 R5.w, R1.x, {0.99999994, 0,'
                b' 0, 0}.x;\nBRK (NE.x);\nENDREP;\nSGT.F32 R0.w, R6, {0, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R0.w;\nMOV.F R1.xyz, R3;'
                b'\nIF NE.x;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nMUL.F32 R0.w, R2, R4.y;\nMUL'
                b'.F32 R0.w, R5.x, R0;\nMUL.F32 R0.w, R0, {2, 0, 0, 0}.x;\nMAD.F32 R0.w, R5.x, R5.x, R0;\nMAD.F32 R0.w, R2, R'
                b'2, R0;\nRSQ.F32 R0.w, R0.w;\nRCP.F32 R0.w, R0.w;\nMIN.F R0.w, R0, {6420, 0, 0, 0}.x;\nMOV.U.CC RC.x, R3.w;\nM'
                b'AX.F R0.w, R0, {6361, 0, 0, 0}.x;\nMAD.F32 R1.x, R2.w, R4.y, R5;\nDIV.F32 R1.x, R1, R0.w;\nMIN.F R1.x, R1, '
                b'{1, 0, 0, 0};\nMAX.F R1.x, R1, {-1, 0, 0, 0};\nIF NE.x;\nADD.F32 R2.x, -R2.w, {6420, 0, 0, 0};\nMUL.F32 R1.z'
                b', -R4.y, -R4.y;\nMUL.F32 R1.y, R2.w, R2.w;\nMAD.F32 R1.y, R1.z, R1, -R1;\nADD.F32 R1.y, R1, {41216400, 0, 0'
                b', 0}.x;\nMAX.F R1.z, R1.y, {0, 0, 0, 0}.x;\nMAD.F32 R1.y, R2.w, R2.w, {-40462320, 0, 0, 0}.x;\nRSQ.F32 R1.z'
                b', R1.z;\nMAX.F R1.y, R1, {0, 0, 0, 0}.x;\nRSQ.F32 R1.y, R1.y;\nRCP.F32 R2.y, R1.y;\nADD.F32 R2.z, -R2.x, R2.'
                b'y;\nRCP.F32 R1.z, R1.z;\nMAD.F32 R1.z, -R2.w, -R4.y, R1;\nMAX.F R1.y, R1.z, {0, 0, 0, 0}.x;\nADD.F32 R1.y, R'
                b'1, -R2.x;\nADD.F32 R1.z, R2, {868.377747, 0, 0, 0}.x;\nDIV.F32 R2.x, R1.y, R1.z;\nMUL.F32 R1.z, -R1.x, -R1.'
                b'x;\nMUL.F32 R1.y, R0.w, R0.w;\nMAD.F32 R1.y, R1.z, R1, -R1;\nADD.F32 R1.y, R1, {41216400, 0, 0, 0}.x;\nMAX.F'
                b' R1.z, R1.y, {0, 0, 0, 0}.x;\nMAD.F32 R1.y, R0.w, R0.w, {-40462320, 0, 0, 0}.x;\nRSQ.F32 R1.z, R1.z;\nMAX.F'
                b' R1.y, R1, {0, 0, 0, 0}.x;\nRCP.F32 R1.z, R1.z;\nMAD.F32 R1.z, -R0.w, -R1.x, R1;\nRSQ.F32 R1.y, R1.y;\nRCP.F'
                b'32 R1.x, R1.y;\nADD.F32 R1.y, -R0.w, {6420, 0, 0, 0}.x;\nMAX.F R0.w, R1.z, {0, 0, 0, 0}.x;\nADD.F32 R3.x, -'
                b'R1.y, R1;\nADD.F32 R0.w, R0, -R1.y;\nADD.F32 R1.z, R3.x, {868.377747, 0, 0, 0}.x;\nPK64.U D0.x, c[4];\nDIV.F'
                b'32 R0.w, R0, R1.z;\nMAD.F32 R1.y, R1.x, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0'
                b'};\nMAD.F32 R1.x, R0.w, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nMAD.F32 R2.x,'
                b' R2, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nMAD.F32 R2.y, R2, {0.0011335793, 0.'
                b'0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nTEX.F R2.xyz, R2, handle(D0.x), 2D;\nRCP.F32 R2.x, R2.'
                b'x;\nRCP.F32 R2.z, R2.z;\nRCP.F32 R2.y, R2.y;\nTEX.F R1.xyz, R1, handle(D0.x), 2D;\nMUL.F32 R1.xyz, R1, R2;\nM'
                b'IN.F R2.xyz, R1, {1, 0, 0, 0}.x;\nELSE;\nMUL.F32 R1.z, R1.x, R1.x;\nMUL.F32 R1.y, R0.w, R0.w;\nMAD.F32 R1.y,'
                b' R1.z, R1, -R1;\nADD.F32 R1.y, R1, {41216400, 0, 0, 0}.x;\nMAX.F R1.z, R1.y, {0, 0, 0, 0}.x;\nMAD.F32 R1.y,'
                b' R0.w, R0.w, {-40462320, 0, 0, 0}.x;\nRSQ.F32 R1.z, R1.z;\nRCP.F32 R1.z, R1.z;\nMAD.F32 R1.x, -R0.w, R1, R1'
                b'.z;\nADD.F32 R1.z, -R0.w, {6420, 0, 0, 0}.x;\nMAX.F R0.w, R1.x, {0, 0, 0, 0}.x;\nMAX.F R1.y, R1, {0, 0, 0, '
                b'0}.x;\nRSQ.F32 R1.y, R1.y;\nRCP.F32 R1.y, R1.y;\nADD.F32 R2.x, -R1.z, R1.y;\nADD.F32 R0.w, R0, -R1.z;\nADD.F3'
                b'2 R1.x, R2, {868.377747, 0, 0, 0};\nDIV.F32 R1.z, R0.w, R1.x;\nMUL.F32 R1.x, R4.y, R4.y;\nMUL.F32 R0.w, R2,'
                b' R2;\nMAD.F32 R0.w, R1.x, R0, -R0;\nMAD.F32 R1.x, R1.z, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.00'
                b'1953125, 0, 0}.y;\nADD.F32 R0.w, R0, {41216400, 0, 0, 0}.x;\nMAD.F32 R1.y, R1, {0.0011335793, 0.0078125, 0'
                b', 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, c[4];\nTEX.F R2.xyz, R1, handle(D0.x), 2D;\nMAX.F R1'
                b'.x, R0.w, {0, 0, 0, 0};\nMAD.F32 R0.w, R2, R2, {-40462320, 0, 0, 0}.x;\nRSQ.F32 R1.x, R1.x;\nMAX.F R0.w, R0'
                b', {0, 0, 0, 0}.x;\nRCP.F32 R1.x, R1.x;\nRSQ.F32 R0.w, R0.w;\nMAD.F32 R1.x, -R2.w, R4.y, R1;\nADD.F32 R1.y, -'
                b'R2.w, {6420, 0, 0, 0}.x;\nRCP.F32 R0.w, R0.w;\nADD.F32 R1.z, -R1.y, R0.w;\nMAX.F R1.x, R1, {0, 0, 0, 0};\nAD'
                b'D.F32 R1.x, R1, -R1.y;\nADD.F32 R1.z, R1, {868.377747, 0, 0, 0}.x;\nDIV.F32 R1.x, R1, R1.z;\nRCP.F32 R2.x, '
                b'R2.x;\nRCP.F32 R2.z, R2.z;\nRCP.F32 R2.y, R2.y;\nMAD.F32 R1.y, R0.w, {0.0011335793, 0.0078125, 0, 0}.x, {0.'
                b'0011335793, 0.0078125, 0, 0};\nMAD.F32 R1.x, R1, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0'
                b', 0}.y;\nTEX.F R1.xyz, R1, handle(D0.x), 2D;\nMUL.F32 R1.xyz, R1, R2;\nMIN.F R2.xyz, R1, {1, 0, 0, 0}.x;\nEN'
                b'DIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDREP;\nMOV.F R1.xyz, R2;\nENDIF;\nMAD.F32 R2.xyz, -R1, '
                b'R0, R9;\nMOV.F R0.xyz, R2;\nMAD.F32 R0.w, -R1.x, R5, R4;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0}'
                b';\nBRK (NE.x);\nSEQ.F R1.x, R0, {0, 0, 0, 0};\nTRUNC.U.CC HC.x, R1;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0'
                b'};\nMOV.F R6.xyz, {0, 0, 0, 0}.x;\nBRK (NE.x);\nENDIF;\nMUL.F32 R1.xyz, R0, R0.w;\nDIV.F32 R1.xyz, R1, R0'
                b'.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMUL.F32 R6.xyz, R1, {0.99999994, 0.427939206, 0.175286993, 0};\nBRK (NE.'
                b'x);\nENDREP;\nMUL.F32.SAT R0.x, R4, {100, 0, 0, 0};\nMAD.F32 R0.y, -R0.x, {2, 3, 0, 0}.x, {2, 3, 0, 0};\nMUL'
                b'.F32 R0.w, R4.z, R4.z;\nMUL.F32 R0.x, R0, R0;\nMUL.F32 R0.x, R0, R0.y;\nMAD.F32 R0.y, -R4.z, {1.60000002, 1'
                b'.6400001, 0, 0}.x, {1.60000002, 1.6400001, 0, 0};\nSNE.U.CC HC.x, c[3], {0, 0, 0, 0};\nPOW.F32 R0.y, R0.y,'
                b' {1.5, 0, 0, 0}.x;\nMAD.F32 R0.z, R0.w, {0.0162772071, 0, 0, 0}.x, {0.0162772071, 0, 0, 0}.x;\nDIV.F32 R1.'
                b'x, R0.z, R0.y;\nMUL.F32 R0.xyz, R6, R0.x;\nMUL.F32 R1.xyz, R0, R1.x;\nMAD.F32 R0.x, R0.w, {0.0596831031, 0,'
                b' 0, 0}, {0.0596831031, 0, 0, 0};\nMAD.F32 R0.xyz, R2, R0.x, R1;\nMUL.F32 R0.xyz, R0, c[7];\nMAX.F R0.xyz, R'
                b'0, {0, 0, 0, 0}.x;\nIF NE.x;\nADD.F32 result_color0.xyz, R10, R0;\nENDIF;\nMOV.U.CC RC.x, R1.w;\nIF NE.x;'
                b'\nADD.F32 result_color1.xyz, R7, R0;\nENDIF;\nEND\n\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00 \x00\x00\x00p'
                b'\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\x00\x05\x00\x06\x00\t\x00\n\x00\x0b\x00\x0c\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x01\x01\x02\x01\x01\x02\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x95\x05\x00\x00\x00\x00\x00\x00\x00\x94t\x94b.',
 'binary_format': c_ulong(36385),
 'include_files': {'Resource\\Shaders\\blending.glsl': '2025-07-22 23:17:30',
                   'Resource\\Shaders\\precomputed_atmosphere/atmosphere_predefine.glsl': '2025-07-22 23:17:30',
                   'Resource\\Shaders\\precomputed_atmosphere/atmosphere_vs.glsl': '2025-07-22 23:17:30',
                   'Resource\\Shaders\\precomputed_atmosphere/definitions.glsl': '2025-07-22 23:17:30',
                   'Resource\\Shaders\\scene_constants.glsl': '2025-07-22 23:17:30',
                   'Resource\\Shaders\\utility.glsl': '2025-07-22 23:17:30'},
 'macros': OrderedDict([('COMBINED_SCATTERING_TEXTURES', 1)]),
 'material_components': [],
 'shader_codes': {GL_FRAGMENT_SHADER: '#version 430 core\n'
                                      '# extension GL_EXT_texture_array : enable\n'
                                      '#define MATERIAL_COMPONENTS 1\n'
                                      '#define FRAGMENT_SHADER 1\n'
                                      '#define COMBINED_SCATTERING_TEXTURES 1\n'
                                      '#if __VERSION__ >= 130\n'
                                      '#define texture2D texture\n'
                                      '#define texture2DLod textureLod\n'
                                      '#define texture2DGrad textureGrad\n'
                                      '#define texture2DArray texture\n'
                                      '#define texture2DArrayLod textureLod\n'
                                      '#define texture2DArrayGrad textureGrad\n'
                                      '#define texture3D texture\n'
                                      '#define texture3DLod textureLod\n'
                                      '#define texture3DGrad textureGrad\n'
                                      '#define textureCube texture\n'
                                      '#define textureCubeLod textureLod\n'
                                      '#define textureCubeGrad textureGrad\n'
                                      '#endif\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "blending.glsl"\n'
                                      '#ifndef UUID_d3158955_dd82_3200_9407_bf2b35b2c767\n'
                                      '#define UUID_d3158955_dd82_3200_9407_bf2b35b2c767\n'
                                      '\n'
                                      '\n'
                                      'float Remap(float originalValue, float originalMin, float originalMax, float newMin, '
                                      'float newMax)\n'
                                      '{\n'
                                      '\treturn newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * '
                                      '(newMax - newMin));\n'
                                      '}\n'
                                      '\n'
                                      'float Sharpen(float base, float sharpen)\n'
                                      '{\n'
                                      '    return (base - sharpen) / (1.0 - sharpen);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Sharpen(vec3 base, vec3 sharpen)\n'
                                      '{\n'
                                      '    return (base - sharpen) / (vec3(1.0) - sharpen);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float Contrast(float base, float contrast)\n'
                                      '{\n'
                                      '    return (base - 0.5) * contrast + 0.5;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Contrast(vec3 base, float contrast)\n'
                                      '{\n'
                                      '    return (base - vec3(0.5)) * contrast + vec3(0.5);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float ColorBurn(float base, float blend) {\n'
                                      '\treturn (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ColorBurn(vec3 base, vec3 blend) {\n'
                                      '\treturn '
                                      'vec3(ColorBurn(base.r,blend.r),ColorBurn(base.g,blend.g),ColorBurn(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ColorBurn(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (ColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float ColorDodge(float base, float blend) {\n'
                                      '\treturn (blend==1.0)?blend:min(base/(1.0-blend),1.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ColorDodge(vec3 base, vec3 blend) {\n'
                                      '\treturn '
                                      'vec3(ColorDodge(base.r,blend.r),ColorDodge(base.g,blend.g),ColorDodge(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ColorDodge(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (ColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float Darken(float base, float blend) {\n'
                                      '\treturn min(blend,base);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Darken(vec3 base, vec3 blend) {\n'
                                      '\treturn vec3(Darken(base.r,blend.r),Darken(base.g,blend.g),Darken(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Darken(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Darken(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 Difference(vec3 base, vec3 blend) {\n'
                                      '\treturn abs(base-blend);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Difference(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Difference(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 Exclusion(vec3 base, vec3 blend) {\n'
                                      '\treturn base+blend-2.0*base*blend;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Exclusion(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Exclusion(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float Reflect(float base, float blend) {\n'
                                      '\treturn (blend==1.0)?blend:min(base*base/(1.0-blend),1.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Reflect(vec3 base, vec3 blend) {\n'
                                      '\treturn '
                                      'vec3(Reflect(base.r,blend.r),Reflect(base.g,blend.g),Reflect(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Reflect(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Reflect(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 Glow(vec3 base, vec3 blend) {\n'
                                      '\treturn Reflect(blend,base);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Glow(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Glow(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float Overlay(float base, float blend) {\n'
                                      '\treturn base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Overlay(vec3 base, vec3 blend) {\n'
                                      '\treturn '
                                      'vec3(Overlay(base.r,blend.r),Overlay(base.g,blend.g),Overlay(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Overlay(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Overlay(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float HardLight(float base, float blend) {\n'
                                      '\treturn Overlay(blend, base);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 HardLight(vec3 base, vec3 blend) {\n'
                                      '\treturn Overlay(blend, base);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 HardLight(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (HardLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float Lighten(float base, float blend) {\n'
                                      '\treturn max(blend,base);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Lighten(vec3 base, vec3 blend) {\n'
                                      '\treturn '
                                      'vec3(Lighten(base.r,blend.r),Lighten(base.g,blend.g),Lighten(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Lighten(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Lighten(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float LinearBurn(float base, float blend) {\n'
                                      '\treturn max(base+blend-1.0,0.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 LinearBurn(vec3 base, vec3 blend) {\n'
                                      '\treturn max(base+blend-vec3(1.0),vec3(0.0));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 LinearBurn(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (LinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float LinearDodge(float base, float blend) {\n'
                                      '\treturn min(base+blend,1.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 LinearDodge(vec3 base, vec3 blend) {\n'
                                      '\treturn min(base+blend,vec3(1.0));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 LinearDodge(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (LinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float LinearLight(float base, float blend) {\n'
                                      '\treturn blend<0.5?LinearBurn(base,(2.0*blend)):LinearDodge(base,(2.0*(blend-0.5)));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 LinearLight(vec3 base, vec3 blend) {\n'
                                      '\treturn '
                                      'vec3(LinearLight(base.r,blend.r),LinearLight(base.g,blend.g),LinearLight(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 LinearLight(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (LinearLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 Multiply(vec3 base, vec3 blend) {\n'
                                      '\treturn base*blend;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Multiply(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Multiply(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 Negation(vec3 base, vec3 blend) {\n'
                                      '\treturn vec3(1.0)-abs(vec3(1.0)-base-blend);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Negation(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Negation(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 Normal(vec3 base, vec3 blend) {\n'
                                      '\treturn blend;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Normal(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Normal(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float PinLight(float base, float blend) {\n'
                                      '\treturn (blend<0.5)?Darken(base,(2.0*blend)):Lighten(base,(2.0*(blend-0.5)));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 PinLight(vec3 base, vec3 blend) {\n'
                                      '\treturn '
                                      'vec3(PinLight(base.r,blend.r),PinLight(base.g,blend.g),PinLight(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 PinLight(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (PinLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float Screen(float base, float blend) {\n'
                                      '\treturn 1.0-((1.0-base)*(1.0-blend));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Screen(vec3 base, vec3 blend) {\n'
                                      '\treturn vec3(Screen(base.r,blend.r),Screen(base.g,blend.g),Screen(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Screen(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Screen(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float SoftLight(float base, float blend) {\n'
                                      '\treturn '
                                      '(blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 SoftLight(vec3 base, vec3 blend) {\n'
                                      '\treturn '
                                      'vec3(SoftLight(base.r,blend.r),SoftLight(base.g,blend.g),SoftLight(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 SoftLight(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (SoftLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float Subtract(float base, float blend) {\n'
                                      '\treturn max(base+blend-1.0,0.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Subtract(vec3 base, vec3 blend) {\n'
                                      '\treturn max(base+blend-vec3(1.0),vec3(0.0));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 Subtract(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (Subtract(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float VividLight(float base, float blend) {\n'
                                      '\treturn (blend<0.5)?ColorBurn(base,(2.0*blend)):ColorDodge(base,(2.0*(blend-0.5)));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 VividLight(vec3 base, vec3 blend) {\n'
                                      '\treturn '
                                      'vec3(VividLight(base.r,blend.r),VividLight(base.g,blend.g),VividLight(base.b,blend.b));\n'
                                      '}\n'
                                      '\n'
                                      'vec3 VividLight(vec3 base, vec3 blend, float opacity) {\n'
                                      '\treturn (VividLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '#endif /* UUID_d3158955_dd82_3200_9407_bf2b35b2c767 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "utility.glsl"\n'
                                      '#ifndef UUID_6b401f72_8e9e_32ca_aa7f_c719bdc79ecc\n'
                                      '#define UUID_6b401f72_8e9e_32ca_aa7f_c719bdc79ecc\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                      '#define UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                      'layout(std140, binding=0) uniform scene_constants\n'
                                      '{\n'
                                      '    float TIME;\n'
                                      '    float JITTER_FRAME;\n'
                                      '    bool RENDER_SSR;\n'
                                      '    bool RENDER_SSAO;\n'
                                      '    vec2 SCREEN_SIZE;\n'
                                      '    vec2 BACKBUFFER_SIZE;\n'
                                      '    vec2 MOUSE_POS;\n'
                                      '    float DELTA_TIME;\n'
                                      '    int SCENE_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=1) uniform view_constants\n'
                                      '{\n'
                                      '    mat4 VIEW;\n'
                                      '    mat4 INV_VIEW;\n'
                                      '    mat4 VIEW_ORIGIN;\n'
                                      '    mat4 INV_VIEW_ORIGIN;\n'
                                      '    mat4 PROJECTION;\n'
                                      '    mat4 INV_PROJECTION;\n'
                                      '    vec3 CAMERA_POSITION;\n'
                                      '    float VIEW_DUMMY_0;\n'
                                      '    vec2 NEAR_FAR;\n'
                                      '    vec2 JITTER_DELTA;\n'
                                      '    vec2 JITTER_OFFSET;\n'
                                      '    vec2 VIEWCONSTANTS_DUMMY0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=2) uniform view_projection\n'
                                      '{\n'
                                      '    mat4 VIEW_PROJECTION;\n'
                                      '    mat4 PREV_VIEW_PROJECTION;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=3) uniform light_constants\n'
                                      '{\n'
                                      '    mat4 SHADOW_MATRIX;\n'
                                      '    vec3 LIGHT_POSITION;\n'
                                      '    float SHADOW_EXP;\n'
                                      '    vec3 LIGHT_DIRECTION;\n'
                                      '    float SHADOW_BIAS;\n'
                                      '    vec3 LIGHT_COLOR;\n'
                                      '    int SHADOW_SAMPLES;\n'
                                      '};\n'
                                      '\n'
                                      'const int MAX_POINT_LIGHTS = 10;\n'
                                      '\n'
                                      'struct POINT_LIGHT\n'
                                      '{\n'
                                      '    vec3 color;\n'
                                      '    float radius;\n'
                                      '    vec3 pos;\n'
                                      '    float render;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=4) uniform point_light_constants\n'
                                      '{\n'
                                      '    POINT_LIGHT POINT_LIGHTS[MAX_POINT_LIGHTS];\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      'layout(std140, binding=5) uniform particle_common\n'
                                      '{\n'
                                      '    vec3 PARTICLE_COLOR;\n'
                                      '    int PARTICLE_ALIGN_MODE;\n'
                                      '    ivec2 PARTICLE_CELL_COUNT;\n'
                                      '    int PARTICLE_BLEND_MODE;\n'
                                      '    int PARTICLE_COMMON_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=6) uniform particle_infos\n'
                                      '{\n'
                                      '    mat4 PARTICLE_PARENT_MATRIX;\n'
                                      '    vec2 PARTICLE_DELAY;\n'
                                      '    vec2 PARTICLE_LIFE_TIME;\n'
                                      '    vec3 PARTICLE_TRANSFORM_ROTATION_MIN;\n'
                                      '    float PARTICLE_FADE_IN;\n'
                                      '    vec3 PARTICLE_TRANSFORM_ROTATION_MAX;\n'
                                      '    float PARTICLE_FADE_OUT;\n'
                                      '    vec3 PARTICLE_TRANSFORM_SCALE_MIN;\n'
                                      '    float PARTICLE_OPACITY;\n'
                                      '    vec3 PARTICLE_TRANSFORM_SCALE_MAX;\n'
                                      '    bool PARTICLE_ENABLE_VECTOR_FIELD;\n'
                                      '    vec3 PARTICLE_VELOCITY_POSITION_MIN;\n'
                                      '    float PARTICLE_VECTOR_FIELD_STRENGTH;\n'
                                      '    vec3 PARTICLE_VELOCITY_POSITION_MAX;\n'
                                      '    float PARTICLE_VECTOR_FIELD_TIGHTNESS;\n'
                                      '    vec3 PARTICLE_VELOCITY_ROTATION_MIN;\n'
                                      '    uint PARTICLE_MAX_COUNT;\n'
                                      '    vec3 PARTICLE_VELOCITY_ROTATION_MAX;\n'
                                      '    uint PARTICLE_SPAWN_COUNT;\n'
                                      '    vec3 PARTICLE_VELOCITY_SCALE_MIN;\n'
                                      '    float PARTICLE_VELOCITY_STRETCH;\n'
                                      '    vec3 PARTICLE_VELOCITY_SCALE_MAX;\n'
                                      '    float PARTICLE_VELOCITY_ACCELERATION;\n'
                                      '    mat4 PARTICLE_VECTOR_FIELD_MATRIX;\n'
                                      '    mat4 PARTICLE_VECTOR_FIELD_INV_MATRIX;\n'
                                      '    vec3 PARTICLE_SPAWN_VOLUME_INFO;\n'
                                      '    uint PARTICLE_SPAWN_VOLUME_TYPE;\n'
                                      '    mat4 PARTICLE_SPAWN_VOLUME_MATRIX;\n'
                                      '    vec2 PARTICLE_VELOCITY_LIMIT;\n'
                                      '    float PARTICLE_FORCE_GRAVITY;\n'
                                      '    float PARTICLE_PLAY_SPEED;\n'
                                      '    uint PARTICLE_VELOCITY_TYPE;\n'
                                      '    float PARTICLE_FORCE_ELASTICITY;\n'
                                      '    float PARTICLE_FORCE_FRICTION;\n'
                                      '    uint PARTICLE_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'const int BLEND = 0;\n'
                                      'const int ADDITIVE = 1;\n'
                                      'const int MULTIPLY = 2;\n'
                                      'const int SUBTRACT = 3;\n'
                                      '\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '\n'
                                      'const int MAX_BONES_PER_VERTEX = 4;\n'
                                      'const int MAX_BONES = 100;\n'
                                      '\n'
                                      'const float PI = 3.14159265358979323846;\n'
                                      'const float HALF_PI = PI * 0.5;\n'
                                      'const float TWO_PI = PI * 2.0;\n'
                                      'const float deg = PI / 180.0;\n'
                                      '\n'
                                      'const vec3 kSphereCenter = vec3(1.0, 1.0, -2.0);\n'
                                      'const float kSphereRadius = 1.0;\n'
                                      'const vec3 kSphereAlbedo = vec3(0.8);\n'
                                      'const vec3 kGroundAlbedo = vec3(0.0, 0.0, 0.04);\n'
                                      '#endif /* UUID_b3108ea4_a792_314c_8c54_4cca197e27c2 */\n'
                                      '\n'
                                      'const int FilterTypes_Box = 0;\n'
                                      'const int FilterTypes_Triangle = 1;\n'
                                      'const int FilterTypes_Gaussian = 2;\n'
                                      'const int FilterTypes_BlackmanHarris = 3;\n'
                                      'const int FilterTypes_Smoothstep = 4;\n'
                                      'const int FilterTypes_BSpline = 5;\n'
                                      'const int FilterTypes_CatmullRom = 6;\n'
                                      'const int FilterTypes_Mitchell = 7;\n'
                                      'const int FilterTypes_GeneralizedCubic = 8;\n'
                                      'const int FilterTypes_Sinc = 9;\n'
                                      '\n'
                                      '\n'
                                      'float FilterBox(in float x)\n'
                                      '{\n'
                                      '    return x <= 1.0 ? 1.0 : 0.0;\n'
                                      '}\n'
                                      '\n'
                                      'float FilterTriangle(in float x)\n'
                                      '{\n'
                                      '    return clamp(1.0f - x, 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float FilterGaussian(in float x)\n'
                                      '{\n'
                                      '    const float sigma = 0.25;\n'
                                      '    const float g = 1.0f / sqrt(2.0f * 3.14159f * sigma * sigma);\n'
                                      '    return (g * exp(-(x * x) / (2 * sigma * sigma)));\n'
                                      '}\n'
                                      '\n'
                                      'float FilterCubic(in float x, in float B, in float C)\n'
                                      '{\n'
                                      '    float y = 0.0f;\n'
                                      '    float x2 = x * x;\n'
                                      '    float x3 = x * x * x;\n'
                                      '\n'
                                      '    if(x < 1)\n'
                                      '    {\n'
                                      '        y = (12 - 9 * B - 6 * C) * x3 + (-18 + 12 * B + 6 * C) * x2 + (6 - 2 * B);\n'
                                      '    }\n'
                                      '    else if(x <= 2)\n'
                                      '    {\n'
                                      '        y = (-B - 6 * C) * x3 + (6 * B + 30 * C) * x2 + (-12 * B - 48 * C) * x + (8 * B '
                                      '+ 24 * C);\n'
                                      '    }\n'
                                      '\n'
                                      '    return y / 6.0f;\n'
                                      '}\n'
                                      '\n'
                                      'float FilterSinc(in float x, in float filterRadius)\n'
                                      '{\n'
                                      '    float s;\n'
                                      '    x *= filterRadius * 2.0f;\n'
                                      '    if(x < 0.001f)\n'
                                      '        s = 1.0f;\n'
                                      '    else\n'
                                      '        s = sin(x * PI) / (x * PI);\n'
                                      '    return s;\n'
                                      '}\n'
                                      '\n'
                                      'float FilterBlackmanHarris(in float x)\n'
                                      '{\n'
                                      '    x = 1.0f - x;\n'
                                      '    const float a0 = 0.35875f;\n'
                                      '    const float a1 = 0.48829f;\n'
                                      '    const float a2 = 0.14128f;\n'
                                      '    const float a3 = 0.01168f;\n'
                                      '    return clamp(a0 - a1 * cos(PI * x) + a2 * cos(2 * PI * x) - a3 * cos(3 * PI * x), '
                                      '0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float FilterSmoothstep(in float x)\n'
                                      '{\n'
                                      '    return 1.0f - smoothstep(0.0f, 1.0f, x);\n'
                                      '}\n'
                                      '\n'
                                      'float Filter(in float x, in int filterType, in float filterRadius, in bool '
                                      'rescaleCubic)\n'
                                      '{\n'
                                      '    \n'
                                      '    \n'
                                      '    float cubicX = rescaleCubic ? x * 2.0f : x;\n'
                                      '\n'
                                      '    if(filterType == FilterTypes_Box)\n'
                                      '        return FilterBox(x);\n'
                                      '    else if(filterType == FilterTypes_Triangle)\n'
                                      '        return FilterTriangle(x);\n'
                                      '    else if(filterType == FilterTypes_Gaussian)\n'
                                      '        return FilterGaussian(x);\n'
                                      '    else if(filterType == FilterTypes_BlackmanHarris)\n'
                                      '        return FilterBlackmanHarris(x);\n'
                                      '    else if(filterType == FilterTypes_Smoothstep)\n'
                                      '        return FilterSmoothstep(x);\n'
                                      '    else if(filterType == FilterTypes_BSpline)\n'
                                      '        return FilterCubic(cubicX, 1.0, 0.0f);\n'
                                      '    else if(filterType == FilterTypes_CatmullRom)\n'
                                      '        return FilterCubic(cubicX, 0, 0.5f);\n'
                                      '    else if(filterType == FilterTypes_Mitchell)\n'
                                      '        return FilterCubic(cubicX, 1 / 3.0f, 1 / 3.0f);\n'
                                      '    else if(filterType == FilterTypes_GeneralizedCubic)\n'
                                      '        return FilterCubic(cubicX, 0.33, 0.33);\n'
                                      '    else if(filterType == FilterTypes_Sinc)\n'
                                      '        return FilterSinc(x, filterRadius);\n'
                                      '    else\n'
                                      '        return 1.0f;\n'
                                      '}\n'
                                      '\n'
                                      'float saturate(float value) { return clamp(value, 0.0, 1.0); }\n'
                                      'vec2 saturate(vec2 value) { return clamp(value, 0.0, 1.0); }\n'
                                      'vec3 saturate(vec3 value) { return clamp(value, 0.0, 1.0); }\n'
                                      'vec4 saturate(vec4 value) { return clamp(value, 0.0, 1.0); }\n'
                                      '\n'
                                      'float get_luminance(vec3 color)\n'
                                      '{\n'
                                      '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float depth_to_linear_depth(float depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    depth = depth * 2.0 - 1.0;\n'
                                      '    \n'
                                      '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float linear_depth_to_depth(float linear_depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                      '    \n'
                                      '    return depth * 0.5 + 0.5;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 linear_depth_to_depth(vec4 linear_depth)\n'
                                      '{\n'
                                      '    const vec4 zNear = NEAR_FAR.xxxx;\n'
                                      '    const vec4 zFar = NEAR_FAR.yyyy;\n'
                                      '    vec4 depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                      '    return depth * 0.5 + 0.5;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                      '{\n'
                                      '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                      '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                      '    relative_pos /= relative_pos.w;\n'
                                      '    return relative_pos;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                      '{\n'
                                      '    \n'
                                      '    float depth = linear_depth_to_depth(linear_depth);\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    return depth_to_relative_world(tex_coord, depth);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float PseudoRandom(vec2 xy)\n'
                                      '{\n'
                                      '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                      '\n'
                                      '    \n'
                                      '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                      '}\n'
                                      '\n'
                                      'float rand(vec2 co){\n'
                                      '    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n'
                                      '}\n'
                                      '\n'
                                      'float rand3(vec3 uvw, float scale)\n'
                                      '{\n'
                                      '\treturn fract(sin(dot(uvw, vec3(12.9898, 78.233, 45.164))) * 43758.5453123);\n'
                                      '}\n'
                                      '\n'
                                      'float rand4(vec4 seed4){\n'
                                      '    return fract(sin(dot(seed4, vec4(12.9898, 78.233, 45.164, 94.673))) * '
                                      '43758.5453123);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec4 generate_random(float random_seed)\n'
                                      '{\n'
                                      '    vec4 random_factor;\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_seed));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                      '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                      '    return random_factor;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random1(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.w = random_factor.x;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random2(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.w = random_factor.y;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random3(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                      '    random_factor.w = random_factor.z;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random4(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                      '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 invert_y(vec3 vector)\n'
                                      '{\n'
                                      '    return vec3(vector.x, -vector.y, vector.z);\n'
                                      '}\n'
                                      '\n'
                                      'float safe_atan(float y, float x)\n'
                                      '{\n'
                                      '    return mod(atan(y, x), TWO_PI);\n'
                                      '}\n'
                                      '\n'
                                      'vec2 safe_normalize(vec2 vector)\n'
                                      '{\n'
                                      '    float dist = length(vector);\n'
                                      '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 safe_normalize(vec3 vector)\n'
                                      '{\n'
                                      '    float dist = length(vector);\n'
                                      '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                      '}\n'
                                      '\n'
                                      'vec4 safe_normalize(vec4 vector)\n'
                                      '{\n'
                                      '    float dist = length(vector);\n'
                                      '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                      '}\n'
                                      '#endif /* UUID_6b401f72_8e9e_32ca_aa7f_c719bdc79ecc */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/atmosphere_predefine.glsl"\n'
                                      '#ifndef UUID_cc4e9014_7fb8_3f2b_a4a9_1eff5a15df7d\n'
                                      '#define UUID_cc4e9014_7fb8_3f2b_a4a9_1eff5a15df7d\n'
                                      'const int TRANSMITTANCE_TEXTURE_WIDTH = 256;\n'
                                      'const int TRANSMITTANCE_TEXTURE_HEIGHT = 64;\n'
                                      'const int SCATTERING_TEXTURE_R_SIZE = 32;\n'
                                      'const int SCATTERING_TEXTURE_MU_SIZE = 128;\n'
                                      'const int SCATTERING_TEXTURE_MU_S_SIZE = 32;\n'
                                      'const int SCATTERING_TEXTURE_NU_SIZE = 8;\n'
                                      'const int IRRADIANCE_TEXTURE_WIDTH = 64;\n'
                                      'const int IRRADIANCE_TEXTURE_HEIGHT = 16;\n'
                                      'const vec2 IRRADIANCE_TEXTURE_SIZE = vec2(64, 16);\n'
                                      '\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/definitions.glsl"\n'
                                      '#ifndef UUID_1e1e1296_82f1_3b3b_b18c_5a0495e2ee50\n'
                                      '#define UUID_1e1e1296_82f1_3b3b_b18c_5a0495e2ee50\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                      '#define UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_b3108ea4_a792_314c_8c54_4cca197e27c2 */\n'
                                      '\n'
                                      '\n'
                                      'uniform vec3 earth_center;\n'
                                      'uniform vec2 sun_size;\n'
                                      'uniform float atmosphere_exposure;\n'
                                      'uniform bool render_light_probe_mode;\n'
                                      '\n'
                                      'uniform sampler2D transmittance_texture;\n'
                                      'uniform sampler2D irradiance_texture;\n'
                                      'uniform sampler3D scattering_texture;\n'
                                      'uniform sampler3D single_mie_scattering_texture;\n'
                                      'uniform sampler3D single_rayleigh_scattering_texture;\n'
                                      'uniform sampler3D scattering_density_texture;\n'
                                      'uniform sampler3D multiple_scattering_texture;\n'
                                      '\n'
                                      '\n'
                                      'uniform vec3 SKY_RADIANCE_TO_LUMINANCE;\n'
                                      'uniform vec3 SUN_RADIANCE_TO_LUMINANCE;\n'
                                      '\n'
                                      'const float atmosphere_ratio = 0.1;\n'
                                      '\n'
                                      'struct DensityProfileLayer\n'
                                      '{\n'
                                      '    float width;\n'
                                      '    float exp_term;\n'
                                      '    float exp_scale;\n'
                                      '    float linear_term;\n'
                                      '    float constant_term;\n'
                                      '};\n'
                                      '\n'
                                      'struct DensityProfile\n'
                                      '{\n'
                                      '    DensityProfileLayer layers[2];\n'
                                      '};\n'
                                      '\n'
                                      'struct AtmosphereParameters\n'
                                      '{\n'
                                      '    vec3 solar_irradiance;\n'
                                      '    float sun_angular_radius;\n'
                                      '    float bottom_radius;\n'
                                      '    float top_radius;\n'
                                      '    DensityProfile rayleigh_density;\n'
                                      '    vec3 rayleigh_scattering;\n'
                                      '    DensityProfile mie_density;\n'
                                      '    vec3 mie_scattering;\n'
                                      '    vec3 mie_extinction;\n'
                                      '    float mie_phase_function_g;\n'
                                      '    DensityProfile absorption_density;\n'
                                      '    vec3 absorption_extinction;\n'
                                      '    vec3 ground_albedo;\n'
                                      '    float mu_s_min;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      'float ClampCosine(float mu)\n'
                                      '{\n'
                                      '    return clamp(mu, -1.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float ClampDistance(float d)\n'
                                      '{\n'
                                      '    return max(d, 0.0);\n'
                                      '}\n'
                                      '\n'
                                      'float ClampRadius(const in AtmosphereParameters atmosphere, float r)\n'
                                      '{\n'
                                      '    return clamp(r, atmosphere.bottom_radius, atmosphere.top_radius);\n'
                                      '}\n'
                                      '\n'
                                      'float SafeSqrt(float a)\n'
                                      '{\n'
                                      '    return sqrt(max(a, 0.0));\n'
                                      '}\n'
                                      '\n'
                                      'float DistanceToTopAtmosphereBoundary(const in AtmosphereParameters atmosphere, float '
                                      'r, float mu)\n'
                                      '{\n'
                                      '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.top_radius * '
                                      'atmosphere.top_radius;\n'
                                      '    return ClampDistance(-r * mu + SafeSqrt(discriminant));\n'
                                      '}\n'
                                      '\n'
                                      'float DistanceToBottomAtmosphereBoundary(const in AtmosphereParameters atmosphere, '
                                      'float r, float mu)\n'
                                      '{\n'
                                      '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '    return ClampDistance(-r * mu - SafeSqrt(discriminant));\n'
                                      '}\n'
                                      '\n'
                                      'bool RayIntersectsGround(const in AtmosphereParameters atmosphere, float r, float mu)\n'
                                      '{\n'
                                      '    if(mu < 0.0)\n'
                                      '    {\n'
                                      '        float result = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '        if(0.0 <= result)\n'
                                      '        {\n'
                                      '            return true;\n'
                                      '        }\n'
                                      '    }\n'
                                      '    return false;\n'
                                      '}\n'
                                      '\n'
                                      'float GetLayerDensity(const in DensityProfileLayer layer, float altitude)\n'
                                      '{\n'
                                      '    float density =\n'
                                      '        layer.exp_term * exp(layer.exp_scale * altitude) + layer.linear_term * altitude '
                                      '+ layer.constant_term;\n'
                                      '    return clamp(density, 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float GetProfileDensity(const in DensityProfile profile, float altitude)\n'
                                      '{\n'
                                      '    return altitude < profile.layers[0].width ?\n'
                                      '        GetLayerDensity(profile.layers[0], altitude) : '
                                      'GetLayerDensity(profile.layers[1], altitude);\n'
                                      '}\n'
                                      '\n'
                                      'float ComputeOpticalLengthToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in DensityProfile profile,\n'
                                      '    float r,\n'
                                      '    float mu)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 500;\n'
                                      '    float dx = DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / '
                                      'float(SAMPLE_COUNT);\n'
                                      '    float result = 0.0;\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);\n'
                                      '        float y_i = GetProfileDensity(profile, r_i - atmosphere.bottom_radius);\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        result += y_i * weight_i * dx;\n'
                                      '    }\n'
                                      '    return result;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeTransmittanceToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu)\n'
                                      '{\n'
                                      '    return exp(-(\n'
                                      '        atmosphere.rayleigh_scattering *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.rayleigh_density, r, mu) +\n'
                                      '        atmosphere.mie_extinction *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.mie_density, r, mu) +\n'
                                      '        atmosphere.absorption_extinction *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.absorption_density, r, mu)));\n'
                                      '}\n'
                                      '\n'
                                      'float GetTextureCoordFromUnitRange(float x, int texture_size)\n'
                                      '{\n'
                                      '    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));\n'
                                      '}\n'
                                      '\n'
                                      'float GetUnitRangeFromTextureCoord(float u, int texture_size)\n'
                                      '{\n'
                                      '    return (u - 0.5 / float(texture_size)) / (1.0 - 1.0 / float(texture_size));\n'
                                      '}\n'
                                      '\n'
                                      'vec2 GetTransmittanceTextureUvFromRMu(const in AtmosphereParameters atmosphere, float '
                                      'r, float mu)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                      '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float d = DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '    float d_min = atmosphere.top_radius - r;\n'
                                      '    float d_max = rho + H;\n'
                                      '    float x_mu = (d - d_min) / (d_max - d_min);\n'
                                      '    float x_r = rho / H;\n'
                                      '    return vec2(GetTextureCoordFromUnitRange(x_mu, TRANSMITTANCE_TEXTURE_WIDTH),\n'
                                      '              GetTextureCoordFromUnitRange(x_r, TRANSMITTANCE_TEXTURE_HEIGHT));\n'
                                      '}\n'
                                      '\n'
                                      'void GetRMuFromTransmittanceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 uv, out float r, out float mu)\n'
                                      '{\n'
                                      '    float x_mu = GetUnitRangeFromTextureCoord(uv.x, TRANSMITTANCE_TEXTURE_WIDTH);\n'
                                      '    float x_r = GetUnitRangeFromTextureCoord(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                      '\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                      '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '\n'
                                      '    float rho = H * x_r;\n'
                                      '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float d_min = atmosphere.top_radius - r;\n'
                                      '    float d_max = rho + H;\n'
                                      '    float d = d_min + x_mu * (d_max - d_min);\n'
                                      '    mu = (d == 0.0) ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);\n'
                                      '    mu = ClampCosine(mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeTransmittanceToTopAtmosphereBoundarytexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 gl_frag_coord)\n'
                                      '{\n'
                                      '    const vec2 TRANSMITTANCE_TEXTURE_SIZE = vec2(TRANSMITTANCE_TEXTURE_WIDTH, '
                                      'TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    GetRMuFromTransmittanceTextureUv(atmosphere, gl_frag_coord / '
                                      'TRANSMITTANCE_TEXTURE_SIZE, r, mu);\n'
                                      '    return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittanceToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r, float mu)\n'
                                      '{\n'
                                      '    vec2 uv = GetTransmittanceTextureUvFromRMu(atmosphere, r, mu);\n'
                                      '    return vec3(texture2D(transmittance_texture, uv));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float d,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_d = ClampCosine((r * mu + d) / r_d);\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        return min(\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r_d, -mu_d) /\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, -mu),\n'
                                      '            vec3(1.0));\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        return min(\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, mu) /\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r_d, mu_d),\n'
                                      '            vec3(1.0));\n'
                                      '    }\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittanceToSun(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    float sin_theta_h = atmosphere.bottom_radius / r;\n'
                                      '    float cos_theta_h = -sqrt(max(1.0 - sin_theta_h * sin_theta_h, 0.0));\n'
                                      '    return GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, mu_s) *\n'
                                      '      smoothstep(-sin_theta_h * atmosphere.sun_angular_radius,\n'
                                      '                 sin_theta_h * atmosphere.sun_angular_radius,\n'
                                      '                 mu_s - cos_theta_h);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScatteringIntegrand(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    float d,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 rayleigh,\n'
                                      '    out vec3 mie)\n'
                                      '{\n'
                                      '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_s_d = ClampCosine((r * mu_s + d * nu) / r_d);\n'
                                      '    vec3 transmittance =\n'
                                      '        GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                      'ray_r_mu_intersects_ground) *\n'
                                      '        GetTransmittanceToSun(atmosphere, transmittance_texture, r_d, mu_s_d);\n'
                                      '    rayleigh = transmittance * GetProfileDensity(atmosphere.rayleigh_density, r_d - '
                                      'atmosphere.bottom_radius);\n'
                                      '    mie = transmittance * GetProfileDensity(atmosphere.mie_density, r_d - '
                                      'atmosphere.bottom_radius);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float DistanceToNearestAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        return DistanceToBottomAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '    }\n'
                                      '    return DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 rayleigh,\n'
                                      '    out vec3 mie)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 50;\n'
                                      '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                      'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                      '\n'
                                      '    vec3 rayleigh_sum = vec3(0.0);\n'
                                      '    vec3 mie_sum = vec3(0.0);\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        vec3 rayleigh_i;\n'
                                      '        vec3 mie_i;\n'
                                      '        ComputeSingleScatteringIntegrand(\n'
                                      '            atmosphere, transmittance_texture, r, mu, mu_s, nu, d_i, '
                                      'ray_r_mu_intersects_ground, rayleigh_i, mie_i);\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        rayleigh_sum += rayleigh_i * weight_i;\n'
                                      '        mie_sum += mie_i * weight_i;\n'
                                      '    }\n'
                                      '    rayleigh = rayleigh_sum * dx * atmosphere.solar_irradiance * '
                                      'atmosphere.rayleigh_scattering;\n'
                                      '    mie = mie_sum * dx * atmosphere.solar_irradiance * atmosphere.mie_scattering;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float RayleighPhaseFunction(float nu)\n'
                                      '{\n'
                                      '    float k = 3.0 / (16.0 * PI);\n'
                                      '    return k * (1.0 + nu * nu);\n'
                                      '}\n'
                                      '\n'
                                      'float MiePhaseFunction(float g, float nu)\n'
                                      '{\n'
                                      '    float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);\n'
                                      '    return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec4 GetScatteringTextureUvwzFromRMuMuSNu(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                      'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float u_r = GetTextureCoordFromUnitRange(rho / H, SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    float r_mu = r * mu;\n'
                                      '    float discriminant = r_mu * r_mu - r * r + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '    float u_mu;\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        float d = -r_mu - SafeSqrt(discriminant);\n'
                                      '        float d_min = r - atmosphere.bottom_radius;\n'
                                      '        float d_max = rho;\n'
                                      '        u_mu = 0.5 - 0.5 * GetTextureCoordFromUnitRange(\n'
                                      '            d_max == d_min ? 0.0 : (d - d_min) / (d_max - d_min), '
                                      'SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d = -r_mu + SafeSqrt(discriminant + H * H);\n'
                                      '        float d_min = atmosphere.top_radius - r;\n'
                                      '        float d_max = rho + H;\n'
                                      '        u_mu = 0.5 + 0.5 * GetTextureCoordFromUnitRange(\n'
                                      '            (d - d_min) / (d_max - d_min), SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                      '    }\n'
                                      '\n'
                                      '    float d = DistanceToTopAtmosphereBoundary(atmosphere, atmosphere.bottom_radius, '
                                      'mu_s);\n'
                                      '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                      '    float d_max = H;\n'
                                      '    float a = (d - d_min) / (d_max - d_min);\n'
                                      '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                      '    float u_mu_s = GetTextureCoordFromUnitRange(max(1.0 - a / A, 0.0) / (1.0 + a), '
                                      'SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                      '    float u_nu = (nu + 1.0) / 2.0;\n'
                                      '    return vec4(u_nu, u_mu_s, u_mu, u_r);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuMuSNuFromScatteringTextureUvwz(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec4 uvwz,\n'
                                      '    out float r,\n'
                                      '    out float mu,\n'
                                      '    out float mu_s,\n'
                                      '    out float nu,\n'
                                      '    out bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                      'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = H * GetUnitRangeFromTextureCoord(uvwz.w, SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    if (uvwz.z < 0.5)\n'
                                      '    {\n'
                                      '        float d_min = r - atmosphere.bottom_radius;\n'
                                      '        float d_max = rho;\n'
                                      '        float d = d_min + (d_max - d_min) *\n'
                                      '            GetUnitRangeFromTextureCoord(1.0 - 2.0 * uvwz.z, SCATTERING_TEXTURE_MU_SIZE '
                                      '/ 2);\n'
                                      '        mu = (d == 0.0) ? -1.0 : ClampCosine(-(rho * rho + d * d) / (2.0 * r * d));\n'
                                      '        ray_r_mu_intersects_ground = true;\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d_min = atmosphere.top_radius - r;\n'
                                      '        float d_max = rho + H;\n'
                                      '        float d = d_min + (d_max - d_min) *\n'
                                      '            GetUnitRangeFromTextureCoord(2.0 * uvwz.z - 1.0, SCATTERING_TEXTURE_MU_SIZE '
                                      '/ 2);\n'
                                      '        mu = (d == 0.0) ? 1.0 : ClampCosine((H * H - rho * rho - d * d) / (2.0 * r * '
                                      'd));\n'
                                      '        ray_r_mu_intersects_ground = false;\n'
                                      '    }\n'
                                      '\n'
                                      '    float x_mu_s = GetUnitRangeFromTextureCoord(uvwz.y, SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                      '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                      '    float d_max = H;\n'
                                      '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                      '    float a = (A - x_mu_s * A) / (1.0 + x_mu_s * A);\n'
                                      '    float d = d_min + min(a, A) * (d_max - d_min);\n'
                                      '    mu_s = (d == 0.0) ? 1.0 : ClampCosine((H * H - d * d) / (2.0 * '
                                      'atmosphere.bottom_radius * d));\n'
                                      '    nu = ClampCosine(uvwz.x * 2.0 - 1.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuMuSNuFromScatteringTextureFragCoord(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec3 gl_frag_coord,\n'
                                      '    out float r,\n'
                                      '    out float mu,\n'
                                      '    out float mu_s,\n'
                                      '    out float nu,\n'
                                      '    out bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    const vec4 SCATTERING_TEXTURE_SIZE = vec4(\n'
                                      '        SCATTERING_TEXTURE_NU_SIZE - 1,\n'
                                      '        SCATTERING_TEXTURE_MU_S_SIZE,\n'
                                      '        SCATTERING_TEXTURE_MU_SIZE,\n'
                                      '        SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    float frag_coord_nu = floor(gl_frag_coord.x / '
                                      'float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                      '    float frag_coord_mu_s = mod(gl_frag_coord.x, float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                      '    vec4 uvwz = vec4(frag_coord_nu, frag_coord_mu_s, gl_frag_coord.y, gl_frag_coord.z) '
                                      '/ SCATTERING_TEXTURE_SIZE;\n'
                                      '    GetRMuMuSNuFromScatteringTextureUvwz(atmosphere, uvwz, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    nu = clamp(\n'
                                      '        nu,\n'
                                      '        mu * mu_s - sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)),\n'
                                      '        mu * mu_s + sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScatteringtexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in vec3 gl_frag_coord,\n'
                                      '    out vec3 rayleigh, out vec3 mie)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    float nu;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground);\n'
                                      '    ComputeSingleScattering(atmosphere, transmittance_texture,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                      '    float tex_x = floor(tex_coord_x);\n'
                                      '    float lerp = tex_coord_x - tex_x;\n'
                                      '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                      'uvwz.w);\n'
                                      '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), '
                                      'uvwz.z, uvwz.w);\n'
                                      '    return vec3(\n'
                                      '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                      'texture3D(scattering_texture, uvw1) * lerp);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    int scattering_order)\n'
                                      '{\n'
                                      '    if (scattering_order == 1)\n'
                                      '    {\n'
                                      '        vec3 rayleigh = GetScattering(\n'
                                      '            atmosphere, single_rayleigh_scattering_texture, r, mu, mu_s, nu,\n'
                                      '            ray_r_mu_intersects_ground);\n'
                                      '        vec3 mie = GetScattering(\n'
                                      '            atmosphere, single_mie_scattering_texture, r, mu, mu_s, nu,\n'
                                      '            ray_r_mu_intersects_ground);\n'
                                      '\n'
                                      '        return rayleigh * RayleighPhaseFunction(nu) + mie * '
                                      'MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '    }\n'
                                      '\n'
                                      '    return GetScattering(atmosphere, multiple_scattering_texture, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r, float mu_s);\n'
                                      '\n'
                                      'vec3 ComputeScatteringDensity(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r, float mu, float mu_s, float nu, int scattering_order)\n'
                                      '{\n'
                                      '    vec3 zenith_direction = vec3(0.0, 0.0, 1.0);\n'
                                      '    vec3 omega = vec3(sqrt(1.0 - mu * mu), 0.0, mu);\n'
                                      '    float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;\n'
                                      '    float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));\n'
                                      '    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, mu_s);\n'
                                      '\n'
                                      '    const int SAMPLE_COUNT = 16;\n'
                                      '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                      '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                      '    vec3 rayleigh_mie = vec3(0.0);\n'
                                      '\n'
                                      '    for (int l = 0; l < SAMPLE_COUNT; ++l)\n'
                                      '    {\n'
                                      '        float theta = (float(l) + 0.5) * dtheta;\n'
                                      '        float cos_theta = cos(theta);\n'
                                      '        float sin_theta = sin(theta);\n'
                                      '        bool ray_r_theta_intersects_ground = RayIntersectsGround(atmosphere, r, '
                                      'cos_theta);\n'
                                      '\n'
                                      '        float distance_to_ground = 0.0;\n'
                                      '        vec3 transmittance_to_ground = vec3(0.0);\n'
                                      '        vec3 ground_albedo = vec3(0.0);\n'
                                      '        if (ray_r_theta_intersects_ground)\n'
                                      '        {\n'
                                      '            distance_to_ground = DistanceToBottomAtmosphereBoundary(atmosphere, r, '
                                      'cos_theta);\n'
                                      '            transmittance_to_ground = GetTransmittance(atmosphere, '
                                      'transmittance_texture, r, cos_theta, distance_to_ground, true );\n'
                                      '            ground_albedo = atmosphere.ground_albedo;\n'
                                      '        }\n'
                                      '\n'
                                      '        for (int m = 0; m < 2 * SAMPLE_COUNT; ++m)\n'
                                      '        {\n'
                                      '            float phi = 1.5 * dphi;\n'
                                      '            vec3 omega_i = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, '
                                      'cos_theta);\n'
                                      '            float domega_i = dtheta * dphi * sin(theta);\n'
                                      '\n'
                                      '            float nu1 = dot(omega_s, omega_i);\n'
                                      '            vec3 incident_radiance = GetScattering(atmosphere,\n'
                                      '                single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                      '                multiple_scattering_texture, r, omega_i.z, mu_s, nu1,\n'
                                      '                ray_r_theta_intersects_ground, scattering_order - 1);\n'
                                      '\n'
                                      '            vec3 ground_normal = normalize(zenith_direction * r + omega_i * '
                                      'distance_to_ground);\n'
                                      '            vec3 ground_irradiance = GetIrradiance(\n'
                                      '                atmosphere, irradiance_texture, atmosphere.bottom_radius,\n'
                                      '                dot(ground_normal, omega_s));\n'
                                      '            incident_radiance += transmittance_to_ground * ground_albedo * (1.0 / (PI)) '
                                      '* ground_irradiance;\n'
                                      '\n'
                                      '            float nu2 = dot(omega, omega_i);\n'
                                      '            float rayleigh_density = GetProfileDensity(\n'
                                      '                atmosphere.rayleigh_density, r - atmosphere.bottom_radius);\n'
                                      '            float mie_density = GetProfileDensity(\n'
                                      '                atmosphere.mie_density, r - atmosphere.bottom_radius);\n'
                                      '            rayleigh_mie += incident_radiance *\n'
                                      '                (atmosphere.rayleigh_scattering * rayleigh_density * '
                                      'RayleighPhaseFunction(nu2) +\n'
                                      '                atmosphere.mie_scattering * mie_density *\n'
                                      '                MiePhaseFunction(atmosphere.mie_phase_function_g, nu2)) * domega_i;\n'
                                      '        }\n'
                                      '    }\n'
                                      '    return rayleigh_mie;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeMultipleScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_density_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 50;\n'
                                      '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                      'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                      '    vec3 rayleigh_mie_sum = vec3(0.0);\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        float r_i = ClampRadius(atmosphere, sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * '
                                      'r));\n'
                                      '        float mu_i = ClampCosine((r * mu + d_i) / r_i);\n'
                                      '        float mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);\n'
                                      '        vec3 rayleigh_mie_i =\n'
                                      '            GetScattering(atmosphere, scattering_density_texture, r_i, mu_i, mu_s_i, '
                                      'nu, ray_r_mu_intersects_ground) *\n'
                                      '            GetTransmittance(atmosphere, transmittance_texture, r, mu, d_i, '
                                      'ray_r_mu_intersects_ground) * dx;\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        rayleigh_mie_sum += rayleigh_mie_i * weight_i;\n'
                                      '    }\n'
                                      '    return rayleigh_mie_sum;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeScatteringDensitytexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    const in vec3 gl_frag_coord, int scattering_order)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    float nu;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, '
                                      'nu, ray_r_mu_intersects_ground);\n'
                                      '    return ComputeScatteringDensity(atmosphere, transmittance_texture,\n'
                                      '        single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                      '        multiple_scattering_texture, irradiance_texture, r, mu, mu_s, nu,\n'
                                      '        scattering_order);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeMultipleScatteringtexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_density_texture,\n'
                                      '    const in vec3 gl_frag_coord, out float nu)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, '
                                      'nu, ray_r_mu_intersects_ground);\n'
                                      '    return ComputeMultipleScattering(atmosphere, transmittance_texture,\n'
                                      '        scattering_density_texture, r, mu, mu_s, nu,\n'
                                      '        ray_r_mu_intersects_ground);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeDirectIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    float alpha_s = atmosphere.sun_angular_radius;\n'
                                      '    float average_cosine_factor = 0.0;\n'
                                      '    if(-alpha_s <= mu_s)\n'
                                      '    {\n'
                                      '        if(mu_s <= alpha_s)\n'
                                      '        {\n'
                                      '            average_cosine_factor = (mu_s + alpha_s) * (mu_s + alpha_s) / (4.0 * '
                                      'alpha_s);\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            average_cosine_factor = mu_s;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    return atmosphere.solar_irradiance *\n'
                                      '        GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                      'mu_s) * average_cosine_factor;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeIndirectIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s,\n'
                                      '    int scattering_order)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 32;\n'
                                      '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                      '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                      '\n'
                                      '    vec3 result = vec3(0.0);\n'
                                      '    vec3 omega_s = vec3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);\n'
                                      '    for (int j = 0; j < SAMPLE_COUNT / 2; ++j)\n'
                                      '    {\n'
                                      '        float theta = (float(j) + 0.5) * dtheta;\n'
                                      '        for (int i = 0; i < 2 * SAMPLE_COUNT; ++i)\n'
                                      '        {\n'
                                      '            float phi = (float(i) + 0.5) * dphi;\n'
                                      '            vec3 omega = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), '
                                      'cos(theta));\n'
                                      '            float domega = dtheta * dphi * sin(theta);\n'
                                      '            float nu = dot(omega, omega_s);\n'
                                      '            result += GetScattering(\n'
                                      '                atmosphere,\n'
                                      '                single_rayleigh_scattering_texture,\n'
                                      '                single_mie_scattering_texture,\n'
                                      '                multiple_scattering_texture,\n'
                                      '                r, omega.z, mu_s, nu, false, scattering_order) * omega.z * domega;\n'
                                      '        }\n'
                                      '    }\n'
                                      '  return result;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec2 GetIrradianceTextureUvFromRMuS(const in AtmosphereParameters atmosphere, float r, '
                                      'float mu_s)\n'
                                      '{\n'
                                      '    float x_r = (r - atmosphere.bottom_radius) / (atmosphere.top_radius - '
                                      'atmosphere.bottom_radius);\n'
                                      '    float x_mu_s = mu_s * 0.5 + 0.5;\n'
                                      '    return vec2(GetTextureCoordFromUnitRange(x_mu_s, IRRADIANCE_TEXTURE_WIDTH),\n'
                                      '                GetTextureCoordFromUnitRange(x_r, IRRADIANCE_TEXTURE_HEIGHT));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuSFromIrradianceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 uv, out float r, out float mu_s)\n'
                                      '{\n'
                                      '    float x_mu_s = GetUnitRangeFromTextureCoord(uv.x, IRRADIANCE_TEXTURE_WIDTH);\n'
                                      '    float x_r = GetUnitRangeFromTextureCoord(uv.y, IRRADIANCE_TEXTURE_HEIGHT);\n'
                                      '    r = atmosphere.bottom_radius + x_r * (atmosphere.top_radius - '
                                      'atmosphere.bottom_radius);\n'
                                      '    mu_s = ClampCosine(2.0 * x_mu_s - 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ComputeDirectIrradiancetexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in vec2 gl_frag_coord)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu_s;\n'
                                      '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                      'r, mu_s);\n'
                                      '    return ComputeDirectIrradiance(atmosphere, transmittance_texture, r, mu_s);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeIndirectIrradiancetexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in vec2 gl_frag_coord, int scattering_order)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu_s;\n'
                                      '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                      'r, mu_s);\n'
                                      '    return ComputeIndirectIrradiance(atmosphere, single_rayleigh_scattering_texture, '
                                      'single_mie_scattering_texture,\n'
                                      '        multiple_scattering_texture, r, mu_s, scattering_order);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    vec2 uv = GetIrradianceTextureUvFromRMuS(atmosphere, r, mu_s);\n'
                                      '    return vec3(texture2D(irradiance_texture, uv));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      'vec3 GetExtrapolatedSingleMieScattering(const in AtmosphereParameters atmosphere, const '
                                      'in vec4 scattering)\n'
                                      '{\n'
                                      '    if (scattering.r == 0.0)\n'
                                      '    {\n'
                                      '        return vec3(0.0);\n'
                                      '    }\n'
                                      '    return scattering.rgb * scattering.a / scattering.r *\n'
                                      '        (atmosphere.rayleigh_scattering.r / atmosphere.mie_scattering.r) *\n'
                                      '        (atmosphere.mie_scattering / atmosphere.rayleigh_scattering);\n'
                                      '}\n'
                                      '#endif\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetCombinedScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 single_mie_scattering)\n'
                                      '{\n'
                                      '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                      '    float tex_x = floor(tex_coord_x);\n'
                                      '    float lerp = tex_coord_x - tex_x;\n'
                                      '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                      'uvwz.w);\n'
                                      '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), '
                                      'uvwz.z, uvwz.w);\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '    vec4 combined_scattering =\n'
                                      '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                      'texture3D(scattering_texture, uvw1) * lerp;\n'
                                      '    vec3 scattering = vec3(combined_scattering.xyz);\n'
                                      '    single_mie_scattering = GetExtrapolatedSingleMieScattering(atmosphere, '
                                      'combined_scattering);\n'
                                      '#else\n'
                                      '#endif\n'
                                      '    return scattering;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeSkyRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    vec3 camera, const in vec3 view_ray, float shadow_length,\n'
                                      '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    float r = length(camera);\n'
                                      '    float rmu = dot(camera, view_ray);\n'
                                      '    float distance_to_top_atmosphere_boundary = -rmu -\n'
                                      '        sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                      '\n'
                                      '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                      '    {\n'
                                      '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                      '        r = atmosphere.top_radius;\n'
                                      '        rmu += distance_to_top_atmosphere_boundary;\n'
                                      '    }\n'
                                      '    else if(r > atmosphere.top_radius)\n'
                                      '    {\n'
                                      '        transmittance = vec3(1.0);\n'
                                      '        return vec3(0.0);\n'
                                      '    }\n'
                                      '\n'
                                      '    float mu = rmu / r;\n'
                                      '    float mu_s = dot(camera, sun_direction) / r;\n'
                                      '    float nu = dot(view_ray, sun_direction);\n'
                                      '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                      '\n'
                                      '    transmittance = ray_r_mu_intersects_ground ?\n'
                                      '        vec3(0.0) : GetTransmittanceToTopAtmosphereBoundary(atmosphere, '
                                      'transmittance_texture, r, mu);\n'
                                      '    vec3 single_mie_scattering;\n'
                                      '    vec3 scattering;\n'
                                      '    if (shadow_length == 0.0)\n'
                                      '    {\n'
                                      '        scattering = GetCombinedScattering(\n'
                                      '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '            r, mu, mu_s, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d = shadow_length;\n'
                                      '        float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '        float mu_p = (r * mu + d) / r_p;\n'
                                      '        float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                      '\n'
                                      '        scattering = GetCombinedScattering(\n'
                                      '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '            r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                      '        vec3 shadow_transmittance =\n'
                                      '            GetTransmittance(atmosphere, transmittance_texture, r, mu, shadow_length, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '        scattering = scattering * shadow_transmittance;\n'
                                      '        single_mie_scattering = single_mie_scattering * shadow_transmittance;\n'
                                      '    }\n'
                                      '\n'
                                      '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                      '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeSkyRadianceToPoint(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    vec3 camera, const in vec3 point, float shadow_length,\n'
                                      '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    vec3 view_ray = normalize(point - camera);\n'
                                      '    float r = length(camera);\n'
                                      '    float rmu = dot(camera, view_ray);\n'
                                      '    float distance_to_top_atmosphere_boundary =\n'
                                      '        -rmu - sqrt(rmu * rmu - r * r + atmosphere.top_radius * '
                                      'atmosphere.top_radius);\n'
                                      '\n'
                                      '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                      '    {\n'
                                      '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                      '        r = atmosphere.top_radius;\n'
                                      '        rmu += distance_to_top_atmosphere_boundary;\n'
                                      '    }\n'
                                      '\n'
                                      '    float mu = rmu / r;\n'
                                      '    float mu_s = dot(camera, sun_direction) / r;\n'
                                      '    float nu = dot(view_ray, sun_direction);\n'
                                      '    float d = length(point - camera);\n'
                                      '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                      '\n'
                                      '    transmittance = GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '\n'
                                      '    vec3 single_mie_scattering;\n'
                                      '    vec3 scattering = GetCombinedScattering(\n'
                                      '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground,\n'
                                      '        single_mie_scattering);\n'
                                      '\n'
                                      '    d = max(d - shadow_length, 0.0);\n'
                                      '    float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_p = (r * mu + d) / r_p;\n'
                                      '    float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                      '\n'
                                      '    vec3 single_mie_scattering_p;\n'
                                      '    vec3 scattering_p = GetCombinedScattering(\n'
                                      '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '        r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground,\n'
                                      '        single_mie_scattering_p);\n'
                                      '\n'
                                      '    vec3 shadow_transmittance = transmittance;\n'
                                      '    if (shadow_length > 0.0)\n'
                                      '    {\n'
                                      '        shadow_transmittance = GetTransmittance(\n'
                                      '            atmosphere, transmittance_texture, r, mu, d, ray_r_mu_intersects_ground);\n'
                                      '    }\n'
                                      '    scattering = scattering - shadow_transmittance * scattering_p;\n'
                                      '    single_mie_scattering = single_mie_scattering - shadow_transmittance * '
                                      'single_mie_scattering_p;\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '    single_mie_scattering = GetExtrapolatedSingleMieScattering(atmosphere, '
                                      'vec4(scattering, single_mie_scattering.r));\n'
                                      '#endif\n'
                                      '\n'
                                      '    single_mie_scattering = single_mie_scattering * smoothstep(0.0, float(0.01), '
                                      'mu_s);\n'
                                      '\n'
                                      '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                      '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ComputeSunAndSkyIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    const in vec3 point, const in vec3 normal, const in vec3 sun_direction,\n'
                                      '    out vec3 sky_irradiance)\n'
                                      '{\n'
                                      '    float r = length(point);\n'
                                      '    float mu_s = dot(point, sun_direction) / r;\n'
                                      '\n'
                                      '    sky_irradiance = GetIrradiance(atmosphere, irradiance_texture, r, mu_s) * (1.0 + '
                                      'dot(normal, point) / r) * 0.5;\n'
                                      '\n'
                                      '    return atmosphere.solar_irradiance *\n'
                                      '        GetTransmittanceToSun(atmosphere, transmittance_texture, r, mu_s) *\n'
                                      '        max(dot(normal, sun_direction), 0.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetSolarRadiance(const in AtmosphereParameters atmosphere)\n'
                                      '{\n'
                                      '    return atmosphere.solar_irradiance /\n'
                                      '        (PI * atmosphere.sun_angular_radius * atmosphere.sun_angular_radius) * '
                                      'SUN_RADIANCE_TO_LUMINANCE * atmosphere_exposure;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSkyRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 view_ray, float '
                                      'shadow_length,\n'
                                      '    vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    return ComputeSkyRadiance(atmosphere, transmittance_texture,\n'
                                      '        scattering_texture, single_mie_scattering_texture,\n'
                                      '        camera, view_ray, shadow_length, sun_direction, transmittance) * '
                                      'SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSkyRadianceToPoint(\n'
                                      '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 point, float '
                                      'shadow_length,\n'
                                      '    vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    return ComputeSkyRadianceToPoint(atmosphere, transmittance_texture,\n'
                                      '        scattering_texture, single_mie_scattering_texture,\n'
                                      '        camera, point, shadow_length, sun_direction, transmittance) * '
                                      'SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSunAndSkyIrradiance(\n'
                                      '   const in AtmosphereParameters atmosphere, vec3 p, vec3 normal, vec3 sun_direction,\n'
                                      '   out vec3 sky_irradiance)\n'
                                      '{\n'
                                      '    vec3 sun_irradiance = ComputeSunAndSkyIrradiance(\n'
                                      '        atmosphere, transmittance_texture, irradiance_texture, p, normal, '
                                      'sun_direction, sky_irradiance);\n'
                                      '    sky_irradiance *= SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '    return sun_irradiance * SUN_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'float GetSunVisibility(vec3 point, vec3 sun_direction)\n'
                                      '{\n'
                                      '    vec3 p = point - kSphereCenter;\n'
                                      '    float p_dot_v = dot(p, sun_direction);\n'
                                      '    float p_dot_p = dot(p, p);\n'
                                      '    float ray_sphere_center_squared_distance = p_dot_p - p_dot_v * p_dot_v;\n'
                                      '    float distance_to_intersection = -p_dot_v - sqrt(\n'
                                      '        kSphereRadius * kSphereRadius - ray_sphere_center_squared_distance);\n'
                                      '    if (distance_to_intersection > 0.0)\n'
                                      '    {\n'
                                      '        float ray_sphere_distance = kSphereRadius - '
                                      'sqrt(ray_sphere_center_squared_distance);\n'
                                      '        float ray_sphere_angular_distance = -ray_sphere_distance / p_dot_v;\n'
                                      '        return smoothstep(1.0, 0.0, ray_sphere_angular_distance / sun_size.x);\n'
                                      '    }\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'float GetSkyVisibility(vec3 point)\n'
                                      '{\n'
                                      '  vec3 p = point - kSphereCenter;\n'
                                      '  float p_dot_p = dot(p, p);\n'
                                      '  return 1.0 + p.y / sqrt(p_dot_p) * kSphereRadius * kSphereRadius / p_dot_p;\n'
                                      '}\n'
                                      '\n'
                                      'void GetSphereShadowInOut(vec3 view_direction, vec3 sun_direction, out float d_in, out '
                                      'float d_out)\n'
                                      '{\n'
                                      '    vec3 pos = CAMERA_POSITION.xyz * atmosphere_ratio - kSphereCenter;\n'
                                      '    float pos_dot_sun = dot(pos, sun_direction);\n'
                                      '    float view_dot_sun = dot(view_direction, sun_direction);\n'
                                      '    float k = sun_size.x;\n'
                                      '    float l = 1.0 + k * k;\n'
                                      '    float a = 1.0 - l * view_dot_sun * view_dot_sun;\n'
                                      '    float b = dot(pos, view_direction) - l * pos_dot_sun * view_dot_sun - k * '
                                      'kSphereRadius * view_dot_sun;\n'
                                      '    float c = dot(pos, pos) - l * pos_dot_sun * pos_dot_sun -\n'
                                      '        2.0 * k * kSphereRadius * pos_dot_sun - kSphereRadius * kSphereRadius;\n'
                                      '    float discriminant = b * b - a * c;\n'
                                      '    if (discriminant > 0.0)\n'
                                      '    {\n'
                                      '        d_in = max(0.0, (-b - sqrt(discriminant)) / a);\n'
                                      '        d_out = (-b + sqrt(discriminant)) / a;\n'
                                      '        float d_base = -pos_dot_sun / view_dot_sun;\n'
                                      '        float d_apex = -(pos_dot_sun + kSphereRadius / k) / view_dot_sun;\n'
                                      '        if (view_dot_sun > 0.0)\n'
                                      '        {\n'
                                      '            d_in = max(d_in, d_apex);\n'
                                      '            d_out = a > 0.0 ? min(d_out, d_base) : d_base;\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            d_in = a > 0.0 ? max(d_in, d_base) : d_base;\n'
                                      '            d_out = min(d_out, d_apex);\n'
                                      '        }\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        d_in = 0.0;\n'
                                      '        d_out = 0.0;\n'
                                      '    }\n'
                                      '}\n'
                                      '\n'
                                      'float GetSceneShadowLength(float scene_dist, vec3 view_direction, sampler2D '
                                      'texture_shadow)\n'
                                      '{\n'
                                      '    const float earth_radius = abs(earth_center.y);\n'
                                      '    bool shadow_enter = false;\n'
                                      '    bool do_exit = false;\n'
                                      '    float scene_shadow_out = 0.0;\n'
                                      '    float scene_shadow_in = 0.0;\n'
                                      '    float shadow_length = 0.0;\n'
                                      '    const int LOOP = 64;\n'
                                      '    float d = min(NEAR_FAR.y * 0.01, scene_dist) / float(LOOP);\n'
                                      '    float enter_count = 0.0;\n'
                                      '\n'
                                      '    for(int i=0; i<LOOP; ++i)\n'
                                      '    {\n'
                                      '        float ray_dist = float(i) * d;\n'
                                      '        vec3 world_pos = CAMERA_POSITION.xyz + view_direction * ray_dist;\n'
                                      '        vec4 shadow_uv = SHADOW_MATRIX * vec4(world_pos, 1.0);\n'
                                      '        shadow_uv.xyz /= shadow_uv.w;\n'
                                      '        shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                      '        float shadow_depth = texture2D(texture_shadow, shadow_uv.xy, 0).x;\n'
                                      '\n'
                                      '        if(shadow_uv.x < 0.0 || 1.0 < shadow_uv.x || shadow_uv.y < 0.0 || 1.0 < '
                                      'shadow_uv.y || scene_dist <= ray_dist)\n'
                                      '        {\n'
                                      '            do_exit = true;\n'
                                      '        }\n'
                                      '        else if(length(world_pos - earth_center) < earth_radius)\n'
                                      '        {\n'
                                      '            \n'
                                      '            do_exit = true;\n'
                                      '        }\n'
                                      '        else if(false == shadow_enter && shadow_depth <= shadow_uv.z)\n'
                                      '        {\n'
                                      '            \n'
                                      '            shadow_enter = true;\n'
                                      '            scene_shadow_in = dot(view_direction, world_pos);\n'
                                      '        }\n'
                                      '        else if(shadow_enter && shadow_uv.z < shadow_depth)\n'
                                      '        {\n'
                                      '            \n'
                                      '            scene_shadow_out = dot(view_direction, world_pos);\n'
                                      '            shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                      '\n'
                                      '            \n'
                                      '            shadow_enter = false;\n'
                                      '            scene_shadow_in = 0.0;\n'
                                      '            scene_shadow_out = 0.0;\n'
                                      '            continue;\n'
                                      '        }\n'
                                      '\n'
                                      '        if(shadow_enter)\n'
                                      '        {\n'
                                      '            enter_count += 1.0;\n'
                                      '        }\n'
                                      '\n'
                                      '        if(do_exit || i == (LOOP-1))\n'
                                      '        {\n'
                                      '            if(shadow_enter)\n'
                                      '            {\n'
                                      '                \n'
                                      '                scene_shadow_out = dot(view_direction, world_pos);\n'
                                      '                shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                      '            }\n'
                                      '            else\n'
                                      '            {\n'
                                      '                \n'
                                      '                scene_shadow_in = 0.0;\n'
                                      '                scene_shadow_out = 0.0;\n'
                                      '            }\n'
                                      '            break;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    shadow_length = enter_count / float(LOOP);\n'
                                      '\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    float lightshaft_fadein_hack = smoothstep(0.02, 0.04, '
                                      'dot(normalize(relative_camera_pos - earth_center), sun_direction));\n'
                                      '\n'
                                      '    return max(0.0, shadow_length) * lightshaft_fadein_hack * 2.0;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetSceneRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float scene_linear_depth, vec3 eye_direction, vec3 normal,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    \n'
                                      '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                      '    relative_point.y = max(0.0, relative_point.y);\n'
                                      '\n'
                                      '    \n'
                                      '    float scene_shadow_length = 0.0;\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                      '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                      'transmittance);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetSceneRadianceWithShadow(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float scene_linear_depth, vec3 eye_direction, vec3 normal, sampler2D '
                                      'texture_shadow,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter, out float '
                                      'scene_shadow_length)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    \n'
                                      '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                      '    relative_point.y = max(0.0, relative_point.y);\n'
                                      '\n'
                                      '    scene_shadow_length = GetSceneShadowLength(scene_linear_depth, eye_direction, '
                                      'texture_shadow);\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                      '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                      'transmittance);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetCloudRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float dist, vec3 eye_direction, float scene_shadow_length,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 inscatter)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 point = camera_pos + eye_direction.xyz * max(NEAR_FAR.x, dist) * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '        atmosphere, point.xyz - earth_center, sun_direction, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    inscatter = GetSkyRadianceToPoint(atmosphere, camera_pos - earth_center,\n'
                                      '        point.xyz - earth_center, scene_shadow_length, sun_direction, transmittance);\n'
                                      '\n'
                                      '    sun_irradiance = max(vec3(0.0), sun_irradiance);\n'
                                      '    sky_irradiance = max(vec3(0.0), sky_irradiance);\n'
                                      '    transmittance = max(vec3(0.0), transmittance);\n'
                                      '    inscatter = max(vec3(0.0), inscatter);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '#endif /* UUID_1e1e1296_82f1_3b3b_b18c_5a0495e2ee50 */\n'
                                      '\n'
                                      'const AtmosphereParameters ATMOSPHERE = AtmosphereParameters(\n'
                                      'vec3(1.474000, 1.850400, 1.911980),\n'
                                      '0.01175,\n'
                                      '6361.0,\n'
                                      '6420.0,\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.125000, 0.000000, '
                                      '0.000000))),\n'
                                      'vec3(0.005802, 0.013558, 0.033100),\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.833333, 0.000000, '
                                      '0.000000))),\n'
                                      'vec3(0.003996, 0.003996, 0.003996),\n'
                                      'vec3(0.004440, 0.004440, 0.004440),\n'
                                      '0.8,\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(25.000000, 0.000000, '
                                      '0.000000, 0.066667, -0.666667),DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '-0.066667, 2.666667))),\n'
                                      'vec3(0.000650, 0.001881, 0.000085),\n'
                                      'vec3(0.100000, 0.100000, 0.100000),\n'
                                      '-0.4999999690599179);\n'
                                      '#endif /* UUID_cc4e9014_7fb8_3f2b_a4a9_1eff5a15df7d */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/atmosphere_vs.glsl"\n'
                                      '#ifndef UUID_cff7c5ca_cbf0_3698_afd8_ffdda5ce3fee\n'
                                      '#define UUID_cff7c5ca_cbf0_3698_afd8_ffdda5ce3fee\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                      '#define UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_b3108ea4_a792_314c_8c54_4cca197e27c2 */\n'
                                      '\n'
                                      '#ifdef VERTEX_SHADER\n'
                                      '#endif\n'
                                      '#endif /* UUID_cff7c5ca_cbf0_3698_afd8_ffdda5ce3fee */\n'
                                      '\n'
                                      'uniform sampler2D texture_shadow;\n'
                                      'uniform sampler2D texture_linear_depth;\n'
                                      'uniform sampler2D texture_normal;\n'
                                      '\n'
                                      'uniform sampler3D texture_cloud;\n'
                                      'uniform sampler3D texture_noise;\n'
                                      '\n'
                                      'uniform float cloud_exposure;\n'
                                      'uniform float cloud_altitude;\n'
                                      'uniform float cloud_height;\n'
                                      'uniform float cloud_speed;\n'
                                      'uniform float cloud_absorption;\n'
                                      '\n'
                                      'uniform float cloud_tiling;\n'
                                      'uniform float cloud_contrast;\n'
                                      'uniform float cloud_coverage;\n'
                                      '\n'
                                      'uniform float noise_tiling;\n'
                                      'uniform float noise_contrast;\n'
                                      'uniform float noise_coverage;\n'
                                      '\n'
                                      '#ifdef FRAGMENT_SHADER\n'
                                      'in vec3 eye_ray;\n'
                                      'in vec2 uv;\n'
                                      'layout(location = 0) out vec4 out_color;\n'
                                      'layout(location = 1) out vec4 out_inscatter;\n'
                                      '\n'
                                      '\n'
                                      'float get_cloud_density(vec3 cloud_scale, vec3 noise_scale, vec3 uvw, vec3 speed, float '
                                      'weight)\n'
                                      '{\n'
                                      '    uvw.xy += CAMERA_POSITION.xz;\n'
                                      '\n'
                                      '    float cloud = texture3D(texture_cloud, uvw * cloud_scale + speed * cloud_tiling / '
                                      'noise_tiling).x;\n'
                                      '    cloud = saturate(Contrast((cloud - 1.0 + cloud_coverage), cloud_contrast));\n'
                                      '\n'
                                      '    float noise = texture3D(texture_noise, uvw * noise_scale + speed * 0.3).x;\n'
                                      '    noise = saturate(Contrast((noise - 1.0 + noise_coverage) * weight, '
                                      'noise_contrast));\n'
                                      '\n'
                                      '    \n'
                                      '    return saturate(Remap(noise, 1.0 - cloud, 1.0, 0.0, 1.0));\n'
                                      '}\n'
                                      '\n'
                                      'void main()\n'
                                      '{\n'
                                      '    out_color = vec4(0.0, 0.0, 0.0, 1.0);\n'
                                      '\n'
                                      '    const float min_dist = 1000.0;\n'
                                      '    const float far_dist = NEAR_FAR.y * 4.0;\n'
                                      '\n'
                                      '    vec3 camera = vec3(0.0, max(10.0, CAMERA_POSITION.y), 0.0) * atmosphere_ratio;\n'
                                      '\n'
                                      '    float world_pos_y = max(0.0, CAMERA_POSITION.y);\n'
                                      '\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 eye_direction = normalize(eye_ray);\n'
                                      '    vec3 screen_center_ray = -vec3(VIEW_ORIGIN[0].z, VIEW_ORIGIN[1].z, '
                                      'VIEW_ORIGIN[2].z);\n'
                                      '    float VdotL = dot(eye_direction, sun_direction);\n'
                                      '\n'
                                      '    float scene_linear_depth = texture2DLod(texture_linear_depth, uv, 0.0).x;\n'
                                      '    float scene_dist = clamp(scene_linear_depth / dot(screen_center_ray, '
                                      'eye_direction), 0.0, NEAR_FAR.y);\n'
                                      '    float scene_shadow_length = GetSceneShadowLength(scene_dist, eye_direction, '
                                      'texture_shadow);\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 transmittance;\n'
                                      '    vec3 radiance = GetSkyRadiance(ATMOSPHERE, camera - earth_center, eye_direction, '
                                      'scene_shadow_length, sun_direction, transmittance);\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 sun_disc = vec3(0.0);\n'
                                      '    vec3 solar_radiance = GetSolarRadiance(ATMOSPHERE);\n'
                                      '    const float sun_absorption = 0.9;\n'
                                      '    const float sun_intensity = 1.0;\n'
                                      '    if (!render_light_probe_mode && sun_size.y < VdotL)\n'
                                      '    {\n'
                                      '        sun_disc = transmittance * solar_radiance * pow(clamp((VdotL - sun_size.y) / '
                                      '(1.0 - sun_size.y), 0.0, 1.0), 2.0);\n'
                                      '        sun_disc *= LIGHT_COLOR.xyz * sun_intensity;\n'
                                      '        radiance += sun_disc * sun_absorption;\n'
                                      '    }\n'
                                      '\n'
                                      '    \n'
                                      '    vec4 cloud = vec4(0.0);\n'
                                      '    vec3 earth_center_pos = earth_center / atmosphere_ratio;\n'
                                      '\n'
                                      '    \n'
                                      '    const float cloud_bottom_dist = cloud_altitude - earth_center_pos.y;\n'
                                      '    const float cloud_top_dist = cloud_bottom_dist + cloud_height;\n'
                                      '    float altitude_diff = cloud_altitude - world_pos_y;\n'
                                      '    const bool in_the_cloud = -cloud_height < altitude_diff && altitude_diff < 0.0;\n'
                                      '    bool above_the_cloud = false;\n'
                                      '    bool render_cloud = true;\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 ray_start_pos;\n'
                                      '    float hit_dist;\n'
                                      '\n'
                                      '    if(in_the_cloud)\n'
                                      '    {\n'
                                      '        \n'
                                      '        ray_start_pos = vec3(0.0, 0.0, 0.0);\n'
                                      '        hit_dist = 0.0;\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        \n'
                                      '        vec3 to_origin = vec3(0.0, world_pos_y, 0.0) - earth_center_pos;\n'
                                      '        float c = pow(dot(eye_direction, to_origin), 2.0) - dot(to_origin, to_origin);\n'
                                      '\n'
                                      '        if(cloud_altitude < world_pos_y)\n'
                                      '        {\n'
                                      '            \n'
                                      '            if(eye_direction.y < 0.0)\n'
                                      '            {\n'
                                      '                \n'
                                      '                c = -sqrt(c + cloud_top_dist * cloud_top_dist);\n'
                                      '                above_the_cloud = true;\n'
                                      '            }\n'
                                      '            else\n'
                                      '            {\n'
                                      '                \n'
                                      '                render_cloud = false;\n'
                                      '            }\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            \n'
                                      '            float r = cloud_altitude - earth_center_pos.y;\n'
                                      '            c = sqrt(c + cloud_bottom_dist * cloud_bottom_dist);\n'
                                      '        }\n'
                                      '\n'
                                      '        hit_dist = -dot(eye_direction, to_origin) + c;\n'
                                      '        ray_start_pos = eye_direction * hit_dist;\n'
                                      '    }\n'
                                      '\n'
                                      '    \n'
                                      '    ray_start_pos.y += world_pos_y;\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 N = normalize(ray_start_pos.xyz);\n'
                                      '\n'
                                      '    float altitude_ratio = saturate(world_pos_y / (cloud_altitude + cloud_height));\n'
                                      '    float atmosphere_lighting = max(0.2, pow(saturate(dot(N, sun_direction) * 0.5 + '
                                      '0.5), 1.0));\n'
                                      '\n'
                                      '    \n'
                                      '    if(render_cloud)\n'
                                      '    {\n'
                                      '        vec3 cloud_inscatter = vec3(0.0);\n'
                                      '        vec3 cloud_sun_irradiance = vec3(0.0);\n'
                                      '        vec3 cloud_sky_irradiance = vec3(0.0);\n'
                                      '\n'
                                      '        \n'
                                      '        float dist_to_point = hit_dist * (above_the_cloud ? 1.0 : 0.01);\n'
                                      '\n'
                                      '        GetCloudRadiance(ATMOSPHERE, dist_to_point, eye_direction, '
                                      'scene_shadow_length,\n'
                                      '            cloud_sun_irradiance, cloud_sky_irradiance, cloud_inscatter);\n'
                                      '\n'
                                      '        if(in_the_cloud || above_the_cloud)\n'
                                      '        {\n'
                                      '            cloud_inscatter = vec3(0.0);\n'
                                      '        }\n'
                                      '\n'
                                      '        vec3 light_color = cloud_sun_irradiance + cloud_sky_irradiance;\n'
                                      '        light_color *= cloud_exposure * LIGHT_COLOR.xyz * atmosphere_lighting;\n'
                                      '\n'
                                      '        if(0.0 <= hit_dist && hit_dist < far_dist)\n'
                                      '        {\n'
                                      '            const vec3 speed = vec3(cloud_speed, cloud_speed, 0.0) * TIME;\n'
                                      '\n'
                                      '            vec3 cloud_scale = textureSize(texture_cloud, 0);\n'
                                      '            cloud_scale = max(cloud_scale.x, max(cloud_scale.y, cloud_scale.z)) / '
                                      'cloud_scale;\n'
                                      '            cloud_scale *= cloud_tiling;\n'
                                      '\n'
                                      '            vec3 noise_scale = textureSize(texture_noise, 0);\n'
                                      '            noise_scale = max(noise_scale.x, max(noise_scale.y, noise_scale.z)) / '
                                      'noise_scale;\n'
                                      '            noise_scale *= noise_tiling;\n'
                                      '\n'
                                      '            \n'
                                      '            float march_count = 128.0;\n'
                                      '            float light_march_count = 32.0;\n'
                                      '            float march_step = cloud_height / march_count;\n'
                                      '            float cloud_march_step = march_step;\n'
                                      '            float increase_march_step = march_step * 0.03;\n'
                                      '\n'
                                      '            for(int i=0; i<int(march_count); ++i)\n'
                                      '            {\n'
                                      '                vec3 ray_pos;\n'
                                      '                ray_pos = ray_start_pos.xyz + eye_direction.xyz * float(i) * '
                                      'cloud_march_step;\n'
                                      '\n'
                                      '                \n'
                                      '                float relative_altitude = length(ray_pos - earth_center_pos.xyz) - '
                                      'cloud_bottom_dist;\n'
                                      '\n'
                                      '                if(cloud_height < relative_altitude || relative_altitude < 0.0)\n'
                                      '                {\n'
                                      '                    continue;\n'
                                      '                }\n'
                                      '\n'
                                      '                float fade = saturate(relative_altitude / cloud_height);\n'
                                      '                fade = 1.0 - pow(abs(fade * 2.0 - 1.0), 3.0);\n'
                                      '\n'
                                      '                float cloud_density = get_cloud_density(cloud_scale, noise_scale, '
                                      'ray_pos.xzy, speed, fade);\n'
                                      '\n'
                                      '                if(cloud_density <= 0.01)\n'
                                      '                {\n'
                                      '                    \n'
                                      '                    cloud_march_step += increase_march_step;\n'
                                      '                    continue;\n'
                                      '                }\n'
                                      '                else\n'
                                      '                {\n'
                                      '                    \n'
                                      '                    \n'
                                      '                }\n'
                                      '\n'
                                      '                float light_intensity = 1.0;\n'
                                      '\n'
                                      '                for(int j=0; j<light_march_count; ++j)\n'
                                      '                {\n'
                                      '                    vec3 light_pos = ray_pos + sun_direction * float(light_march_count '
                                      '- j) * march_step;\n'
                                      '                    relative_altitude = length(light_pos.xyz - earth_center_pos.xyz) - '
                                      'cloud_bottom_dist;\n'
                                      '\n'
                                      '                    if(cloud_height < relative_altitude || relative_altitude < 0.0)\n'
                                      '                    {\n'
                                      '                        continue;\n'
                                      '                    }\n'
                                      '\n'
                                      '                    fade = 1.0 - pow(abs(saturate(relative_altitude / cloud_height) * '
                                      '2.0 - 1.0), 3.0);\n'
                                      '\n'
                                      '                    float light_density = get_cloud_density(cloud_scale, noise_scale, '
                                      'light_pos.xzy, speed, fade);\n'
                                      '\n'
                                      '                    if(light_density <= 0.01)\n'
                                      '                    {\n'
                                      '                        continue;\n'
                                      '                    }\n'
                                      '\n'
                                      '                    light_intensity *= (1.0 - light_density * cloud_absorption);\n'
                                      '\n'
                                      '                    if(light_intensity <= 0.01)\n'
                                      '                    {\n'
                                      '                        light_intensity = 0.0;\n'
                                      '                        break;\n'
                                      '                    }\n'
                                      '                }\n'
                                      '\n'
                                      '                cloud.xyz += cloud_density * light_color * light_intensity;\n'
                                      '\n'
                                      '                cloud.w = clamp(cloud.w + cloud_density * cloud_absorption, 0.0, 1.0);\n'
                                      '\n'
                                      '                if(1.0 <= cloud.w)\n'
                                      '                {\n'
                                      '                    break;\n'
                                      '                }\n'
                                      '            }\n'
                                      '\n'
                                      '            float horizontal_line = pow(saturate(((N.y * 0.5 + 0.5) - 0.49) * 30.0), '
                                      '0.1);\n'
                                      '            cloud.w *= horizontal_line;\n'
                                      '        }\n'
                                      '\n'
                                      '        out_color.xyz += max(vec3(0.0), mix(radiance, cloud.xyz, cloud.w));\n'
                                      '        out_color.xyz += sun_disc * saturate(1.0 - cloud.w);\n'
                                      '        out_color.w = clamp(cloud.w, 0.0, 1.0);\n'
                                      '    }\n'
                                      '\n'
                                      '\n'
                                      '    vec3 far_point = camera + eye_direction.xyz * max(NEAR_FAR.x, scene_dist) * '
                                      'atmosphere_ratio;\n'
                                      '    vec3 scene_transmittance;\n'
                                      '    vec3 scene_inscatter = GetSkyRadianceToPoint(\n'
                                      '        ATMOSPHERE, camera - earth_center, far_point.xyz - earth_center, '
                                      'scene_shadow_length, LIGHT_DIRECTION.xyz, scene_transmittance);\n'
                                      '    scene_inscatter = max(vec3(0.0), scene_inscatter);\n'
                                      '\n'
                                      '    if(render_light_probe_mode)\n'
                                      '    {\n'
                                      '        out_color.xyz += scene_inscatter;\n'
                                      '    }\n'
                                      '\n'
                                      '    if(render_cloud)\n'
                                      '    {\n'
                                      '        out_inscatter.xyz += scene_inscatter;\n'
                                      '    }\n'
                                      '}\n'
                                      '#endif',
                  GL_VERTEX_SHADER: '#version 430 core\n'
                                    '# extension GL_EXT_texture_array : enable\n'
                                    '#define MATERIAL_COMPONENTS 1\n'
                                    '#define VERTEX_SHADER 1\n'
                                    '#define COMBINED_SCATTERING_TEXTURES 1\n'
                                    '#if __VERSION__ >= 130\n'
                                    '#define texture2D texture\n'
                                    '#define texture2DLod textureLod\n'
                                    '#define texture2DGrad textureGrad\n'
                                    '#define texture2DArray texture\n'
                                    '#define texture2DArrayLod textureLod\n'
                                    '#define texture2DArrayGrad textureGrad\n'
                                    '#define texture3D texture\n'
                                    '#define texture3DLod textureLod\n'
                                    '#define texture3DGrad textureGrad\n'
                                    '#define textureCube texture\n'
                                    '#define textureCubeLod textureLod\n'
                                    '#define textureCubeGrad textureGrad\n'
                                    '#endif\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "blending.glsl"\n'
                                    '#ifndef UUID_d3158955_dd82_3200_9407_bf2b35b2c767\n'
                                    '#define UUID_d3158955_dd82_3200_9407_bf2b35b2c767\n'
                                    '\n'
                                    '\n'
                                    'float Remap(float originalValue, float originalMin, float originalMax, float newMin, '
                                    'float newMax)\n'
                                    '{\n'
                                    '\treturn newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * '
                                    '(newMax - newMin));\n'
                                    '}\n'
                                    '\n'
                                    'float Sharpen(float base, float sharpen)\n'
                                    '{\n'
                                    '    return (base - sharpen) / (1.0 - sharpen);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Sharpen(vec3 base, vec3 sharpen)\n'
                                    '{\n'
                                    '    return (base - sharpen) / (vec3(1.0) - sharpen);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float Contrast(float base, float contrast)\n'
                                    '{\n'
                                    '    return (base - 0.5) * contrast + 0.5;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Contrast(vec3 base, float contrast)\n'
                                    '{\n'
                                    '    return (base - vec3(0.5)) * contrast + vec3(0.5);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float ColorBurn(float base, float blend) {\n'
                                    '\treturn (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ColorBurn(vec3 base, vec3 blend) {\n'
                                    '\treturn '
                                    'vec3(ColorBurn(base.r,blend.r),ColorBurn(base.g,blend.g),ColorBurn(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ColorBurn(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (ColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float ColorDodge(float base, float blend) {\n'
                                    '\treturn (blend==1.0)?blend:min(base/(1.0-blend),1.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ColorDodge(vec3 base, vec3 blend) {\n'
                                    '\treturn '
                                    'vec3(ColorDodge(base.r,blend.r),ColorDodge(base.g,blend.g),ColorDodge(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ColorDodge(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (ColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float Darken(float base, float blend) {\n'
                                    '\treturn min(blend,base);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Darken(vec3 base, vec3 blend) {\n'
                                    '\treturn vec3(Darken(base.r,blend.r),Darken(base.g,blend.g),Darken(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Darken(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Darken(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 Difference(vec3 base, vec3 blend) {\n'
                                    '\treturn abs(base-blend);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Difference(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Difference(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 Exclusion(vec3 base, vec3 blend) {\n'
                                    '\treturn base+blend-2.0*base*blend;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Exclusion(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Exclusion(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float Reflect(float base, float blend) {\n'
                                    '\treturn (blend==1.0)?blend:min(base*base/(1.0-blend),1.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Reflect(vec3 base, vec3 blend) {\n'
                                    '\treturn vec3(Reflect(base.r,blend.r),Reflect(base.g,blend.g),Reflect(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Reflect(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Reflect(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 Glow(vec3 base, vec3 blend) {\n'
                                    '\treturn Reflect(blend,base);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Glow(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Glow(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float Overlay(float base, float blend) {\n'
                                    '\treturn base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Overlay(vec3 base, vec3 blend) {\n'
                                    '\treturn vec3(Overlay(base.r,blend.r),Overlay(base.g,blend.g),Overlay(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Overlay(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Overlay(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float HardLight(float base, float blend) {\n'
                                    '\treturn Overlay(blend, base);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 HardLight(vec3 base, vec3 blend) {\n'
                                    '\treturn Overlay(blend, base);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 HardLight(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (HardLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float Lighten(float base, float blend) {\n'
                                    '\treturn max(blend,base);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Lighten(vec3 base, vec3 blend) {\n'
                                    '\treturn vec3(Lighten(base.r,blend.r),Lighten(base.g,blend.g),Lighten(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Lighten(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Lighten(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float LinearBurn(float base, float blend) {\n'
                                    '\treturn max(base+blend-1.0,0.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 LinearBurn(vec3 base, vec3 blend) {\n'
                                    '\treturn max(base+blend-vec3(1.0),vec3(0.0));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 LinearBurn(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (LinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float LinearDodge(float base, float blend) {\n'
                                    '\treturn min(base+blend,1.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 LinearDodge(vec3 base, vec3 blend) {\n'
                                    '\treturn min(base+blend,vec3(1.0));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 LinearDodge(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (LinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float LinearLight(float base, float blend) {\n'
                                    '\treturn blend<0.5?LinearBurn(base,(2.0*blend)):LinearDodge(base,(2.0*(blend-0.5)));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 LinearLight(vec3 base, vec3 blend) {\n'
                                    '\treturn '
                                    'vec3(LinearLight(base.r,blend.r),LinearLight(base.g,blend.g),LinearLight(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 LinearLight(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (LinearLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 Multiply(vec3 base, vec3 blend) {\n'
                                    '\treturn base*blend;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Multiply(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Multiply(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 Negation(vec3 base, vec3 blend) {\n'
                                    '\treturn vec3(1.0)-abs(vec3(1.0)-base-blend);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Negation(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Negation(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 Normal(vec3 base, vec3 blend) {\n'
                                    '\treturn blend;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Normal(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Normal(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float PinLight(float base, float blend) {\n'
                                    '\treturn (blend<0.5)?Darken(base,(2.0*blend)):Lighten(base,(2.0*(blend-0.5)));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 PinLight(vec3 base, vec3 blend) {\n'
                                    '\treturn '
                                    'vec3(PinLight(base.r,blend.r),PinLight(base.g,blend.g),PinLight(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 PinLight(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (PinLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float Screen(float base, float blend) {\n'
                                    '\treturn 1.0-((1.0-base)*(1.0-blend));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Screen(vec3 base, vec3 blend) {\n'
                                    '\treturn vec3(Screen(base.r,blend.r),Screen(base.g,blend.g),Screen(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Screen(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Screen(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float SoftLight(float base, float blend) {\n'
                                    '\treturn '
                                    '(blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 SoftLight(vec3 base, vec3 blend) {\n'
                                    '\treturn '
                                    'vec3(SoftLight(base.r,blend.r),SoftLight(base.g,blend.g),SoftLight(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 SoftLight(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (SoftLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float Subtract(float base, float blend) {\n'
                                    '\treturn max(base+blend-1.0,0.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Subtract(vec3 base, vec3 blend) {\n'
                                    '\treturn max(base+blend-vec3(1.0),vec3(0.0));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 Subtract(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (Subtract(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float VividLight(float base, float blend) {\n'
                                    '\treturn (blend<0.5)?ColorBurn(base,(2.0*blend)):ColorDodge(base,(2.0*(blend-0.5)));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 VividLight(vec3 base, vec3 blend) {\n'
                                    '\treturn '
                                    'vec3(VividLight(base.r,blend.r),VividLight(base.g,blend.g),VividLight(base.b,blend.b));\n'
                                    '}\n'
                                    '\n'
                                    'vec3 VividLight(vec3 base, vec3 blend, float opacity) {\n'
                                    '\treturn (VividLight(base, blend) * opacity + base * (1.0 - opacity));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '#endif /* UUID_d3158955_dd82_3200_9407_bf2b35b2c767 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "utility.glsl"\n'
                                    '#ifndef UUID_6b401f72_8e9e_32ca_aa7f_c719bdc79ecc\n'
                                    '#define UUID_6b401f72_8e9e_32ca_aa7f_c719bdc79ecc\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                    '#define UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                    'layout(std140, binding=0) uniform scene_constants\n'
                                    '{\n'
                                    '    float TIME;\n'
                                    '    float JITTER_FRAME;\n'
                                    '    bool RENDER_SSR;\n'
                                    '    bool RENDER_SSAO;\n'
                                    '    vec2 SCREEN_SIZE;\n'
                                    '    vec2 BACKBUFFER_SIZE;\n'
                                    '    vec2 MOUSE_POS;\n'
                                    '    float DELTA_TIME;\n'
                                    '    int SCENE_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=1) uniform view_constants\n'
                                    '{\n'
                                    '    mat4 VIEW;\n'
                                    '    mat4 INV_VIEW;\n'
                                    '    mat4 VIEW_ORIGIN;\n'
                                    '    mat4 INV_VIEW_ORIGIN;\n'
                                    '    mat4 PROJECTION;\n'
                                    '    mat4 INV_PROJECTION;\n'
                                    '    vec3 CAMERA_POSITION;\n'
                                    '    float VIEW_DUMMY_0;\n'
                                    '    vec2 NEAR_FAR;\n'
                                    '    vec2 JITTER_DELTA;\n'
                                    '    vec2 JITTER_OFFSET;\n'
                                    '    vec2 VIEWCONSTANTS_DUMMY0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=2) uniform view_projection\n'
                                    '{\n'
                                    '    mat4 VIEW_PROJECTION;\n'
                                    '    mat4 PREV_VIEW_PROJECTION;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=3) uniform light_constants\n'
                                    '{\n'
                                    '    mat4 SHADOW_MATRIX;\n'
                                    '    vec3 LIGHT_POSITION;\n'
                                    '    float SHADOW_EXP;\n'
                                    '    vec3 LIGHT_DIRECTION;\n'
                                    '    float SHADOW_BIAS;\n'
                                    '    vec3 LIGHT_COLOR;\n'
                                    '    int SHADOW_SAMPLES;\n'
                                    '};\n'
                                    '\n'
                                    'const int MAX_POINT_LIGHTS = 10;\n'
                                    '\n'
                                    'struct POINT_LIGHT\n'
                                    '{\n'
                                    '    vec3 color;\n'
                                    '    float radius;\n'
                                    '    vec3 pos;\n'
                                    '    float render;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=4) uniform point_light_constants\n'
                                    '{\n'
                                    '    POINT_LIGHT POINT_LIGHTS[MAX_POINT_LIGHTS];\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    'layout(std140, binding=5) uniform particle_common\n'
                                    '{\n'
                                    '    vec3 PARTICLE_COLOR;\n'
                                    '    int PARTICLE_ALIGN_MODE;\n'
                                    '    ivec2 PARTICLE_CELL_COUNT;\n'
                                    '    int PARTICLE_BLEND_MODE;\n'
                                    '    int PARTICLE_COMMON_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=6) uniform particle_infos\n'
                                    '{\n'
                                    '    mat4 PARTICLE_PARENT_MATRIX;\n'
                                    '    vec2 PARTICLE_DELAY;\n'
                                    '    vec2 PARTICLE_LIFE_TIME;\n'
                                    '    vec3 PARTICLE_TRANSFORM_ROTATION_MIN;\n'
                                    '    float PARTICLE_FADE_IN;\n'
                                    '    vec3 PARTICLE_TRANSFORM_ROTATION_MAX;\n'
                                    '    float PARTICLE_FADE_OUT;\n'
                                    '    vec3 PARTICLE_TRANSFORM_SCALE_MIN;\n'
                                    '    float PARTICLE_OPACITY;\n'
                                    '    vec3 PARTICLE_TRANSFORM_SCALE_MAX;\n'
                                    '    bool PARTICLE_ENABLE_VECTOR_FIELD;\n'
                                    '    vec3 PARTICLE_VELOCITY_POSITION_MIN;\n'
                                    '    float PARTICLE_VECTOR_FIELD_STRENGTH;\n'
                                    '    vec3 PARTICLE_VELOCITY_POSITION_MAX;\n'
                                    '    float PARTICLE_VECTOR_FIELD_TIGHTNESS;\n'
                                    '    vec3 PARTICLE_VELOCITY_ROTATION_MIN;\n'
                                    '    uint PARTICLE_MAX_COUNT;\n'
                                    '    vec3 PARTICLE_VELOCITY_ROTATION_MAX;\n'
                                    '    uint PARTICLE_SPAWN_COUNT;\n'
                                    '    vec3 PARTICLE_VELOCITY_SCALE_MIN;\n'
                                    '    float PARTICLE_VELOCITY_STRETCH;\n'
                                    '    vec3 PARTICLE_VELOCITY_SCALE_MAX;\n'
                                    '    float PARTICLE_VELOCITY_ACCELERATION;\n'
                                    '    mat4 PARTICLE_VECTOR_FIELD_MATRIX;\n'
                                    '    mat4 PARTICLE_VECTOR_FIELD_INV_MATRIX;\n'
                                    '    vec3 PARTICLE_SPAWN_VOLUME_INFO;\n'
                                    '    uint PARTICLE_SPAWN_VOLUME_TYPE;\n'
                                    '    mat4 PARTICLE_SPAWN_VOLUME_MATRIX;\n'
                                    '    vec2 PARTICLE_VELOCITY_LIMIT;\n'
                                    '    float PARTICLE_FORCE_GRAVITY;\n'
                                    '    float PARTICLE_PLAY_SPEED;\n'
                                    '    uint PARTICLE_VELOCITY_TYPE;\n'
                                    '    float PARTICLE_FORCE_ELASTICITY;\n'
                                    '    float PARTICLE_FORCE_FRICTION;\n'
                                    '    uint PARTICLE_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'const int BLEND = 0;\n'
                                    'const int ADDITIVE = 1;\n'
                                    'const int MULTIPLY = 2;\n'
                                    'const int SUBTRACT = 3;\n'
                                    '\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '\n'
                                    'const int MAX_BONES_PER_VERTEX = 4;\n'
                                    'const int MAX_BONES = 100;\n'
                                    '\n'
                                    'const float PI = 3.14159265358979323846;\n'
                                    'const float HALF_PI = PI * 0.5;\n'
                                    'const float TWO_PI = PI * 2.0;\n'
                                    'const float deg = PI / 180.0;\n'
                                    '\n'
                                    'const vec3 kSphereCenter = vec3(1.0, 1.0, -2.0);\n'
                                    'const float kSphereRadius = 1.0;\n'
                                    'const vec3 kSphereAlbedo = vec3(0.8);\n'
                                    'const vec3 kGroundAlbedo = vec3(0.0, 0.0, 0.04);\n'
                                    '#endif /* UUID_b3108ea4_a792_314c_8c54_4cca197e27c2 */\n'
                                    '\n'
                                    'const int FilterTypes_Box = 0;\n'
                                    'const int FilterTypes_Triangle = 1;\n'
                                    'const int FilterTypes_Gaussian = 2;\n'
                                    'const int FilterTypes_BlackmanHarris = 3;\n'
                                    'const int FilterTypes_Smoothstep = 4;\n'
                                    'const int FilterTypes_BSpline = 5;\n'
                                    'const int FilterTypes_CatmullRom = 6;\n'
                                    'const int FilterTypes_Mitchell = 7;\n'
                                    'const int FilterTypes_GeneralizedCubic = 8;\n'
                                    'const int FilterTypes_Sinc = 9;\n'
                                    '\n'
                                    '\n'
                                    'float FilterBox(in float x)\n'
                                    '{\n'
                                    '    return x <= 1.0 ? 1.0 : 0.0;\n'
                                    '}\n'
                                    '\n'
                                    'float FilterTriangle(in float x)\n'
                                    '{\n'
                                    '    return clamp(1.0f - x, 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float FilterGaussian(in float x)\n'
                                    '{\n'
                                    '    const float sigma = 0.25;\n'
                                    '    const float g = 1.0f / sqrt(2.0f * 3.14159f * sigma * sigma);\n'
                                    '    return (g * exp(-(x * x) / (2 * sigma * sigma)));\n'
                                    '}\n'
                                    '\n'
                                    'float FilterCubic(in float x, in float B, in float C)\n'
                                    '{\n'
                                    '    float y = 0.0f;\n'
                                    '    float x2 = x * x;\n'
                                    '    float x3 = x * x * x;\n'
                                    '\n'
                                    '    if(x < 1)\n'
                                    '    {\n'
                                    '        y = (12 - 9 * B - 6 * C) * x3 + (-18 + 12 * B + 6 * C) * x2 + (6 - 2 * B);\n'
                                    '    }\n'
                                    '    else if(x <= 2)\n'
                                    '    {\n'
                                    '        y = (-B - 6 * C) * x3 + (6 * B + 30 * C) * x2 + (-12 * B - 48 * C) * x + (8 * B + '
                                    '24 * C);\n'
                                    '    }\n'
                                    '\n'
                                    '    return y / 6.0f;\n'
                                    '}\n'
                                    '\n'
                                    'float FilterSinc(in float x, in float filterRadius)\n'
                                    '{\n'
                                    '    float s;\n'
                                    '    x *= filterRadius * 2.0f;\n'
                                    '    if(x < 0.001f)\n'
                                    '        s = 1.0f;\n'
                                    '    else\n'
                                    '        s = sin(x * PI) / (x * PI);\n'
                                    '    return s;\n'
                                    '}\n'
                                    '\n'
                                    'float FilterBlackmanHarris(in float x)\n'
                                    '{\n'
                                    '    x = 1.0f - x;\n'
                                    '    const float a0 = 0.35875f;\n'
                                    '    const float a1 = 0.48829f;\n'
                                    '    const float a2 = 0.14128f;\n'
                                    '    const float a3 = 0.01168f;\n'
                                    '    return clamp(a0 - a1 * cos(PI * x) + a2 * cos(2 * PI * x) - a3 * cos(3 * PI * x), '
                                    '0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float FilterSmoothstep(in float x)\n'
                                    '{\n'
                                    '    return 1.0f - smoothstep(0.0f, 1.0f, x);\n'
                                    '}\n'
                                    '\n'
                                    'float Filter(in float x, in int filterType, in float filterRadius, in bool rescaleCubic)\n'
                                    '{\n'
                                    '    \n'
                                    '    \n'
                                    '    float cubicX = rescaleCubic ? x * 2.0f : x;\n'
                                    '\n'
                                    '    if(filterType == FilterTypes_Box)\n'
                                    '        return FilterBox(x);\n'
                                    '    else if(filterType == FilterTypes_Triangle)\n'
                                    '        return FilterTriangle(x);\n'
                                    '    else if(filterType == FilterTypes_Gaussian)\n'
                                    '        return FilterGaussian(x);\n'
                                    '    else if(filterType == FilterTypes_BlackmanHarris)\n'
                                    '        return FilterBlackmanHarris(x);\n'
                                    '    else if(filterType == FilterTypes_Smoothstep)\n'
                                    '        return FilterSmoothstep(x);\n'
                                    '    else if(filterType == FilterTypes_BSpline)\n'
                                    '        return FilterCubic(cubicX, 1.0, 0.0f);\n'
                                    '    else if(filterType == FilterTypes_CatmullRom)\n'
                                    '        return FilterCubic(cubicX, 0, 0.5f);\n'
                                    '    else if(filterType == FilterTypes_Mitchell)\n'
                                    '        return FilterCubic(cubicX, 1 / 3.0f, 1 / 3.0f);\n'
                                    '    else if(filterType == FilterTypes_GeneralizedCubic)\n'
                                    '        return FilterCubic(cubicX, 0.33, 0.33);\n'
                                    '    else if(filterType == FilterTypes_Sinc)\n'
                                    '        return FilterSinc(x, filterRadius);\n'
                                    '    else\n'
                                    '        return 1.0f;\n'
                                    '}\n'
                                    '\n'
                                    'float saturate(float value) { return clamp(value, 0.0, 1.0); }\n'
                                    'vec2 saturate(vec2 value) { return clamp(value, 0.0, 1.0); }\n'
                                    'vec3 saturate(vec3 value) { return clamp(value, 0.0, 1.0); }\n'
                                    'vec4 saturate(vec4 value) { return clamp(value, 0.0, 1.0); }\n'
                                    '\n'
                                    'float get_luminance(vec3 color)\n'
                                    '{\n'
                                    '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float depth_to_linear_depth(float depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    depth = depth * 2.0 - 1.0;\n'
                                    '    \n'
                                    '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float linear_depth_to_depth(float linear_depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                    '    \n'
                                    '    return depth * 0.5 + 0.5;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 linear_depth_to_depth(vec4 linear_depth)\n'
                                    '{\n'
                                    '    const vec4 zNear = NEAR_FAR.xxxx;\n'
                                    '    const vec4 zFar = NEAR_FAR.yyyy;\n'
                                    '    vec4 depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                    '    return depth * 0.5 + 0.5;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                    '{\n'
                                    '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                    '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                    '    relative_pos /= relative_pos.w;\n'
                                    '    return relative_pos;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                    '{\n'
                                    '    \n'
                                    '    float depth = linear_depth_to_depth(linear_depth);\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    return depth_to_relative_world(tex_coord, depth);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float PseudoRandom(vec2 xy)\n'
                                    '{\n'
                                    '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                    '\n'
                                    '    \n'
                                    '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                    '}\n'
                                    '\n'
                                    'float rand(vec2 co){\n'
                                    '    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n'
                                    '}\n'
                                    '\n'
                                    'float rand3(vec3 uvw, float scale)\n'
                                    '{\n'
                                    '\treturn fract(sin(dot(uvw, vec3(12.9898, 78.233, 45.164))) * 43758.5453123);\n'
                                    '}\n'
                                    '\n'
                                    'float rand4(vec4 seed4){\n'
                                    '    return fract(sin(dot(seed4, vec4(12.9898, 78.233, 45.164, 94.673))) * '
                                    '43758.5453123);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec4 generate_random(float random_seed)\n'
                                    '{\n'
                                    '    vec4 random_factor;\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_seed));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                    '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                    '    return random_factor;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random1(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.w = random_factor.x;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random2(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.w = random_factor.y;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random3(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                    '    random_factor.w = random_factor.z;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random4(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                    '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 invert_y(vec3 vector)\n'
                                    '{\n'
                                    '    return vec3(vector.x, -vector.y, vector.z);\n'
                                    '}\n'
                                    '\n'
                                    'float safe_atan(float y, float x)\n'
                                    '{\n'
                                    '    return mod(atan(y, x), TWO_PI);\n'
                                    '}\n'
                                    '\n'
                                    'vec2 safe_normalize(vec2 vector)\n'
                                    '{\n'
                                    '    float dist = length(vector);\n'
                                    '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 safe_normalize(vec3 vector)\n'
                                    '{\n'
                                    '    float dist = length(vector);\n'
                                    '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                    '}\n'
                                    '\n'
                                    'vec4 safe_normalize(vec4 vector)\n'
                                    '{\n'
                                    '    float dist = length(vector);\n'
                                    '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                    '}\n'
                                    '#endif /* UUID_6b401f72_8e9e_32ca_aa7f_c719bdc79ecc */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/atmosphere_predefine.glsl"\n'
                                    '#ifndef UUID_cc4e9014_7fb8_3f2b_a4a9_1eff5a15df7d\n'
                                    '#define UUID_cc4e9014_7fb8_3f2b_a4a9_1eff5a15df7d\n'
                                    'const int TRANSMITTANCE_TEXTURE_WIDTH = 256;\n'
                                    'const int TRANSMITTANCE_TEXTURE_HEIGHT = 64;\n'
                                    'const int SCATTERING_TEXTURE_R_SIZE = 32;\n'
                                    'const int SCATTERING_TEXTURE_MU_SIZE = 128;\n'
                                    'const int SCATTERING_TEXTURE_MU_S_SIZE = 32;\n'
                                    'const int SCATTERING_TEXTURE_NU_SIZE = 8;\n'
                                    'const int IRRADIANCE_TEXTURE_WIDTH = 64;\n'
                                    'const int IRRADIANCE_TEXTURE_HEIGHT = 16;\n'
                                    'const vec2 IRRADIANCE_TEXTURE_SIZE = vec2(64, 16);\n'
                                    '\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/definitions.glsl"\n'
                                    '#ifndef UUID_1e1e1296_82f1_3b3b_b18c_5a0495e2ee50\n'
                                    '#define UUID_1e1e1296_82f1_3b3b_b18c_5a0495e2ee50\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                    '#define UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_b3108ea4_a792_314c_8c54_4cca197e27c2 */\n'
                                    '\n'
                                    '\n'
                                    'uniform vec3 earth_center;\n'
                                    'uniform vec2 sun_size;\n'
                                    'uniform float atmosphere_exposure;\n'
                                    'uniform bool render_light_probe_mode;\n'
                                    '\n'
                                    'uniform sampler2D transmittance_texture;\n'
                                    'uniform sampler2D irradiance_texture;\n'
                                    'uniform sampler3D scattering_texture;\n'
                                    'uniform sampler3D single_mie_scattering_texture;\n'
                                    'uniform sampler3D single_rayleigh_scattering_texture;\n'
                                    'uniform sampler3D scattering_density_texture;\n'
                                    'uniform sampler3D multiple_scattering_texture;\n'
                                    '\n'
                                    '\n'
                                    'uniform vec3 SKY_RADIANCE_TO_LUMINANCE;\n'
                                    'uniform vec3 SUN_RADIANCE_TO_LUMINANCE;\n'
                                    '\n'
                                    'const float atmosphere_ratio = 0.1;\n'
                                    '\n'
                                    'struct DensityProfileLayer\n'
                                    '{\n'
                                    '    float width;\n'
                                    '    float exp_term;\n'
                                    '    float exp_scale;\n'
                                    '    float linear_term;\n'
                                    '    float constant_term;\n'
                                    '};\n'
                                    '\n'
                                    'struct DensityProfile\n'
                                    '{\n'
                                    '    DensityProfileLayer layers[2];\n'
                                    '};\n'
                                    '\n'
                                    'struct AtmosphereParameters\n'
                                    '{\n'
                                    '    vec3 solar_irradiance;\n'
                                    '    float sun_angular_radius;\n'
                                    '    float bottom_radius;\n'
                                    '    float top_radius;\n'
                                    '    DensityProfile rayleigh_density;\n'
                                    '    vec3 rayleigh_scattering;\n'
                                    '    DensityProfile mie_density;\n'
                                    '    vec3 mie_scattering;\n'
                                    '    vec3 mie_extinction;\n'
                                    '    float mie_phase_function_g;\n'
                                    '    DensityProfile absorption_density;\n'
                                    '    vec3 absorption_extinction;\n'
                                    '    vec3 ground_albedo;\n'
                                    '    float mu_s_min;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    'float ClampCosine(float mu)\n'
                                    '{\n'
                                    '    return clamp(mu, -1.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float ClampDistance(float d)\n'
                                    '{\n'
                                    '    return max(d, 0.0);\n'
                                    '}\n'
                                    '\n'
                                    'float ClampRadius(const in AtmosphereParameters atmosphere, float r)\n'
                                    '{\n'
                                    '    return clamp(r, atmosphere.bottom_radius, atmosphere.top_radius);\n'
                                    '}\n'
                                    '\n'
                                    'float SafeSqrt(float a)\n'
                                    '{\n'
                                    '    return sqrt(max(a, 0.0));\n'
                                    '}\n'
                                    '\n'
                                    'float DistanceToTopAtmosphereBoundary(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu)\n'
                                    '{\n'
                                    '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.top_radius * '
                                    'atmosphere.top_radius;\n'
                                    '    return ClampDistance(-r * mu + SafeSqrt(discriminant));\n'
                                    '}\n'
                                    '\n'
                                    'float DistanceToBottomAtmosphereBoundary(const in AtmosphereParameters atmosphere, float '
                                    'r, float mu)\n'
                                    '{\n'
                                    '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '    return ClampDistance(-r * mu - SafeSqrt(discriminant));\n'
                                    '}\n'
                                    '\n'
                                    'bool RayIntersectsGround(const in AtmosphereParameters atmosphere, float r, float mu)\n'
                                    '{\n'
                                    '    if(mu < 0.0)\n'
                                    '    {\n'
                                    '        float result = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '        if(0.0 <= result)\n'
                                    '        {\n'
                                    '            return true;\n'
                                    '        }\n'
                                    '    }\n'
                                    '    return false;\n'
                                    '}\n'
                                    '\n'
                                    'float GetLayerDensity(const in DensityProfileLayer layer, float altitude)\n'
                                    '{\n'
                                    '    float density =\n'
                                    '        layer.exp_term * exp(layer.exp_scale * altitude) + layer.linear_term * altitude + '
                                    'layer.constant_term;\n'
                                    '    return clamp(density, 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float GetProfileDensity(const in DensityProfile profile, float altitude)\n'
                                    '{\n'
                                    '    return altitude < profile.layers[0].width ?\n'
                                    '        GetLayerDensity(profile.layers[0], altitude) : GetLayerDensity(profile.layers[1], '
                                    'altitude);\n'
                                    '}\n'
                                    '\n'
                                    'float ComputeOpticalLengthToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in DensityProfile profile,\n'
                                    '    float r,\n'
                                    '    float mu)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 500;\n'
                                    '    float dx = DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / float(SAMPLE_COUNT);\n'
                                    '    float result = 0.0;\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);\n'
                                    '        float y_i = GetProfileDensity(profile, r_i - atmosphere.bottom_radius);\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        result += y_i * weight_i * dx;\n'
                                    '    }\n'
                                    '    return result;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeTransmittanceToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu)\n'
                                    '{\n'
                                    '    return exp(-(\n'
                                    '        atmosphere.rayleigh_scattering *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.rayleigh_density, r, mu) +\n'
                                    '        atmosphere.mie_extinction *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.mie_density, r, mu) +\n'
                                    '        atmosphere.absorption_extinction *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.absorption_density, r, mu)));\n'
                                    '}\n'
                                    '\n'
                                    'float GetTextureCoordFromUnitRange(float x, int texture_size)\n'
                                    '{\n'
                                    '    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));\n'
                                    '}\n'
                                    '\n'
                                    'float GetUnitRangeFromTextureCoord(float u, int texture_size)\n'
                                    '{\n'
                                    '    return (u - 0.5 / float(texture_size)) / (1.0 - 1.0 / float(texture_size));\n'
                                    '}\n'
                                    '\n'
                                    'vec2 GetTransmittanceTextureUvFromRMu(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                    '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float d = DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '    float d_min = atmosphere.top_radius - r;\n'
                                    '    float d_max = rho + H;\n'
                                    '    float x_mu = (d - d_min) / (d_max - d_min);\n'
                                    '    float x_r = rho / H;\n'
                                    '    return vec2(GetTextureCoordFromUnitRange(x_mu, TRANSMITTANCE_TEXTURE_WIDTH),\n'
                                    '              GetTextureCoordFromUnitRange(x_r, TRANSMITTANCE_TEXTURE_HEIGHT));\n'
                                    '}\n'
                                    '\n'
                                    'void GetRMuFromTransmittanceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 uv, out float r, out float mu)\n'
                                    '{\n'
                                    '    float x_mu = GetUnitRangeFromTextureCoord(uv.x, TRANSMITTANCE_TEXTURE_WIDTH);\n'
                                    '    float x_r = GetUnitRangeFromTextureCoord(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                    '\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                    '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '\n'
                                    '    float rho = H * x_r;\n'
                                    '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float d_min = atmosphere.top_radius - r;\n'
                                    '    float d_max = rho + H;\n'
                                    '    float d = d_min + x_mu * (d_max - d_min);\n'
                                    '    mu = (d == 0.0) ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);\n'
                                    '    mu = ClampCosine(mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeTransmittanceToTopAtmosphereBoundarytexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 gl_frag_coord)\n'
                                    '{\n'
                                    '    const vec2 TRANSMITTANCE_TEXTURE_SIZE = vec2(TRANSMITTANCE_TEXTURE_WIDTH, '
                                    'TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    GetRMuFromTransmittanceTextureUv(atmosphere, gl_frag_coord / '
                                    'TRANSMITTANCE_TEXTURE_SIZE, r, mu);\n'
                                    '    return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittanceToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r, float mu)\n'
                                    '{\n'
                                    '    vec2 uv = GetTransmittanceTextureUvFromRMu(atmosphere, r, mu);\n'
                                    '    return vec3(texture2D(transmittance_texture, uv));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float d,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_d = ClampCosine((r * mu + d) / r_d);\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        return min(\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                    'r_d, -mu_d) /\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    '-mu),\n'
                                    '            vec3(1.0));\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        return min(\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu) /\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                    'r_d, mu_d),\n'
                                    '            vec3(1.0));\n'
                                    '    }\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittanceToSun(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    float sin_theta_h = atmosphere.bottom_radius / r;\n'
                                    '    float cos_theta_h = -sqrt(max(1.0 - sin_theta_h * sin_theta_h, 0.0));\n'
                                    '    return GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu_s) *\n'
                                    '      smoothstep(-sin_theta_h * atmosphere.sun_angular_radius,\n'
                                    '                 sin_theta_h * atmosphere.sun_angular_radius,\n'
                                    '                 mu_s - cos_theta_h);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScatteringIntegrand(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    float d,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 rayleigh,\n'
                                    '    out vec3 mie)\n'
                                    '{\n'
                                    '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_s_d = ClampCosine((r * mu_s + d * nu) / r_d);\n'
                                    '    vec3 transmittance =\n'
                                    '        GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                    'ray_r_mu_intersects_ground) *\n'
                                    '        GetTransmittanceToSun(atmosphere, transmittance_texture, r_d, mu_s_d);\n'
                                    '    rayleigh = transmittance * GetProfileDensity(atmosphere.rayleigh_density, r_d - '
                                    'atmosphere.bottom_radius);\n'
                                    '    mie = transmittance * GetProfileDensity(atmosphere.mie_density, r_d - '
                                    'atmosphere.bottom_radius);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float DistanceToNearestAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        return DistanceToBottomAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '    }\n'
                                    '    return DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 rayleigh,\n'
                                    '    out vec3 mie)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 50;\n'
                                    '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                    'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                    '\n'
                                    '    vec3 rayleigh_sum = vec3(0.0);\n'
                                    '    vec3 mie_sum = vec3(0.0);\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        vec3 rayleigh_i;\n'
                                    '        vec3 mie_i;\n'
                                    '        ComputeSingleScatteringIntegrand(\n'
                                    '            atmosphere, transmittance_texture, r, mu, mu_s, nu, d_i, '
                                    'ray_r_mu_intersects_ground, rayleigh_i, mie_i);\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        rayleigh_sum += rayleigh_i * weight_i;\n'
                                    '        mie_sum += mie_i * weight_i;\n'
                                    '    }\n'
                                    '    rayleigh = rayleigh_sum * dx * atmosphere.solar_irradiance * '
                                    'atmosphere.rayleigh_scattering;\n'
                                    '    mie = mie_sum * dx * atmosphere.solar_irradiance * atmosphere.mie_scattering;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float RayleighPhaseFunction(float nu)\n'
                                    '{\n'
                                    '    float k = 3.0 / (16.0 * PI);\n'
                                    '    return k * (1.0 + nu * nu);\n'
                                    '}\n'
                                    '\n'
                                    'float MiePhaseFunction(float g, float nu)\n'
                                    '{\n'
                                    '    float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);\n'
                                    '    return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec4 GetScatteringTextureUvwzFromRMuMuSNu(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                    'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float u_r = GetTextureCoordFromUnitRange(rho / H, SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    float r_mu = r * mu;\n'
                                    '    float discriminant = r_mu * r_mu - r * r + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '    float u_mu;\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        float d = -r_mu - SafeSqrt(discriminant);\n'
                                    '        float d_min = r - atmosphere.bottom_radius;\n'
                                    '        float d_max = rho;\n'
                                    '        u_mu = 0.5 - 0.5 * GetTextureCoordFromUnitRange(\n'
                                    '            d_max == d_min ? 0.0 : (d - d_min) / (d_max - d_min), '
                                    'SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d = -r_mu + SafeSqrt(discriminant + H * H);\n'
                                    '        float d_min = atmosphere.top_radius - r;\n'
                                    '        float d_max = rho + H;\n'
                                    '        u_mu = 0.5 + 0.5 * GetTextureCoordFromUnitRange(\n'
                                    '            (d - d_min) / (d_max - d_min), SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                    '    }\n'
                                    '\n'
                                    '    float d = DistanceToTopAtmosphereBoundary(atmosphere, atmosphere.bottom_radius, '
                                    'mu_s);\n'
                                    '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                    '    float d_max = H;\n'
                                    '    float a = (d - d_min) / (d_max - d_min);\n'
                                    '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                    '    float u_mu_s = GetTextureCoordFromUnitRange(max(1.0 - a / A, 0.0) / (1.0 + a), '
                                    'SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                    '    float u_nu = (nu + 1.0) / 2.0;\n'
                                    '    return vec4(u_nu, u_mu_s, u_mu, u_r);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuMuSNuFromScatteringTextureUvwz(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec4 uvwz,\n'
                                    '    out float r,\n'
                                    '    out float mu,\n'
                                    '    out float mu_s,\n'
                                    '    out float nu,\n'
                                    '    out bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                    'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = H * GetUnitRangeFromTextureCoord(uvwz.w, SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    if (uvwz.z < 0.5)\n'
                                    '    {\n'
                                    '        float d_min = r - atmosphere.bottom_radius;\n'
                                    '        float d_max = rho;\n'
                                    '        float d = d_min + (d_max - d_min) *\n'
                                    '            GetUnitRangeFromTextureCoord(1.0 - 2.0 * uvwz.z, SCATTERING_TEXTURE_MU_SIZE / '
                                    '2);\n'
                                    '        mu = (d == 0.0) ? -1.0 : ClampCosine(-(rho * rho + d * d) / (2.0 * r * d));\n'
                                    '        ray_r_mu_intersects_ground = true;\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d_min = atmosphere.top_radius - r;\n'
                                    '        float d_max = rho + H;\n'
                                    '        float d = d_min + (d_max - d_min) *\n'
                                    '            GetUnitRangeFromTextureCoord(2.0 * uvwz.z - 1.0, SCATTERING_TEXTURE_MU_SIZE / '
                                    '2);\n'
                                    '        mu = (d == 0.0) ? 1.0 : ClampCosine((H * H - rho * rho - d * d) / (2.0 * r * '
                                    'd));\n'
                                    '        ray_r_mu_intersects_ground = false;\n'
                                    '    }\n'
                                    '\n'
                                    '    float x_mu_s = GetUnitRangeFromTextureCoord(uvwz.y, SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                    '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                    '    float d_max = H;\n'
                                    '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                    '    float a = (A - x_mu_s * A) / (1.0 + x_mu_s * A);\n'
                                    '    float d = d_min + min(a, A) * (d_max - d_min);\n'
                                    '    mu_s = (d == 0.0) ? 1.0 : ClampCosine((H * H - d * d) / (2.0 * '
                                    'atmosphere.bottom_radius * d));\n'
                                    '    nu = ClampCosine(uvwz.x * 2.0 - 1.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuMuSNuFromScatteringTextureFragCoord(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec3 gl_frag_coord,\n'
                                    '    out float r,\n'
                                    '    out float mu,\n'
                                    '    out float mu_s,\n'
                                    '    out float nu,\n'
                                    '    out bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    const vec4 SCATTERING_TEXTURE_SIZE = vec4(\n'
                                    '        SCATTERING_TEXTURE_NU_SIZE - 1,\n'
                                    '        SCATTERING_TEXTURE_MU_S_SIZE,\n'
                                    '        SCATTERING_TEXTURE_MU_SIZE,\n'
                                    '        SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    float frag_coord_nu = floor(gl_frag_coord.x / float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                    '    float frag_coord_mu_s = mod(gl_frag_coord.x, float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                    '    vec4 uvwz = vec4(frag_coord_nu, frag_coord_mu_s, gl_frag_coord.y, gl_frag_coord.z) / '
                                    'SCATTERING_TEXTURE_SIZE;\n'
                                    '    GetRMuMuSNuFromScatteringTextureUvwz(atmosphere, uvwz, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    nu = clamp(\n'
                                    '        nu,\n'
                                    '        mu * mu_s - sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)),\n'
                                    '        mu * mu_s + sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScatteringtexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in vec3 gl_frag_coord,\n'
                                    '    out vec3 rayleigh, out vec3 mie)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    float nu;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground);\n'
                                    '    ComputeSingleScattering(atmosphere, transmittance_texture,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                    '    float tex_x = floor(tex_coord_x);\n'
                                    '    float lerp = tex_coord_x - tex_x;\n'
                                    '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    return vec3(\n'
                                    '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                    'texture3D(scattering_texture, uvw1) * lerp);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    int scattering_order)\n'
                                    '{\n'
                                    '    if (scattering_order == 1)\n'
                                    '    {\n'
                                    '        vec3 rayleigh = GetScattering(\n'
                                    '            atmosphere, single_rayleigh_scattering_texture, r, mu, mu_s, nu,\n'
                                    '            ray_r_mu_intersects_ground);\n'
                                    '        vec3 mie = GetScattering(\n'
                                    '            atmosphere, single_mie_scattering_texture, r, mu, mu_s, nu,\n'
                                    '            ray_r_mu_intersects_ground);\n'
                                    '\n'
                                    '        return rayleigh * RayleighPhaseFunction(nu) + mie * '
                                    'MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '    }\n'
                                    '\n'
                                    '    return GetScattering(atmosphere, multiple_scattering_texture, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r, float mu_s);\n'
                                    '\n'
                                    'vec3 ComputeScatteringDensity(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r, float mu, float mu_s, float nu, int scattering_order)\n'
                                    '{\n'
                                    '    vec3 zenith_direction = vec3(0.0, 0.0, 1.0);\n'
                                    '    vec3 omega = vec3(sqrt(1.0 - mu * mu), 0.0, mu);\n'
                                    '    float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;\n'
                                    '    float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));\n'
                                    '    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, mu_s);\n'
                                    '\n'
                                    '    const int SAMPLE_COUNT = 16;\n'
                                    '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                    '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                    '    vec3 rayleigh_mie = vec3(0.0);\n'
                                    '\n'
                                    '    for (int l = 0; l < SAMPLE_COUNT; ++l)\n'
                                    '    {\n'
                                    '        float theta = (float(l) + 0.5) * dtheta;\n'
                                    '        float cos_theta = cos(theta);\n'
                                    '        float sin_theta = sin(theta);\n'
                                    '        bool ray_r_theta_intersects_ground = RayIntersectsGround(atmosphere, r, '
                                    'cos_theta);\n'
                                    '\n'
                                    '        float distance_to_ground = 0.0;\n'
                                    '        vec3 transmittance_to_ground = vec3(0.0);\n'
                                    '        vec3 ground_albedo = vec3(0.0);\n'
                                    '        if (ray_r_theta_intersects_ground)\n'
                                    '        {\n'
                                    '            distance_to_ground = DistanceToBottomAtmosphereBoundary(atmosphere, r, '
                                    'cos_theta);\n'
                                    '            transmittance_to_ground = GetTransmittance(atmosphere, transmittance_texture, '
                                    'r, cos_theta, distance_to_ground, true );\n'
                                    '            ground_albedo = atmosphere.ground_albedo;\n'
                                    '        }\n'
                                    '\n'
                                    '        for (int m = 0; m < 2 * SAMPLE_COUNT; ++m)\n'
                                    '        {\n'
                                    '            float phi = 1.5 * dphi;\n'
                                    '            vec3 omega_i = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);\n'
                                    '            float domega_i = dtheta * dphi * sin(theta);\n'
                                    '\n'
                                    '            float nu1 = dot(omega_s, omega_i);\n'
                                    '            vec3 incident_radiance = GetScattering(atmosphere,\n'
                                    '                single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                    '                multiple_scattering_texture, r, omega_i.z, mu_s, nu1,\n'
                                    '                ray_r_theta_intersects_ground, scattering_order - 1);\n'
                                    '\n'
                                    '            vec3 ground_normal = normalize(zenith_direction * r + omega_i * '
                                    'distance_to_ground);\n'
                                    '            vec3 ground_irradiance = GetIrradiance(\n'
                                    '                atmosphere, irradiance_texture, atmosphere.bottom_radius,\n'
                                    '                dot(ground_normal, omega_s));\n'
                                    '            incident_radiance += transmittance_to_ground * ground_albedo * (1.0 / (PI)) * '
                                    'ground_irradiance;\n'
                                    '\n'
                                    '            float nu2 = dot(omega, omega_i);\n'
                                    '            float rayleigh_density = GetProfileDensity(\n'
                                    '                atmosphere.rayleigh_density, r - atmosphere.bottom_radius);\n'
                                    '            float mie_density = GetProfileDensity(\n'
                                    '                atmosphere.mie_density, r - atmosphere.bottom_radius);\n'
                                    '            rayleigh_mie += incident_radiance *\n'
                                    '                (atmosphere.rayleigh_scattering * rayleigh_density * '
                                    'RayleighPhaseFunction(nu2) +\n'
                                    '                atmosphere.mie_scattering * mie_density *\n'
                                    '                MiePhaseFunction(atmosphere.mie_phase_function_g, nu2)) * domega_i;\n'
                                    '        }\n'
                                    '    }\n'
                                    '    return rayleigh_mie;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeMultipleScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_density_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 50;\n'
                                    '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                    'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                    '    vec3 rayleigh_mie_sum = vec3(0.0);\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        float r_i = ClampRadius(atmosphere, sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * '
                                    'r));\n'
                                    '        float mu_i = ClampCosine((r * mu + d_i) / r_i);\n'
                                    '        float mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);\n'
                                    '        vec3 rayleigh_mie_i =\n'
                                    '            GetScattering(atmosphere, scattering_density_texture, r_i, mu_i, mu_s_i, nu, '
                                    'ray_r_mu_intersects_ground) *\n'
                                    '            GetTransmittance(atmosphere, transmittance_texture, r, mu, d_i, '
                                    'ray_r_mu_intersects_ground) * dx;\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        rayleigh_mie_sum += rayleigh_mie_i * weight_i;\n'
                                    '    }\n'
                                    '    return rayleigh_mie_sum;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeScatteringDensitytexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    const in vec3 gl_frag_coord, int scattering_order)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    float nu;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    return ComputeScatteringDensity(atmosphere, transmittance_texture,\n'
                                    '        single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                    '        multiple_scattering_texture, irradiance_texture, r, mu, mu_s, nu,\n'
                                    '        scattering_order);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeMultipleScatteringtexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_density_texture,\n'
                                    '    const in vec3 gl_frag_coord, out float nu)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    return ComputeMultipleScattering(atmosphere, transmittance_texture,\n'
                                    '        scattering_density_texture, r, mu, mu_s, nu,\n'
                                    '        ray_r_mu_intersects_ground);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeDirectIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    float alpha_s = atmosphere.sun_angular_radius;\n'
                                    '    float average_cosine_factor = 0.0;\n'
                                    '    if(-alpha_s <= mu_s)\n'
                                    '    {\n'
                                    '        if(mu_s <= alpha_s)\n'
                                    '        {\n'
                                    '            average_cosine_factor = (mu_s + alpha_s) * (mu_s + alpha_s) / (4.0 * '
                                    'alpha_s);\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            average_cosine_factor = mu_s;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    return atmosphere.solar_irradiance *\n'
                                    '        GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu_s) * average_cosine_factor;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeIndirectIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s,\n'
                                    '    int scattering_order)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 32;\n'
                                    '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                    '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                    '\n'
                                    '    vec3 result = vec3(0.0);\n'
                                    '    vec3 omega_s = vec3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);\n'
                                    '    for (int j = 0; j < SAMPLE_COUNT / 2; ++j)\n'
                                    '    {\n'
                                    '        float theta = (float(j) + 0.5) * dtheta;\n'
                                    '        for (int i = 0; i < 2 * SAMPLE_COUNT; ++i)\n'
                                    '        {\n'
                                    '            float phi = (float(i) + 0.5) * dphi;\n'
                                    '            vec3 omega = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n'
                                    '            float domega = dtheta * dphi * sin(theta);\n'
                                    '            float nu = dot(omega, omega_s);\n'
                                    '            result += GetScattering(\n'
                                    '                atmosphere,\n'
                                    '                single_rayleigh_scattering_texture,\n'
                                    '                single_mie_scattering_texture,\n'
                                    '                multiple_scattering_texture,\n'
                                    '                r, omega.z, mu_s, nu, false, scattering_order) * omega.z * domega;\n'
                                    '        }\n'
                                    '    }\n'
                                    '  return result;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec2 GetIrradianceTextureUvFromRMuS(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu_s)\n'
                                    '{\n'
                                    '    float x_r = (r - atmosphere.bottom_radius) / (atmosphere.top_radius - '
                                    'atmosphere.bottom_radius);\n'
                                    '    float x_mu_s = mu_s * 0.5 + 0.5;\n'
                                    '    return vec2(GetTextureCoordFromUnitRange(x_mu_s, IRRADIANCE_TEXTURE_WIDTH),\n'
                                    '                GetTextureCoordFromUnitRange(x_r, IRRADIANCE_TEXTURE_HEIGHT));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuSFromIrradianceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 uv, out float r, out float mu_s)\n'
                                    '{\n'
                                    '    float x_mu_s = GetUnitRangeFromTextureCoord(uv.x, IRRADIANCE_TEXTURE_WIDTH);\n'
                                    '    float x_r = GetUnitRangeFromTextureCoord(uv.y, IRRADIANCE_TEXTURE_HEIGHT);\n'
                                    '    r = atmosphere.bottom_radius + x_r * (atmosphere.top_radius - '
                                    'atmosphere.bottom_radius);\n'
                                    '    mu_s = ClampCosine(2.0 * x_mu_s - 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ComputeDirectIrradiancetexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in vec2 gl_frag_coord)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu_s;\n'
                                    '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                    'r, mu_s);\n'
                                    '    return ComputeDirectIrradiance(atmosphere, transmittance_texture, r, mu_s);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeIndirectIrradiancetexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in vec2 gl_frag_coord, int scattering_order)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu_s;\n'
                                    '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                    'r, mu_s);\n'
                                    '    return ComputeIndirectIrradiance(atmosphere, single_rayleigh_scattering_texture, '
                                    'single_mie_scattering_texture,\n'
                                    '        multiple_scattering_texture, r, mu_s, scattering_order);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    vec2 uv = GetIrradianceTextureUvFromRMuS(atmosphere, r, mu_s);\n'
                                    '    return vec3(texture2D(irradiance_texture, uv));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    'vec3 GetExtrapolatedSingleMieScattering(const in AtmosphereParameters atmosphere, const '
                                    'in vec4 scattering)\n'
                                    '{\n'
                                    '    if (scattering.r == 0.0)\n'
                                    '    {\n'
                                    '        return vec3(0.0);\n'
                                    '    }\n'
                                    '    return scattering.rgb * scattering.a / scattering.r *\n'
                                    '        (atmosphere.rayleigh_scattering.r / atmosphere.mie_scattering.r) *\n'
                                    '        (atmosphere.mie_scattering / atmosphere.rayleigh_scattering);\n'
                                    '}\n'
                                    '#endif\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetCombinedScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 single_mie_scattering)\n'
                                    '{\n'
                                    '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                    '    float tex_x = floor(tex_coord_x);\n'
                                    '    float lerp = tex_coord_x - tex_x;\n'
                                    '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '    vec4 combined_scattering =\n'
                                    '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                    'texture3D(scattering_texture, uvw1) * lerp;\n'
                                    '    vec3 scattering = vec3(combined_scattering.xyz);\n'
                                    '    single_mie_scattering = GetExtrapolatedSingleMieScattering(atmosphere, '
                                    'combined_scattering);\n'
                                    '#else\n'
                                    '#endif\n'
                                    '    return scattering;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeSkyRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    vec3 camera, const in vec3 view_ray, float shadow_length,\n'
                                    '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    float r = length(camera);\n'
                                    '    float rmu = dot(camera, view_ray);\n'
                                    '    float distance_to_top_atmosphere_boundary = -rmu -\n'
                                    '        sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                    '\n'
                                    '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                    '    {\n'
                                    '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                    '        r = atmosphere.top_radius;\n'
                                    '        rmu += distance_to_top_atmosphere_boundary;\n'
                                    '    }\n'
                                    '    else if(r > atmosphere.top_radius)\n'
                                    '    {\n'
                                    '        transmittance = vec3(1.0);\n'
                                    '        return vec3(0.0);\n'
                                    '    }\n'
                                    '\n'
                                    '    float mu = rmu / r;\n'
                                    '    float mu_s = dot(camera, sun_direction) / r;\n'
                                    '    float nu = dot(view_ray, sun_direction);\n'
                                    '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                    '\n'
                                    '    transmittance = ray_r_mu_intersects_ground ?\n'
                                    '        vec3(0.0) : GetTransmittanceToTopAtmosphereBoundary(atmosphere, '
                                    'transmittance_texture, r, mu);\n'
                                    '    vec3 single_mie_scattering;\n'
                                    '    vec3 scattering;\n'
                                    '    if (shadow_length == 0.0)\n'
                                    '    {\n'
                                    '        scattering = GetCombinedScattering(\n'
                                    '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '            r, mu, mu_s, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d = shadow_length;\n'
                                    '        float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '        float mu_p = (r * mu + d) / r_p;\n'
                                    '        float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                    '\n'
                                    '        scattering = GetCombinedScattering(\n'
                                    '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '            r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                    '        vec3 shadow_transmittance =\n'
                                    '            GetTransmittance(atmosphere, transmittance_texture, r, mu, shadow_length, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '        scattering = scattering * shadow_transmittance;\n'
                                    '        single_mie_scattering = single_mie_scattering * shadow_transmittance;\n'
                                    '    }\n'
                                    '\n'
                                    '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                    '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeSkyRadianceToPoint(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    vec3 camera, const in vec3 point, float shadow_length,\n'
                                    '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    vec3 view_ray = normalize(point - camera);\n'
                                    '    float r = length(camera);\n'
                                    '    float rmu = dot(camera, view_ray);\n'
                                    '    float distance_to_top_atmosphere_boundary =\n'
                                    '        -rmu - sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                    '\n'
                                    '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                    '    {\n'
                                    '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                    '        r = atmosphere.top_radius;\n'
                                    '        rmu += distance_to_top_atmosphere_boundary;\n'
                                    '    }\n'
                                    '\n'
                                    '    float mu = rmu / r;\n'
                                    '    float mu_s = dot(camera, sun_direction) / r;\n'
                                    '    float nu = dot(view_ray, sun_direction);\n'
                                    '    float d = length(point - camera);\n'
                                    '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                    '\n'
                                    '    transmittance = GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '\n'
                                    '    vec3 single_mie_scattering;\n'
                                    '    vec3 scattering = GetCombinedScattering(\n'
                                    '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground,\n'
                                    '        single_mie_scattering);\n'
                                    '\n'
                                    '    d = max(d - shadow_length, 0.0);\n'
                                    '    float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_p = (r * mu + d) / r_p;\n'
                                    '    float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                    '\n'
                                    '    vec3 single_mie_scattering_p;\n'
                                    '    vec3 scattering_p = GetCombinedScattering(\n'
                                    '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '        r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground,\n'
                                    '        single_mie_scattering_p);\n'
                                    '\n'
                                    '    vec3 shadow_transmittance = transmittance;\n'
                                    '    if (shadow_length > 0.0)\n'
                                    '    {\n'
                                    '        shadow_transmittance = GetTransmittance(\n'
                                    '            atmosphere, transmittance_texture, r, mu, d, ray_r_mu_intersects_ground);\n'
                                    '    }\n'
                                    '    scattering = scattering - shadow_transmittance * scattering_p;\n'
                                    '    single_mie_scattering = single_mie_scattering - shadow_transmittance * '
                                    'single_mie_scattering_p;\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '    single_mie_scattering = GetExtrapolatedSingleMieScattering(atmosphere, '
                                    'vec4(scattering, single_mie_scattering.r));\n'
                                    '#endif\n'
                                    '\n'
                                    '    single_mie_scattering = single_mie_scattering * smoothstep(0.0, float(0.01), mu_s);\n'
                                    '\n'
                                    '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                    '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ComputeSunAndSkyIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    const in vec3 point, const in vec3 normal, const in vec3 sun_direction,\n'
                                    '    out vec3 sky_irradiance)\n'
                                    '{\n'
                                    '    float r = length(point);\n'
                                    '    float mu_s = dot(point, sun_direction) / r;\n'
                                    '\n'
                                    '    sky_irradiance = GetIrradiance(atmosphere, irradiance_texture, r, mu_s) * (1.0 + '
                                    'dot(normal, point) / r) * 0.5;\n'
                                    '\n'
                                    '    return atmosphere.solar_irradiance *\n'
                                    '        GetTransmittanceToSun(atmosphere, transmittance_texture, r, mu_s) *\n'
                                    '        max(dot(normal, sun_direction), 0.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetSolarRadiance(const in AtmosphereParameters atmosphere)\n'
                                    '{\n'
                                    '    return atmosphere.solar_irradiance /\n'
                                    '        (PI * atmosphere.sun_angular_radius * atmosphere.sun_angular_radius) * '
                                    'SUN_RADIANCE_TO_LUMINANCE * atmosphere_exposure;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSkyRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 view_ray, float '
                                    'shadow_length,\n'
                                    '    vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    return ComputeSkyRadiance(atmosphere, transmittance_texture,\n'
                                    '        scattering_texture, single_mie_scattering_texture,\n'
                                    '        camera, view_ray, shadow_length, sun_direction, transmittance) * '
                                    'SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSkyRadianceToPoint(\n'
                                    '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 point, float '
                                    'shadow_length,\n'
                                    '    vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    return ComputeSkyRadianceToPoint(atmosphere, transmittance_texture,\n'
                                    '        scattering_texture, single_mie_scattering_texture,\n'
                                    '        camera, point, shadow_length, sun_direction, transmittance) * '
                                    'SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSunAndSkyIrradiance(\n'
                                    '   const in AtmosphereParameters atmosphere, vec3 p, vec3 normal, vec3 sun_direction,\n'
                                    '   out vec3 sky_irradiance)\n'
                                    '{\n'
                                    '    vec3 sun_irradiance = ComputeSunAndSkyIrradiance(\n'
                                    '        atmosphere, transmittance_texture, irradiance_texture, p, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '    sky_irradiance *= SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '    return sun_irradiance * SUN_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'float GetSunVisibility(vec3 point, vec3 sun_direction)\n'
                                    '{\n'
                                    '    vec3 p = point - kSphereCenter;\n'
                                    '    float p_dot_v = dot(p, sun_direction);\n'
                                    '    float p_dot_p = dot(p, p);\n'
                                    '    float ray_sphere_center_squared_distance = p_dot_p - p_dot_v * p_dot_v;\n'
                                    '    float distance_to_intersection = -p_dot_v - sqrt(\n'
                                    '        kSphereRadius * kSphereRadius - ray_sphere_center_squared_distance);\n'
                                    '    if (distance_to_intersection > 0.0)\n'
                                    '    {\n'
                                    '        float ray_sphere_distance = kSphereRadius - '
                                    'sqrt(ray_sphere_center_squared_distance);\n'
                                    '        float ray_sphere_angular_distance = -ray_sphere_distance / p_dot_v;\n'
                                    '        return smoothstep(1.0, 0.0, ray_sphere_angular_distance / sun_size.x);\n'
                                    '    }\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'float GetSkyVisibility(vec3 point)\n'
                                    '{\n'
                                    '  vec3 p = point - kSphereCenter;\n'
                                    '  float p_dot_p = dot(p, p);\n'
                                    '  return 1.0 + p.y / sqrt(p_dot_p) * kSphereRadius * kSphereRadius / p_dot_p;\n'
                                    '}\n'
                                    '\n'
                                    'void GetSphereShadowInOut(vec3 view_direction, vec3 sun_direction, out float d_in, out '
                                    'float d_out)\n'
                                    '{\n'
                                    '    vec3 pos = CAMERA_POSITION.xyz * atmosphere_ratio - kSphereCenter;\n'
                                    '    float pos_dot_sun = dot(pos, sun_direction);\n'
                                    '    float view_dot_sun = dot(view_direction, sun_direction);\n'
                                    '    float k = sun_size.x;\n'
                                    '    float l = 1.0 + k * k;\n'
                                    '    float a = 1.0 - l * view_dot_sun * view_dot_sun;\n'
                                    '    float b = dot(pos, view_direction) - l * pos_dot_sun * view_dot_sun - k * '
                                    'kSphereRadius * view_dot_sun;\n'
                                    '    float c = dot(pos, pos) - l * pos_dot_sun * pos_dot_sun -\n'
                                    '        2.0 * k * kSphereRadius * pos_dot_sun - kSphereRadius * kSphereRadius;\n'
                                    '    float discriminant = b * b - a * c;\n'
                                    '    if (discriminant > 0.0)\n'
                                    '    {\n'
                                    '        d_in = max(0.0, (-b - sqrt(discriminant)) / a);\n'
                                    '        d_out = (-b + sqrt(discriminant)) / a;\n'
                                    '        float d_base = -pos_dot_sun / view_dot_sun;\n'
                                    '        float d_apex = -(pos_dot_sun + kSphereRadius / k) / view_dot_sun;\n'
                                    '        if (view_dot_sun > 0.0)\n'
                                    '        {\n'
                                    '            d_in = max(d_in, d_apex);\n'
                                    '            d_out = a > 0.0 ? min(d_out, d_base) : d_base;\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            d_in = a > 0.0 ? max(d_in, d_base) : d_base;\n'
                                    '            d_out = min(d_out, d_apex);\n'
                                    '        }\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        d_in = 0.0;\n'
                                    '        d_out = 0.0;\n'
                                    '    }\n'
                                    '}\n'
                                    '\n'
                                    'float GetSceneShadowLength(float scene_dist, vec3 view_direction, sampler2D '
                                    'texture_shadow)\n'
                                    '{\n'
                                    '    const float earth_radius = abs(earth_center.y);\n'
                                    '    bool shadow_enter = false;\n'
                                    '    bool do_exit = false;\n'
                                    '    float scene_shadow_out = 0.0;\n'
                                    '    float scene_shadow_in = 0.0;\n'
                                    '    float shadow_length = 0.0;\n'
                                    '    const int LOOP = 64;\n'
                                    '    float d = min(NEAR_FAR.y * 0.01, scene_dist) / float(LOOP);\n'
                                    '    float enter_count = 0.0;\n'
                                    '\n'
                                    '    for(int i=0; i<LOOP; ++i)\n'
                                    '    {\n'
                                    '        float ray_dist = float(i) * d;\n'
                                    '        vec3 world_pos = CAMERA_POSITION.xyz + view_direction * ray_dist;\n'
                                    '        vec4 shadow_uv = SHADOW_MATRIX * vec4(world_pos, 1.0);\n'
                                    '        shadow_uv.xyz /= shadow_uv.w;\n'
                                    '        shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                    '        float shadow_depth = texture2D(texture_shadow, shadow_uv.xy, 0).x;\n'
                                    '\n'
                                    '        if(shadow_uv.x < 0.0 || 1.0 < shadow_uv.x || shadow_uv.y < 0.0 || 1.0 < '
                                    'shadow_uv.y || scene_dist <= ray_dist)\n'
                                    '        {\n'
                                    '            do_exit = true;\n'
                                    '        }\n'
                                    '        else if(length(world_pos - earth_center) < earth_radius)\n'
                                    '        {\n'
                                    '            \n'
                                    '            do_exit = true;\n'
                                    '        }\n'
                                    '        else if(false == shadow_enter && shadow_depth <= shadow_uv.z)\n'
                                    '        {\n'
                                    '            \n'
                                    '            shadow_enter = true;\n'
                                    '            scene_shadow_in = dot(view_direction, world_pos);\n'
                                    '        }\n'
                                    '        else if(shadow_enter && shadow_uv.z < shadow_depth)\n'
                                    '        {\n'
                                    '            \n'
                                    '            scene_shadow_out = dot(view_direction, world_pos);\n'
                                    '            shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                    '\n'
                                    '            \n'
                                    '            shadow_enter = false;\n'
                                    '            scene_shadow_in = 0.0;\n'
                                    '            scene_shadow_out = 0.0;\n'
                                    '            continue;\n'
                                    '        }\n'
                                    '\n'
                                    '        if(shadow_enter)\n'
                                    '        {\n'
                                    '            enter_count += 1.0;\n'
                                    '        }\n'
                                    '\n'
                                    '        if(do_exit || i == (LOOP-1))\n'
                                    '        {\n'
                                    '            if(shadow_enter)\n'
                                    '            {\n'
                                    '                \n'
                                    '                scene_shadow_out = dot(view_direction, world_pos);\n'
                                    '                shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                    '            }\n'
                                    '            else\n'
                                    '            {\n'
                                    '                \n'
                                    '                scene_shadow_in = 0.0;\n'
                                    '                scene_shadow_out = 0.0;\n'
                                    '            }\n'
                                    '            break;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    shadow_length = enter_count / float(LOOP);\n'
                                    '\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    float lightshaft_fadein_hack = smoothstep(0.02, 0.04, '
                                    'dot(normalize(relative_camera_pos - earth_center), sun_direction));\n'
                                    '\n'
                                    '    return max(0.0, shadow_length) * lightshaft_fadein_hack * 2.0;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetSceneRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float scene_linear_depth, vec3 eye_direction, vec3 normal,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    \n'
                                    '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                    '    relative_point.y = max(0.0, relative_point.y);\n'
                                    '\n'
                                    '    \n'
                                    '    float scene_shadow_length = 0.0;\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                    '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                    'transmittance);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetSceneRadianceWithShadow(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float scene_linear_depth, vec3 eye_direction, vec3 normal, sampler2D texture_shadow,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter, out float '
                                    'scene_shadow_length)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    \n'
                                    '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                    '    relative_point.y = max(0.0, relative_point.y);\n'
                                    '\n'
                                    '    scene_shadow_length = GetSceneShadowLength(scene_linear_depth, eye_direction, '
                                    'texture_shadow);\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                    '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                    'transmittance);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetCloudRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float dist, vec3 eye_direction, float scene_shadow_length,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 inscatter)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 point = camera_pos + eye_direction.xyz * max(NEAR_FAR.x, dist) * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '        atmosphere, point.xyz - earth_center, sun_direction, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    inscatter = GetSkyRadianceToPoint(atmosphere, camera_pos - earth_center,\n'
                                    '        point.xyz - earth_center, scene_shadow_length, sun_direction, transmittance);\n'
                                    '\n'
                                    '    sun_irradiance = max(vec3(0.0), sun_irradiance);\n'
                                    '    sky_irradiance = max(vec3(0.0), sky_irradiance);\n'
                                    '    transmittance = max(vec3(0.0), transmittance);\n'
                                    '    inscatter = max(vec3(0.0), inscatter);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '#endif /* UUID_1e1e1296_82f1_3b3b_b18c_5a0495e2ee50 */\n'
                                    '\n'
                                    'const AtmosphereParameters ATMOSPHERE = AtmosphereParameters(\n'
                                    'vec3(1.474000, 1.850400, 1.911980),\n'
                                    '0.01175,\n'
                                    '6361.0,\n'
                                    '6420.0,\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                    '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.125000, 0.000000, '
                                    '0.000000))),\n'
                                    'vec3(0.005802, 0.013558, 0.033100),\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                    '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.833333, 0.000000, '
                                    '0.000000))),\n'
                                    'vec3(0.003996, 0.003996, 0.003996),\n'
                                    'vec3(0.004440, 0.004440, 0.004440),\n'
                                    '0.8,\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(25.000000, 0.000000, 0.000000, '
                                    '0.066667, -0.666667),DensityProfileLayer(0.000000, 0.000000, 0.000000, -0.066667, '
                                    '2.666667))),\n'
                                    'vec3(0.000650, 0.001881, 0.000085),\n'
                                    'vec3(0.100000, 0.100000, 0.100000),\n'
                                    '-0.4999999690599179);\n'
                                    '#endif /* UUID_cc4e9014_7fb8_3f2b_a4a9_1eff5a15df7d */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/atmosphere_vs.glsl"\n'
                                    '#ifndef UUID_cff7c5ca_cbf0_3698_afd8_ffdda5ce3fee\n'
                                    '#define UUID_cff7c5ca_cbf0_3698_afd8_ffdda5ce3fee\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                    '#define UUID_b3108ea4_a792_314c_8c54_4cca197e27c2\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_b3108ea4_a792_314c_8c54_4cca197e27c2 */\n'
                                    '\n'
                                    '#ifdef VERTEX_SHADER\n'
                                    'layout(location = 0) in vec4 vertex;\n'
                                    'out vec3 eye_ray;\n'
                                    'out vec2 uv;\n'
                                    'void main()\n'
                                    '{\n'
                                    '    uv = vertex.xy * 0.5 + 0.5;\n'
                                    '    eye_ray = (INV_VIEW_ORIGIN * vec4((INV_PROJECTION * vertex).xyz, 0.0)).xyz;\n'
                                    '    gl_Position = vertex;\n'
                                    '}\n'
                                    '#endif\n'
                                    '#endif /* UUID_cff7c5ca_cbf0_3698_afd8_ffdda5ce3fee */\n'
                                    '\n'
                                    'uniform sampler2D texture_shadow;\n'
                                    'uniform sampler2D texture_linear_depth;\n'
                                    'uniform sampler2D texture_normal;\n'
                                    '\n'
                                    'uniform sampler3D texture_cloud;\n'
                                    'uniform sampler3D texture_noise;\n'
                                    '\n'
                                    'uniform float cloud_exposure;\n'
                                    'uniform float cloud_altitude;\n'
                                    'uniform float cloud_height;\n'
                                    'uniform float cloud_speed;\n'
                                    'uniform float cloud_absorption;\n'
                                    '\n'
                                    'uniform float cloud_tiling;\n'
                                    'uniform float cloud_contrast;\n'
                                    'uniform float cloud_coverage;\n'
                                    '\n'
                                    'uniform float noise_tiling;\n'
                                    'uniform float noise_contrast;\n'
                                    'uniform float noise_coverage;\n'
                                    '\n'
                                    '#ifdef FRAGMENT_SHADER\n'
                                    '#endif'},
 'shader_name': 'precomputed_atmosphere.atmosphere',
 'uniforms': [('vec3', 'earth_center'),
              ('vec2', 'sun_size'),
              ('float', 'atmosphere_exposure'),
              ('bool', 'render_light_probe_mode'),
              ('sampler2D', 'transmittance_texture'),
              ('sampler2D', 'irradiance_texture'),
              ('sampler3D', 'scattering_texture'),
              ('sampler3D', 'single_mie_scattering_texture'),
              ('sampler3D', 'single_rayleigh_scattering_texture'),
              ('sampler3D', 'scattering_density_texture'),
              ('sampler3D', 'multiple_scattering_texture'),
              ('vec3', 'SKY_RADIANCE_TO_LUMINANCE'),
              ('vec3', 'SUN_RADIANCE_TO_LUMINANCE'),
              ('sampler2D', 'texture_shadow'),
              ('sampler2D', 'texture_linear_depth'),
              ('sampler2D', 'texture_normal'),
              ('sampler3D', 'texture_cloud'),
              ('sampler3D', 'texture_noise'),
              ('float', 'cloud_exposure'),
              ('float', 'cloud_altitude'),
              ('float', 'cloud_height'),
              ('float', 'cloud_speed'),
              ('float', 'cloud_absorption'),
              ('float', 'cloud_tiling'),
              ('float', 'cloud_contrast'),
              ('float', 'cloud_coverage'),
              ('float', 'noise_tiling'),
              ('float', 'noise_contrast'),
              ('float', 'noise_coverage')]}
